/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cnd.greencube.server.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-03-25")
public class FinanceService {

  /**
   * 内容服务接口<br/>
   * <b>用于前端访问提供的各种接口服务</b>
   * @author 董亚莉
   */
  public interface Iface {

    /**
     * 统计指定时间内共产会会费缴纳情况（按月份）
     * @param startTime 开始时间
     * @param endTime 结束时间
     * @return 统计情况的json串
     * 
     * @param startTime
     * @param endTime
     */
    public String loadProviderMemberfiStat(String startTime, String endTime) throws org.apache.thrift.TException;

    /**
     * 统计指定时间内共产会管理费缴纳情况（按月份）
     * @param startTime 开始时间
     * @param endTime 结束时间
     * @return 统计情况的json串
     * 
     * @param startTime
     * @param endTime
     */
    public String loadProviderManagerfiStat(String startTime, String endTime) throws org.apache.thrift.TException;

    /**
     * 统计指定时间内店主会会费缴纳情况（按月份）
     * @param startTime 开始时间
     * @param endTime 结束时间
     * @return 统计情况的json串
     * 
     * @param startTime
     * @param endTime
     */
    public String loadShopMemberfiStat(String startTime, String endTime) throws org.apache.thrift.TException;

    /**
     * 统计指定时间内店主会管理费缴纳情况（按月份）
     * @param startTime 开始时间
     * @param endTime 结束时间
     * @return 统计情况的json串
     * 
     * @param startTime
     * @param endTime
     */
    public String loadShopManagerfiStat(String startTime, String endTime) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void loadProviderMemberfiStat(String startTime, String endTime, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void loadProviderManagerfiStat(String startTime, String endTime, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void loadShopMemberfiStat(String startTime, String endTime, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void loadShopManagerfiStat(String startTime, String endTime, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public String loadProviderMemberfiStat(String startTime, String endTime) throws org.apache.thrift.TException
    {
      send_loadProviderMemberfiStat(startTime, endTime);
      return recv_loadProviderMemberfiStat();
    }

    public void send_loadProviderMemberfiStat(String startTime, String endTime) throws org.apache.thrift.TException
    {
      loadProviderMemberfiStat_args args = new loadProviderMemberfiStat_args();
      args.setStartTime(startTime);
      args.setEndTime(endTime);
      sendBase("loadProviderMemberfiStat", args);
    }

    public String recv_loadProviderMemberfiStat() throws org.apache.thrift.TException
    {
      loadProviderMemberfiStat_result result = new loadProviderMemberfiStat_result();
      receiveBase(result, "loadProviderMemberfiStat");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "loadProviderMemberfiStat failed: unknown result");
    }

    public String loadProviderManagerfiStat(String startTime, String endTime) throws org.apache.thrift.TException
    {
      send_loadProviderManagerfiStat(startTime, endTime);
      return recv_loadProviderManagerfiStat();
    }

    public void send_loadProviderManagerfiStat(String startTime, String endTime) throws org.apache.thrift.TException
    {
      loadProviderManagerfiStat_args args = new loadProviderManagerfiStat_args();
      args.setStartTime(startTime);
      args.setEndTime(endTime);
      sendBase("loadProviderManagerfiStat", args);
    }

    public String recv_loadProviderManagerfiStat() throws org.apache.thrift.TException
    {
      loadProviderManagerfiStat_result result = new loadProviderManagerfiStat_result();
      receiveBase(result, "loadProviderManagerfiStat");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "loadProviderManagerfiStat failed: unknown result");
    }

    public String loadShopMemberfiStat(String startTime, String endTime) throws org.apache.thrift.TException
    {
      send_loadShopMemberfiStat(startTime, endTime);
      return recv_loadShopMemberfiStat();
    }

    public void send_loadShopMemberfiStat(String startTime, String endTime) throws org.apache.thrift.TException
    {
      loadShopMemberfiStat_args args = new loadShopMemberfiStat_args();
      args.setStartTime(startTime);
      args.setEndTime(endTime);
      sendBase("loadShopMemberfiStat", args);
    }

    public String recv_loadShopMemberfiStat() throws org.apache.thrift.TException
    {
      loadShopMemberfiStat_result result = new loadShopMemberfiStat_result();
      receiveBase(result, "loadShopMemberfiStat");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "loadShopMemberfiStat failed: unknown result");
    }

    public String loadShopManagerfiStat(String startTime, String endTime) throws org.apache.thrift.TException
    {
      send_loadShopManagerfiStat(startTime, endTime);
      return recv_loadShopManagerfiStat();
    }

    public void send_loadShopManagerfiStat(String startTime, String endTime) throws org.apache.thrift.TException
    {
      loadShopManagerfiStat_args args = new loadShopManagerfiStat_args();
      args.setStartTime(startTime);
      args.setEndTime(endTime);
      sendBase("loadShopManagerfiStat", args);
    }

    public String recv_loadShopManagerfiStat() throws org.apache.thrift.TException
    {
      loadShopManagerfiStat_result result = new loadShopManagerfiStat_result();
      receiveBase(result, "loadShopManagerfiStat");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "loadShopManagerfiStat failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void loadProviderMemberfiStat(String startTime, String endTime, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      loadProviderMemberfiStat_call method_call = new loadProviderMemberfiStat_call(startTime, endTime, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class loadProviderMemberfiStat_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String startTime;
      private String endTime;
      public loadProviderMemberfiStat_call(String startTime, String endTime, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.startTime = startTime;
        this.endTime = endTime;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("loadProviderMemberfiStat", org.apache.thrift.protocol.TMessageType.CALL, 0));
        loadProviderMemberfiStat_args args = new loadProviderMemberfiStat_args();
        args.setStartTime(startTime);
        args.setEndTime(endTime);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_loadProviderMemberfiStat();
      }
    }

    public void loadProviderManagerfiStat(String startTime, String endTime, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      loadProviderManagerfiStat_call method_call = new loadProviderManagerfiStat_call(startTime, endTime, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class loadProviderManagerfiStat_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String startTime;
      private String endTime;
      public loadProviderManagerfiStat_call(String startTime, String endTime, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.startTime = startTime;
        this.endTime = endTime;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("loadProviderManagerfiStat", org.apache.thrift.protocol.TMessageType.CALL, 0));
        loadProviderManagerfiStat_args args = new loadProviderManagerfiStat_args();
        args.setStartTime(startTime);
        args.setEndTime(endTime);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_loadProviderManagerfiStat();
      }
    }

    public void loadShopMemberfiStat(String startTime, String endTime, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      loadShopMemberfiStat_call method_call = new loadShopMemberfiStat_call(startTime, endTime, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class loadShopMemberfiStat_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String startTime;
      private String endTime;
      public loadShopMemberfiStat_call(String startTime, String endTime, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.startTime = startTime;
        this.endTime = endTime;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("loadShopMemberfiStat", org.apache.thrift.protocol.TMessageType.CALL, 0));
        loadShopMemberfiStat_args args = new loadShopMemberfiStat_args();
        args.setStartTime(startTime);
        args.setEndTime(endTime);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_loadShopMemberfiStat();
      }
    }

    public void loadShopManagerfiStat(String startTime, String endTime, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      loadShopManagerfiStat_call method_call = new loadShopManagerfiStat_call(startTime, endTime, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class loadShopManagerfiStat_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String startTime;
      private String endTime;
      public loadShopManagerfiStat_call(String startTime, String endTime, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.startTime = startTime;
        this.endTime = endTime;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("loadShopManagerfiStat", org.apache.thrift.protocol.TMessageType.CALL, 0));
        loadShopManagerfiStat_args args = new loadShopManagerfiStat_args();
        args.setStartTime(startTime);
        args.setEndTime(endTime);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_loadShopManagerfiStat();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("loadProviderMemberfiStat", new loadProviderMemberfiStat());
      processMap.put("loadProviderManagerfiStat", new loadProviderManagerfiStat());
      processMap.put("loadShopMemberfiStat", new loadShopMemberfiStat());
      processMap.put("loadShopManagerfiStat", new loadShopManagerfiStat());
      return processMap;
    }

    public static class loadProviderMemberfiStat<I extends Iface> extends org.apache.thrift.ProcessFunction<I, loadProviderMemberfiStat_args> {
      public loadProviderMemberfiStat() {
        super("loadProviderMemberfiStat");
      }

      public loadProviderMemberfiStat_args getEmptyArgsInstance() {
        return new loadProviderMemberfiStat_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public loadProviderMemberfiStat_result getResult(I iface, loadProviderMemberfiStat_args args) throws org.apache.thrift.TException {
        loadProviderMemberfiStat_result result = new loadProviderMemberfiStat_result();
        result.success = iface.loadProviderMemberfiStat(args.startTime, args.endTime);
        return result;
      }
    }

    public static class loadProviderManagerfiStat<I extends Iface> extends org.apache.thrift.ProcessFunction<I, loadProviderManagerfiStat_args> {
      public loadProviderManagerfiStat() {
        super("loadProviderManagerfiStat");
      }

      public loadProviderManagerfiStat_args getEmptyArgsInstance() {
        return new loadProviderManagerfiStat_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public loadProviderManagerfiStat_result getResult(I iface, loadProviderManagerfiStat_args args) throws org.apache.thrift.TException {
        loadProviderManagerfiStat_result result = new loadProviderManagerfiStat_result();
        result.success = iface.loadProviderManagerfiStat(args.startTime, args.endTime);
        return result;
      }
    }

    public static class loadShopMemberfiStat<I extends Iface> extends org.apache.thrift.ProcessFunction<I, loadShopMemberfiStat_args> {
      public loadShopMemberfiStat() {
        super("loadShopMemberfiStat");
      }

      public loadShopMemberfiStat_args getEmptyArgsInstance() {
        return new loadShopMemberfiStat_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public loadShopMemberfiStat_result getResult(I iface, loadShopMemberfiStat_args args) throws org.apache.thrift.TException {
        loadShopMemberfiStat_result result = new loadShopMemberfiStat_result();
        result.success = iface.loadShopMemberfiStat(args.startTime, args.endTime);
        return result;
      }
    }

    public static class loadShopManagerfiStat<I extends Iface> extends org.apache.thrift.ProcessFunction<I, loadShopManagerfiStat_args> {
      public loadShopManagerfiStat() {
        super("loadShopManagerfiStat");
      }

      public loadShopManagerfiStat_args getEmptyArgsInstance() {
        return new loadShopManagerfiStat_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public loadShopManagerfiStat_result getResult(I iface, loadShopManagerfiStat_args args) throws org.apache.thrift.TException {
        loadShopManagerfiStat_result result = new loadShopManagerfiStat_result();
        result.success = iface.loadShopManagerfiStat(args.startTime, args.endTime);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("loadProviderMemberfiStat", new loadProviderMemberfiStat());
      processMap.put("loadProviderManagerfiStat", new loadProviderManagerfiStat());
      processMap.put("loadShopMemberfiStat", new loadShopMemberfiStat());
      processMap.put("loadShopManagerfiStat", new loadShopManagerfiStat());
      return processMap;
    }

    public static class loadProviderMemberfiStat<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, loadProviderMemberfiStat_args, String> {
      public loadProviderMemberfiStat() {
        super("loadProviderMemberfiStat");
      }

      public loadProviderMemberfiStat_args getEmptyArgsInstance() {
        return new loadProviderMemberfiStat_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            loadProviderMemberfiStat_result result = new loadProviderMemberfiStat_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            loadProviderMemberfiStat_result result = new loadProviderMemberfiStat_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, loadProviderMemberfiStat_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.loadProviderMemberfiStat(args.startTime, args.endTime,resultHandler);
      }
    }

    public static class loadProviderManagerfiStat<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, loadProviderManagerfiStat_args, String> {
      public loadProviderManagerfiStat() {
        super("loadProviderManagerfiStat");
      }

      public loadProviderManagerfiStat_args getEmptyArgsInstance() {
        return new loadProviderManagerfiStat_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            loadProviderManagerfiStat_result result = new loadProviderManagerfiStat_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            loadProviderManagerfiStat_result result = new loadProviderManagerfiStat_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, loadProviderManagerfiStat_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.loadProviderManagerfiStat(args.startTime, args.endTime,resultHandler);
      }
    }

    public static class loadShopMemberfiStat<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, loadShopMemberfiStat_args, String> {
      public loadShopMemberfiStat() {
        super("loadShopMemberfiStat");
      }

      public loadShopMemberfiStat_args getEmptyArgsInstance() {
        return new loadShopMemberfiStat_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            loadShopMemberfiStat_result result = new loadShopMemberfiStat_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            loadShopMemberfiStat_result result = new loadShopMemberfiStat_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, loadShopMemberfiStat_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.loadShopMemberfiStat(args.startTime, args.endTime,resultHandler);
      }
    }

    public static class loadShopManagerfiStat<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, loadShopManagerfiStat_args, String> {
      public loadShopManagerfiStat() {
        super("loadShopManagerfiStat");
      }

      public loadShopManagerfiStat_args getEmptyArgsInstance() {
        return new loadShopManagerfiStat_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            loadShopManagerfiStat_result result = new loadShopManagerfiStat_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            loadShopManagerfiStat_result result = new loadShopManagerfiStat_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, loadShopManagerfiStat_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.loadShopManagerfiStat(args.startTime, args.endTime,resultHandler);
      }
    }

  }

  public static class loadProviderMemberfiStat_args implements org.apache.thrift.TBase<loadProviderMemberfiStat_args, loadProviderMemberfiStat_args._Fields>, java.io.Serializable, Cloneable, Comparable<loadProviderMemberfiStat_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("loadProviderMemberfiStat_args");

    private static final org.apache.thrift.protocol.TField START_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("startTime", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField END_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("endTime", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new loadProviderMemberfiStat_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new loadProviderMemberfiStat_argsTupleSchemeFactory());
    }

    public String startTime; // required
    public String endTime; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      START_TIME((short)1, "startTime"),
      END_TIME((short)2, "endTime");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // START_TIME
            return START_TIME;
          case 2: // END_TIME
            return END_TIME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.START_TIME, new org.apache.thrift.meta_data.FieldMetaData("startTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.END_TIME, new org.apache.thrift.meta_data.FieldMetaData("endTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(loadProviderMemberfiStat_args.class, metaDataMap);
    }

    public loadProviderMemberfiStat_args() {
    }

    public loadProviderMemberfiStat_args(
      String startTime,
      String endTime)
    {
      this();
      this.startTime = startTime;
      this.endTime = endTime;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public loadProviderMemberfiStat_args(loadProviderMemberfiStat_args other) {
      if (other.isSetStartTime()) {
        this.startTime = other.startTime;
      }
      if (other.isSetEndTime()) {
        this.endTime = other.endTime;
      }
    }

    public loadProviderMemberfiStat_args deepCopy() {
      return new loadProviderMemberfiStat_args(this);
    }

    @Override
    public void clear() {
      this.startTime = null;
      this.endTime = null;
    }

    public String getStartTime() {
      return this.startTime;
    }

    public loadProviderMemberfiStat_args setStartTime(String startTime) {
      this.startTime = startTime;
      return this;
    }

    public void unsetStartTime() {
      this.startTime = null;
    }

    /** Returns true if field startTime is set (has been assigned a value) and false otherwise */
    public boolean isSetStartTime() {
      return this.startTime != null;
    }

    public void setStartTimeIsSet(boolean value) {
      if (!value) {
        this.startTime = null;
      }
    }

    public String getEndTime() {
      return this.endTime;
    }

    public loadProviderMemberfiStat_args setEndTime(String endTime) {
      this.endTime = endTime;
      return this;
    }

    public void unsetEndTime() {
      this.endTime = null;
    }

    /** Returns true if field endTime is set (has been assigned a value) and false otherwise */
    public boolean isSetEndTime() {
      return this.endTime != null;
    }

    public void setEndTimeIsSet(boolean value) {
      if (!value) {
        this.endTime = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case START_TIME:
        if (value == null) {
          unsetStartTime();
        } else {
          setStartTime((String)value);
        }
        break;

      case END_TIME:
        if (value == null) {
          unsetEndTime();
        } else {
          setEndTime((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case START_TIME:
        return getStartTime();

      case END_TIME:
        return getEndTime();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case START_TIME:
        return isSetStartTime();
      case END_TIME:
        return isSetEndTime();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof loadProviderMemberfiStat_args)
        return this.equals((loadProviderMemberfiStat_args)that);
      return false;
    }

    public boolean equals(loadProviderMemberfiStat_args that) {
      if (that == null)
        return false;

      boolean this_present_startTime = true && this.isSetStartTime();
      boolean that_present_startTime = true && that.isSetStartTime();
      if (this_present_startTime || that_present_startTime) {
        if (!(this_present_startTime && that_present_startTime))
          return false;
        if (!this.startTime.equals(that.startTime))
          return false;
      }

      boolean this_present_endTime = true && this.isSetEndTime();
      boolean that_present_endTime = true && that.isSetEndTime();
      if (this_present_endTime || that_present_endTime) {
        if (!(this_present_endTime && that_present_endTime))
          return false;
        if (!this.endTime.equals(that.endTime))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_startTime = true && (isSetStartTime());
      list.add(present_startTime);
      if (present_startTime)
        list.add(startTime);

      boolean present_endTime = true && (isSetEndTime());
      list.add(present_endTime);
      if (present_endTime)
        list.add(endTime);

      return list.hashCode();
    }

    @Override
    public int compareTo(loadProviderMemberfiStat_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetStartTime()).compareTo(other.isSetStartTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStartTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startTime, other.startTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEndTime()).compareTo(other.isSetEndTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEndTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endTime, other.endTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("loadProviderMemberfiStat_args(");
      boolean first = true;

      sb.append("startTime:");
      if (this.startTime == null) {
        sb.append("null");
      } else {
        sb.append(this.startTime);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("endTime:");
      if (this.endTime == null) {
        sb.append("null");
      } else {
        sb.append(this.endTime);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class loadProviderMemberfiStat_argsStandardSchemeFactory implements SchemeFactory {
      public loadProviderMemberfiStat_argsStandardScheme getScheme() {
        return new loadProviderMemberfiStat_argsStandardScheme();
      }
    }

    private static class loadProviderMemberfiStat_argsStandardScheme extends StandardScheme<loadProviderMemberfiStat_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, loadProviderMemberfiStat_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // START_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.startTime = iprot.readString();
                struct.setStartTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // END_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.endTime = iprot.readString();
                struct.setEndTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, loadProviderMemberfiStat_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.startTime != null) {
          oprot.writeFieldBegin(START_TIME_FIELD_DESC);
          oprot.writeString(struct.startTime);
          oprot.writeFieldEnd();
        }
        if (struct.endTime != null) {
          oprot.writeFieldBegin(END_TIME_FIELD_DESC);
          oprot.writeString(struct.endTime);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class loadProviderMemberfiStat_argsTupleSchemeFactory implements SchemeFactory {
      public loadProviderMemberfiStat_argsTupleScheme getScheme() {
        return new loadProviderMemberfiStat_argsTupleScheme();
      }
    }

    private static class loadProviderMemberfiStat_argsTupleScheme extends TupleScheme<loadProviderMemberfiStat_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, loadProviderMemberfiStat_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetStartTime()) {
          optionals.set(0);
        }
        if (struct.isSetEndTime()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetStartTime()) {
          oprot.writeString(struct.startTime);
        }
        if (struct.isSetEndTime()) {
          oprot.writeString(struct.endTime);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, loadProviderMemberfiStat_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.startTime = iprot.readString();
          struct.setStartTimeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.endTime = iprot.readString();
          struct.setEndTimeIsSet(true);
        }
      }
    }

  }

  public static class loadProviderMemberfiStat_result implements org.apache.thrift.TBase<loadProviderMemberfiStat_result, loadProviderMemberfiStat_result._Fields>, java.io.Serializable, Cloneable, Comparable<loadProviderMemberfiStat_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("loadProviderMemberfiStat_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new loadProviderMemberfiStat_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new loadProviderMemberfiStat_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(loadProviderMemberfiStat_result.class, metaDataMap);
    }

    public loadProviderMemberfiStat_result() {
    }

    public loadProviderMemberfiStat_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public loadProviderMemberfiStat_result(loadProviderMemberfiStat_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public loadProviderMemberfiStat_result deepCopy() {
      return new loadProviderMemberfiStat_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public loadProviderMemberfiStat_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof loadProviderMemberfiStat_result)
        return this.equals((loadProviderMemberfiStat_result)that);
      return false;
    }

    public boolean equals(loadProviderMemberfiStat_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(loadProviderMemberfiStat_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("loadProviderMemberfiStat_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class loadProviderMemberfiStat_resultStandardSchemeFactory implements SchemeFactory {
      public loadProviderMemberfiStat_resultStandardScheme getScheme() {
        return new loadProviderMemberfiStat_resultStandardScheme();
      }
    }

    private static class loadProviderMemberfiStat_resultStandardScheme extends StandardScheme<loadProviderMemberfiStat_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, loadProviderMemberfiStat_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, loadProviderMemberfiStat_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class loadProviderMemberfiStat_resultTupleSchemeFactory implements SchemeFactory {
      public loadProviderMemberfiStat_resultTupleScheme getScheme() {
        return new loadProviderMemberfiStat_resultTupleScheme();
      }
    }

    private static class loadProviderMemberfiStat_resultTupleScheme extends TupleScheme<loadProviderMemberfiStat_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, loadProviderMemberfiStat_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, loadProviderMemberfiStat_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class loadProviderManagerfiStat_args implements org.apache.thrift.TBase<loadProviderManagerfiStat_args, loadProviderManagerfiStat_args._Fields>, java.io.Serializable, Cloneable, Comparable<loadProviderManagerfiStat_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("loadProviderManagerfiStat_args");

    private static final org.apache.thrift.protocol.TField START_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("startTime", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField END_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("endTime", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new loadProviderManagerfiStat_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new loadProviderManagerfiStat_argsTupleSchemeFactory());
    }

    public String startTime; // required
    public String endTime; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      START_TIME((short)1, "startTime"),
      END_TIME((short)2, "endTime");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // START_TIME
            return START_TIME;
          case 2: // END_TIME
            return END_TIME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.START_TIME, new org.apache.thrift.meta_data.FieldMetaData("startTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.END_TIME, new org.apache.thrift.meta_data.FieldMetaData("endTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(loadProviderManagerfiStat_args.class, metaDataMap);
    }

    public loadProviderManagerfiStat_args() {
    }

    public loadProviderManagerfiStat_args(
      String startTime,
      String endTime)
    {
      this();
      this.startTime = startTime;
      this.endTime = endTime;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public loadProviderManagerfiStat_args(loadProviderManagerfiStat_args other) {
      if (other.isSetStartTime()) {
        this.startTime = other.startTime;
      }
      if (other.isSetEndTime()) {
        this.endTime = other.endTime;
      }
    }

    public loadProviderManagerfiStat_args deepCopy() {
      return new loadProviderManagerfiStat_args(this);
    }

    @Override
    public void clear() {
      this.startTime = null;
      this.endTime = null;
    }

    public String getStartTime() {
      return this.startTime;
    }

    public loadProviderManagerfiStat_args setStartTime(String startTime) {
      this.startTime = startTime;
      return this;
    }

    public void unsetStartTime() {
      this.startTime = null;
    }

    /** Returns true if field startTime is set (has been assigned a value) and false otherwise */
    public boolean isSetStartTime() {
      return this.startTime != null;
    }

    public void setStartTimeIsSet(boolean value) {
      if (!value) {
        this.startTime = null;
      }
    }

    public String getEndTime() {
      return this.endTime;
    }

    public loadProviderManagerfiStat_args setEndTime(String endTime) {
      this.endTime = endTime;
      return this;
    }

    public void unsetEndTime() {
      this.endTime = null;
    }

    /** Returns true if field endTime is set (has been assigned a value) and false otherwise */
    public boolean isSetEndTime() {
      return this.endTime != null;
    }

    public void setEndTimeIsSet(boolean value) {
      if (!value) {
        this.endTime = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case START_TIME:
        if (value == null) {
          unsetStartTime();
        } else {
          setStartTime((String)value);
        }
        break;

      case END_TIME:
        if (value == null) {
          unsetEndTime();
        } else {
          setEndTime((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case START_TIME:
        return getStartTime();

      case END_TIME:
        return getEndTime();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case START_TIME:
        return isSetStartTime();
      case END_TIME:
        return isSetEndTime();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof loadProviderManagerfiStat_args)
        return this.equals((loadProviderManagerfiStat_args)that);
      return false;
    }

    public boolean equals(loadProviderManagerfiStat_args that) {
      if (that == null)
        return false;

      boolean this_present_startTime = true && this.isSetStartTime();
      boolean that_present_startTime = true && that.isSetStartTime();
      if (this_present_startTime || that_present_startTime) {
        if (!(this_present_startTime && that_present_startTime))
          return false;
        if (!this.startTime.equals(that.startTime))
          return false;
      }

      boolean this_present_endTime = true && this.isSetEndTime();
      boolean that_present_endTime = true && that.isSetEndTime();
      if (this_present_endTime || that_present_endTime) {
        if (!(this_present_endTime && that_present_endTime))
          return false;
        if (!this.endTime.equals(that.endTime))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_startTime = true && (isSetStartTime());
      list.add(present_startTime);
      if (present_startTime)
        list.add(startTime);

      boolean present_endTime = true && (isSetEndTime());
      list.add(present_endTime);
      if (present_endTime)
        list.add(endTime);

      return list.hashCode();
    }

    @Override
    public int compareTo(loadProviderManagerfiStat_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetStartTime()).compareTo(other.isSetStartTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStartTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startTime, other.startTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEndTime()).compareTo(other.isSetEndTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEndTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endTime, other.endTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("loadProviderManagerfiStat_args(");
      boolean first = true;

      sb.append("startTime:");
      if (this.startTime == null) {
        sb.append("null");
      } else {
        sb.append(this.startTime);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("endTime:");
      if (this.endTime == null) {
        sb.append("null");
      } else {
        sb.append(this.endTime);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class loadProviderManagerfiStat_argsStandardSchemeFactory implements SchemeFactory {
      public loadProviderManagerfiStat_argsStandardScheme getScheme() {
        return new loadProviderManagerfiStat_argsStandardScheme();
      }
    }

    private static class loadProviderManagerfiStat_argsStandardScheme extends StandardScheme<loadProviderManagerfiStat_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, loadProviderManagerfiStat_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // START_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.startTime = iprot.readString();
                struct.setStartTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // END_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.endTime = iprot.readString();
                struct.setEndTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, loadProviderManagerfiStat_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.startTime != null) {
          oprot.writeFieldBegin(START_TIME_FIELD_DESC);
          oprot.writeString(struct.startTime);
          oprot.writeFieldEnd();
        }
        if (struct.endTime != null) {
          oprot.writeFieldBegin(END_TIME_FIELD_DESC);
          oprot.writeString(struct.endTime);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class loadProviderManagerfiStat_argsTupleSchemeFactory implements SchemeFactory {
      public loadProviderManagerfiStat_argsTupleScheme getScheme() {
        return new loadProviderManagerfiStat_argsTupleScheme();
      }
    }

    private static class loadProviderManagerfiStat_argsTupleScheme extends TupleScheme<loadProviderManagerfiStat_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, loadProviderManagerfiStat_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetStartTime()) {
          optionals.set(0);
        }
        if (struct.isSetEndTime()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetStartTime()) {
          oprot.writeString(struct.startTime);
        }
        if (struct.isSetEndTime()) {
          oprot.writeString(struct.endTime);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, loadProviderManagerfiStat_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.startTime = iprot.readString();
          struct.setStartTimeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.endTime = iprot.readString();
          struct.setEndTimeIsSet(true);
        }
      }
    }

  }

  public static class loadProviderManagerfiStat_result implements org.apache.thrift.TBase<loadProviderManagerfiStat_result, loadProviderManagerfiStat_result._Fields>, java.io.Serializable, Cloneable, Comparable<loadProviderManagerfiStat_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("loadProviderManagerfiStat_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new loadProviderManagerfiStat_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new loadProviderManagerfiStat_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(loadProviderManagerfiStat_result.class, metaDataMap);
    }

    public loadProviderManagerfiStat_result() {
    }

    public loadProviderManagerfiStat_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public loadProviderManagerfiStat_result(loadProviderManagerfiStat_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public loadProviderManagerfiStat_result deepCopy() {
      return new loadProviderManagerfiStat_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public loadProviderManagerfiStat_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof loadProviderManagerfiStat_result)
        return this.equals((loadProviderManagerfiStat_result)that);
      return false;
    }

    public boolean equals(loadProviderManagerfiStat_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(loadProviderManagerfiStat_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("loadProviderManagerfiStat_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class loadProviderManagerfiStat_resultStandardSchemeFactory implements SchemeFactory {
      public loadProviderManagerfiStat_resultStandardScheme getScheme() {
        return new loadProviderManagerfiStat_resultStandardScheme();
      }
    }

    private static class loadProviderManagerfiStat_resultStandardScheme extends StandardScheme<loadProviderManagerfiStat_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, loadProviderManagerfiStat_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, loadProviderManagerfiStat_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class loadProviderManagerfiStat_resultTupleSchemeFactory implements SchemeFactory {
      public loadProviderManagerfiStat_resultTupleScheme getScheme() {
        return new loadProviderManagerfiStat_resultTupleScheme();
      }
    }

    private static class loadProviderManagerfiStat_resultTupleScheme extends TupleScheme<loadProviderManagerfiStat_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, loadProviderManagerfiStat_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, loadProviderManagerfiStat_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class loadShopMemberfiStat_args implements org.apache.thrift.TBase<loadShopMemberfiStat_args, loadShopMemberfiStat_args._Fields>, java.io.Serializable, Cloneable, Comparable<loadShopMemberfiStat_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("loadShopMemberfiStat_args");

    private static final org.apache.thrift.protocol.TField START_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("startTime", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField END_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("endTime", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new loadShopMemberfiStat_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new loadShopMemberfiStat_argsTupleSchemeFactory());
    }

    public String startTime; // required
    public String endTime; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      START_TIME((short)1, "startTime"),
      END_TIME((short)2, "endTime");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // START_TIME
            return START_TIME;
          case 2: // END_TIME
            return END_TIME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.START_TIME, new org.apache.thrift.meta_data.FieldMetaData("startTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.END_TIME, new org.apache.thrift.meta_data.FieldMetaData("endTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(loadShopMemberfiStat_args.class, metaDataMap);
    }

    public loadShopMemberfiStat_args() {
    }

    public loadShopMemberfiStat_args(
      String startTime,
      String endTime)
    {
      this();
      this.startTime = startTime;
      this.endTime = endTime;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public loadShopMemberfiStat_args(loadShopMemberfiStat_args other) {
      if (other.isSetStartTime()) {
        this.startTime = other.startTime;
      }
      if (other.isSetEndTime()) {
        this.endTime = other.endTime;
      }
    }

    public loadShopMemberfiStat_args deepCopy() {
      return new loadShopMemberfiStat_args(this);
    }

    @Override
    public void clear() {
      this.startTime = null;
      this.endTime = null;
    }

    public String getStartTime() {
      return this.startTime;
    }

    public loadShopMemberfiStat_args setStartTime(String startTime) {
      this.startTime = startTime;
      return this;
    }

    public void unsetStartTime() {
      this.startTime = null;
    }

    /** Returns true if field startTime is set (has been assigned a value) and false otherwise */
    public boolean isSetStartTime() {
      return this.startTime != null;
    }

    public void setStartTimeIsSet(boolean value) {
      if (!value) {
        this.startTime = null;
      }
    }

    public String getEndTime() {
      return this.endTime;
    }

    public loadShopMemberfiStat_args setEndTime(String endTime) {
      this.endTime = endTime;
      return this;
    }

    public void unsetEndTime() {
      this.endTime = null;
    }

    /** Returns true if field endTime is set (has been assigned a value) and false otherwise */
    public boolean isSetEndTime() {
      return this.endTime != null;
    }

    public void setEndTimeIsSet(boolean value) {
      if (!value) {
        this.endTime = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case START_TIME:
        if (value == null) {
          unsetStartTime();
        } else {
          setStartTime((String)value);
        }
        break;

      case END_TIME:
        if (value == null) {
          unsetEndTime();
        } else {
          setEndTime((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case START_TIME:
        return getStartTime();

      case END_TIME:
        return getEndTime();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case START_TIME:
        return isSetStartTime();
      case END_TIME:
        return isSetEndTime();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof loadShopMemberfiStat_args)
        return this.equals((loadShopMemberfiStat_args)that);
      return false;
    }

    public boolean equals(loadShopMemberfiStat_args that) {
      if (that == null)
        return false;

      boolean this_present_startTime = true && this.isSetStartTime();
      boolean that_present_startTime = true && that.isSetStartTime();
      if (this_present_startTime || that_present_startTime) {
        if (!(this_present_startTime && that_present_startTime))
          return false;
        if (!this.startTime.equals(that.startTime))
          return false;
      }

      boolean this_present_endTime = true && this.isSetEndTime();
      boolean that_present_endTime = true && that.isSetEndTime();
      if (this_present_endTime || that_present_endTime) {
        if (!(this_present_endTime && that_present_endTime))
          return false;
        if (!this.endTime.equals(that.endTime))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_startTime = true && (isSetStartTime());
      list.add(present_startTime);
      if (present_startTime)
        list.add(startTime);

      boolean present_endTime = true && (isSetEndTime());
      list.add(present_endTime);
      if (present_endTime)
        list.add(endTime);

      return list.hashCode();
    }

    @Override
    public int compareTo(loadShopMemberfiStat_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetStartTime()).compareTo(other.isSetStartTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStartTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startTime, other.startTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEndTime()).compareTo(other.isSetEndTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEndTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endTime, other.endTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("loadShopMemberfiStat_args(");
      boolean first = true;

      sb.append("startTime:");
      if (this.startTime == null) {
        sb.append("null");
      } else {
        sb.append(this.startTime);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("endTime:");
      if (this.endTime == null) {
        sb.append("null");
      } else {
        sb.append(this.endTime);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class loadShopMemberfiStat_argsStandardSchemeFactory implements SchemeFactory {
      public loadShopMemberfiStat_argsStandardScheme getScheme() {
        return new loadShopMemberfiStat_argsStandardScheme();
      }
    }

    private static class loadShopMemberfiStat_argsStandardScheme extends StandardScheme<loadShopMemberfiStat_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, loadShopMemberfiStat_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // START_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.startTime = iprot.readString();
                struct.setStartTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // END_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.endTime = iprot.readString();
                struct.setEndTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, loadShopMemberfiStat_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.startTime != null) {
          oprot.writeFieldBegin(START_TIME_FIELD_DESC);
          oprot.writeString(struct.startTime);
          oprot.writeFieldEnd();
        }
        if (struct.endTime != null) {
          oprot.writeFieldBegin(END_TIME_FIELD_DESC);
          oprot.writeString(struct.endTime);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class loadShopMemberfiStat_argsTupleSchemeFactory implements SchemeFactory {
      public loadShopMemberfiStat_argsTupleScheme getScheme() {
        return new loadShopMemberfiStat_argsTupleScheme();
      }
    }

    private static class loadShopMemberfiStat_argsTupleScheme extends TupleScheme<loadShopMemberfiStat_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, loadShopMemberfiStat_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetStartTime()) {
          optionals.set(0);
        }
        if (struct.isSetEndTime()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetStartTime()) {
          oprot.writeString(struct.startTime);
        }
        if (struct.isSetEndTime()) {
          oprot.writeString(struct.endTime);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, loadShopMemberfiStat_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.startTime = iprot.readString();
          struct.setStartTimeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.endTime = iprot.readString();
          struct.setEndTimeIsSet(true);
        }
      }
    }

  }

  public static class loadShopMemberfiStat_result implements org.apache.thrift.TBase<loadShopMemberfiStat_result, loadShopMemberfiStat_result._Fields>, java.io.Serializable, Cloneable, Comparable<loadShopMemberfiStat_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("loadShopMemberfiStat_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new loadShopMemberfiStat_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new loadShopMemberfiStat_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(loadShopMemberfiStat_result.class, metaDataMap);
    }

    public loadShopMemberfiStat_result() {
    }

    public loadShopMemberfiStat_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public loadShopMemberfiStat_result(loadShopMemberfiStat_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public loadShopMemberfiStat_result deepCopy() {
      return new loadShopMemberfiStat_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public loadShopMemberfiStat_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof loadShopMemberfiStat_result)
        return this.equals((loadShopMemberfiStat_result)that);
      return false;
    }

    public boolean equals(loadShopMemberfiStat_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(loadShopMemberfiStat_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("loadShopMemberfiStat_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class loadShopMemberfiStat_resultStandardSchemeFactory implements SchemeFactory {
      public loadShopMemberfiStat_resultStandardScheme getScheme() {
        return new loadShopMemberfiStat_resultStandardScheme();
      }
    }

    private static class loadShopMemberfiStat_resultStandardScheme extends StandardScheme<loadShopMemberfiStat_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, loadShopMemberfiStat_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, loadShopMemberfiStat_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class loadShopMemberfiStat_resultTupleSchemeFactory implements SchemeFactory {
      public loadShopMemberfiStat_resultTupleScheme getScheme() {
        return new loadShopMemberfiStat_resultTupleScheme();
      }
    }

    private static class loadShopMemberfiStat_resultTupleScheme extends TupleScheme<loadShopMemberfiStat_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, loadShopMemberfiStat_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, loadShopMemberfiStat_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class loadShopManagerfiStat_args implements org.apache.thrift.TBase<loadShopManagerfiStat_args, loadShopManagerfiStat_args._Fields>, java.io.Serializable, Cloneable, Comparable<loadShopManagerfiStat_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("loadShopManagerfiStat_args");

    private static final org.apache.thrift.protocol.TField START_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("startTime", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField END_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("endTime", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new loadShopManagerfiStat_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new loadShopManagerfiStat_argsTupleSchemeFactory());
    }

    public String startTime; // required
    public String endTime; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      START_TIME((short)1, "startTime"),
      END_TIME((short)2, "endTime");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // START_TIME
            return START_TIME;
          case 2: // END_TIME
            return END_TIME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.START_TIME, new org.apache.thrift.meta_data.FieldMetaData("startTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.END_TIME, new org.apache.thrift.meta_data.FieldMetaData("endTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(loadShopManagerfiStat_args.class, metaDataMap);
    }

    public loadShopManagerfiStat_args() {
    }

    public loadShopManagerfiStat_args(
      String startTime,
      String endTime)
    {
      this();
      this.startTime = startTime;
      this.endTime = endTime;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public loadShopManagerfiStat_args(loadShopManagerfiStat_args other) {
      if (other.isSetStartTime()) {
        this.startTime = other.startTime;
      }
      if (other.isSetEndTime()) {
        this.endTime = other.endTime;
      }
    }

    public loadShopManagerfiStat_args deepCopy() {
      return new loadShopManagerfiStat_args(this);
    }

    @Override
    public void clear() {
      this.startTime = null;
      this.endTime = null;
    }

    public String getStartTime() {
      return this.startTime;
    }

    public loadShopManagerfiStat_args setStartTime(String startTime) {
      this.startTime = startTime;
      return this;
    }

    public void unsetStartTime() {
      this.startTime = null;
    }

    /** Returns true if field startTime is set (has been assigned a value) and false otherwise */
    public boolean isSetStartTime() {
      return this.startTime != null;
    }

    public void setStartTimeIsSet(boolean value) {
      if (!value) {
        this.startTime = null;
      }
    }

    public String getEndTime() {
      return this.endTime;
    }

    public loadShopManagerfiStat_args setEndTime(String endTime) {
      this.endTime = endTime;
      return this;
    }

    public void unsetEndTime() {
      this.endTime = null;
    }

    /** Returns true if field endTime is set (has been assigned a value) and false otherwise */
    public boolean isSetEndTime() {
      return this.endTime != null;
    }

    public void setEndTimeIsSet(boolean value) {
      if (!value) {
        this.endTime = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case START_TIME:
        if (value == null) {
          unsetStartTime();
        } else {
          setStartTime((String)value);
        }
        break;

      case END_TIME:
        if (value == null) {
          unsetEndTime();
        } else {
          setEndTime((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case START_TIME:
        return getStartTime();

      case END_TIME:
        return getEndTime();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case START_TIME:
        return isSetStartTime();
      case END_TIME:
        return isSetEndTime();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof loadShopManagerfiStat_args)
        return this.equals((loadShopManagerfiStat_args)that);
      return false;
    }

    public boolean equals(loadShopManagerfiStat_args that) {
      if (that == null)
        return false;

      boolean this_present_startTime = true && this.isSetStartTime();
      boolean that_present_startTime = true && that.isSetStartTime();
      if (this_present_startTime || that_present_startTime) {
        if (!(this_present_startTime && that_present_startTime))
          return false;
        if (!this.startTime.equals(that.startTime))
          return false;
      }

      boolean this_present_endTime = true && this.isSetEndTime();
      boolean that_present_endTime = true && that.isSetEndTime();
      if (this_present_endTime || that_present_endTime) {
        if (!(this_present_endTime && that_present_endTime))
          return false;
        if (!this.endTime.equals(that.endTime))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_startTime = true && (isSetStartTime());
      list.add(present_startTime);
      if (present_startTime)
        list.add(startTime);

      boolean present_endTime = true && (isSetEndTime());
      list.add(present_endTime);
      if (present_endTime)
        list.add(endTime);

      return list.hashCode();
    }

    @Override
    public int compareTo(loadShopManagerfiStat_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetStartTime()).compareTo(other.isSetStartTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStartTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startTime, other.startTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEndTime()).compareTo(other.isSetEndTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEndTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endTime, other.endTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("loadShopManagerfiStat_args(");
      boolean first = true;

      sb.append("startTime:");
      if (this.startTime == null) {
        sb.append("null");
      } else {
        sb.append(this.startTime);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("endTime:");
      if (this.endTime == null) {
        sb.append("null");
      } else {
        sb.append(this.endTime);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class loadShopManagerfiStat_argsStandardSchemeFactory implements SchemeFactory {
      public loadShopManagerfiStat_argsStandardScheme getScheme() {
        return new loadShopManagerfiStat_argsStandardScheme();
      }
    }

    private static class loadShopManagerfiStat_argsStandardScheme extends StandardScheme<loadShopManagerfiStat_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, loadShopManagerfiStat_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // START_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.startTime = iprot.readString();
                struct.setStartTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // END_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.endTime = iprot.readString();
                struct.setEndTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, loadShopManagerfiStat_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.startTime != null) {
          oprot.writeFieldBegin(START_TIME_FIELD_DESC);
          oprot.writeString(struct.startTime);
          oprot.writeFieldEnd();
        }
        if (struct.endTime != null) {
          oprot.writeFieldBegin(END_TIME_FIELD_DESC);
          oprot.writeString(struct.endTime);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class loadShopManagerfiStat_argsTupleSchemeFactory implements SchemeFactory {
      public loadShopManagerfiStat_argsTupleScheme getScheme() {
        return new loadShopManagerfiStat_argsTupleScheme();
      }
    }

    private static class loadShopManagerfiStat_argsTupleScheme extends TupleScheme<loadShopManagerfiStat_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, loadShopManagerfiStat_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetStartTime()) {
          optionals.set(0);
        }
        if (struct.isSetEndTime()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetStartTime()) {
          oprot.writeString(struct.startTime);
        }
        if (struct.isSetEndTime()) {
          oprot.writeString(struct.endTime);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, loadShopManagerfiStat_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.startTime = iprot.readString();
          struct.setStartTimeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.endTime = iprot.readString();
          struct.setEndTimeIsSet(true);
        }
      }
    }

  }

  public static class loadShopManagerfiStat_result implements org.apache.thrift.TBase<loadShopManagerfiStat_result, loadShopManagerfiStat_result._Fields>, java.io.Serializable, Cloneable, Comparable<loadShopManagerfiStat_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("loadShopManagerfiStat_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new loadShopManagerfiStat_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new loadShopManagerfiStat_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(loadShopManagerfiStat_result.class, metaDataMap);
    }

    public loadShopManagerfiStat_result() {
    }

    public loadShopManagerfiStat_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public loadShopManagerfiStat_result(loadShopManagerfiStat_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public loadShopManagerfiStat_result deepCopy() {
      return new loadShopManagerfiStat_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public loadShopManagerfiStat_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof loadShopManagerfiStat_result)
        return this.equals((loadShopManagerfiStat_result)that);
      return false;
    }

    public boolean equals(loadShopManagerfiStat_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(loadShopManagerfiStat_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("loadShopManagerfiStat_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class loadShopManagerfiStat_resultStandardSchemeFactory implements SchemeFactory {
      public loadShopManagerfiStat_resultStandardScheme getScheme() {
        return new loadShopManagerfiStat_resultStandardScheme();
      }
    }

    private static class loadShopManagerfiStat_resultStandardScheme extends StandardScheme<loadShopManagerfiStat_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, loadShopManagerfiStat_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, loadShopManagerfiStat_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class loadShopManagerfiStat_resultTupleSchemeFactory implements SchemeFactory {
      public loadShopManagerfiStat_resultTupleScheme getScheme() {
        return new loadShopManagerfiStat_resultTupleScheme();
      }
    }

    private static class loadShopManagerfiStat_resultTupleScheme extends TupleScheme<loadShopManagerfiStat_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, loadShopManagerfiStat_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, loadShopManagerfiStat_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
