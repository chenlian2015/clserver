/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cnd.greencube.server.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-03-25")
public class RequirementService {

  /**
   * 需求大厅服务
   * @author 胡晓光
   */
  public interface Iface {

    /**
     * 提交需求
     * @param title -- 标题
     * @param content -- 内容
     * @param parentRequirementId -- 父需求id
     * @param posterId -- 发布者id
     * @param posterIp -- 发布者ip地址
     * @param requirementType -- 需求类别， 1-我要， 2-我有
     * 
     * @param title
     * @param content
     * @param posterId
     * @param __remoteAddr
     * @param requirementType
     */
    public String submitText(String title, String content, String posterId, String __remoteAddr, int requirementType) throws org.apache.thrift.TException;

    /**
     * 提交需求
     * @param title -- 标题
     * @param content -- 内容
     * @param parentRequirementId -- 父需求id
     * @param posterId -- 发布者id
     * @param posterIp -- 发布者ip地址
     * @param requirementType -- 需求类别， 1-我要， 2-我有
     * 
     * @param title
     * @param content
     * @param multipart
     * @param posterId
     * @param __remoteAddr
     * @param requirementType
     */
    public String submitPhoto(String title, String content, String multipart, String posterId, String __remoteAddr, int requirementType) throws org.apache.thrift.TException;

    /**
     * 提交需求
     * @param title -- 标题
     * @param content -- 内容
     * @param parentRequirementId -- 父需求id
     * @param posterId -- 发布者id
     * @param posterIp -- 发布者ip地址
     * @param requirementType -- 需求类别， 1-我要， 2-我有
     * 
     * @param title
     * @param content
     * @param multipart
     * @param posterId
     * @param __remoteAddr
     * @param requirementType
     */
    public String submitVideo(String title, String content, String multipart, String posterId, String __remoteAddr, int requirementType) throws org.apache.thrift.TException;

    /**
     * 回复需求
     * @param parentRequirementId -- 需求id
     * @param title -- 标题
     * @param content -- 内容
     * @param posterId -- 发布者id
     * @param posterIp -- 发布者ip地址
     * @param requirementType -- 类型
     * 
     * @param rid
     * @param title
     * @param content
     * @param posterId
     * @param __remoteAddr
     */
    public String replyRequirement(String rid, String title, String content, String posterId, String __remoteAddr) throws org.apache.thrift.TException;

    /**
     * 删除需求
     * @param requirementId -- 需求id
     * @return 返回成功与否
     * 
     * @param rid
     */
    public String deleteRequirement(String rid) throws org.apache.thrift.TException;

    /**
     * 赞一个需求
     * @param requirementId
     * @return 成功与否标志
     * 
     * @param rid
     */
    public String supportRequirement(String rid) throws org.apache.thrift.TException;

    /**
     * 分页返回需求json数组
     * @param requirementType 1-我要，2-我有
     * @param pageNum -- 页数
     * 
     * @param type
     * @param pageNum
     */
    public String loadRequirement(int type, int pageNum) throws org.apache.thrift.TException;

    /**
     * 根据id读取一条需求
     * @param requireimentId -- 需求id
     * @return 返回需求json对象
     * 
     * @param rid
     */
    public String getRequirement(String rid) throws org.apache.thrift.TException;

    /**
     * 根据主键编号获取需求，本方法会增加requirement的点击数
     * @param requirementId -- 需求id
     * @return 返回需求json对象
     * 
     * @param rid
     */
    public String readRequirement(String rid) throws org.apache.thrift.TException;

    /**
     * 返回评论列表
     * @param requirementId -- 需求id
     * @return 返回需求json对象
     * 
     * @param rid
     * @param pageNum
     */
    public String loadReplies(String rid, int pageNum) throws org.apache.thrift.TException;

    /**
     * 分页获取需求（依据类别）
     * @param categoryId
     * @param pageInfo
     * @return
     * 
     * @param categoryId
     * @param pageNum
     */
    public String loadRequirementByCategoryId(String categoryId, int pageNum) throws org.apache.thrift.TException;

    /**
     * 依据类别得到需求数量
     * @param categoryId
     * @return
     * 
     * @param categoryId
     */
    public String getRequirementCount(String categoryId) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void submitText(String title, String content, String posterId, String __remoteAddr, int requirementType, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void submitPhoto(String title, String content, String multipart, String posterId, String __remoteAddr, int requirementType, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void submitVideo(String title, String content, String multipart, String posterId, String __remoteAddr, int requirementType, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void replyRequirement(String rid, String title, String content, String posterId, String __remoteAddr, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void deleteRequirement(String rid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void supportRequirement(String rid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void loadRequirement(int type, int pageNum, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getRequirement(String rid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void readRequirement(String rid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void loadReplies(String rid, int pageNum, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void loadRequirementByCategoryId(String categoryId, int pageNum, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getRequirementCount(String categoryId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public String submitText(String title, String content, String posterId, String __remoteAddr, int requirementType) throws org.apache.thrift.TException
    {
      send_submitText(title, content, posterId, __remoteAddr, requirementType);
      return recv_submitText();
    }

    public void send_submitText(String title, String content, String posterId, String __remoteAddr, int requirementType) throws org.apache.thrift.TException
    {
      submitText_args args = new submitText_args();
      args.setTitle(title);
      args.setContent(content);
      args.setPosterId(posterId);
      args.set__remoteAddr(__remoteAddr);
      args.setRequirementType(requirementType);
      sendBase("submitText", args);
    }

    public String recv_submitText() throws org.apache.thrift.TException
    {
      submitText_result result = new submitText_result();
      receiveBase(result, "submitText");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "submitText failed: unknown result");
    }

    public String submitPhoto(String title, String content, String multipart, String posterId, String __remoteAddr, int requirementType) throws org.apache.thrift.TException
    {
      send_submitPhoto(title, content, multipart, posterId, __remoteAddr, requirementType);
      return recv_submitPhoto();
    }

    public void send_submitPhoto(String title, String content, String multipart, String posterId, String __remoteAddr, int requirementType) throws org.apache.thrift.TException
    {
      submitPhoto_args args = new submitPhoto_args();
      args.setTitle(title);
      args.setContent(content);
      args.setMultipart(multipart);
      args.setPosterId(posterId);
      args.set__remoteAddr(__remoteAddr);
      args.setRequirementType(requirementType);
      sendBase("submitPhoto", args);
    }

    public String recv_submitPhoto() throws org.apache.thrift.TException
    {
      submitPhoto_result result = new submitPhoto_result();
      receiveBase(result, "submitPhoto");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "submitPhoto failed: unknown result");
    }

    public String submitVideo(String title, String content, String multipart, String posterId, String __remoteAddr, int requirementType) throws org.apache.thrift.TException
    {
      send_submitVideo(title, content, multipart, posterId, __remoteAddr, requirementType);
      return recv_submitVideo();
    }

    public void send_submitVideo(String title, String content, String multipart, String posterId, String __remoteAddr, int requirementType) throws org.apache.thrift.TException
    {
      submitVideo_args args = new submitVideo_args();
      args.setTitle(title);
      args.setContent(content);
      args.setMultipart(multipart);
      args.setPosterId(posterId);
      args.set__remoteAddr(__remoteAddr);
      args.setRequirementType(requirementType);
      sendBase("submitVideo", args);
    }

    public String recv_submitVideo() throws org.apache.thrift.TException
    {
      submitVideo_result result = new submitVideo_result();
      receiveBase(result, "submitVideo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "submitVideo failed: unknown result");
    }

    public String replyRequirement(String rid, String title, String content, String posterId, String __remoteAddr) throws org.apache.thrift.TException
    {
      send_replyRequirement(rid, title, content, posterId, __remoteAddr);
      return recv_replyRequirement();
    }

    public void send_replyRequirement(String rid, String title, String content, String posterId, String __remoteAddr) throws org.apache.thrift.TException
    {
      replyRequirement_args args = new replyRequirement_args();
      args.setRid(rid);
      args.setTitle(title);
      args.setContent(content);
      args.setPosterId(posterId);
      args.set__remoteAddr(__remoteAddr);
      sendBase("replyRequirement", args);
    }

    public String recv_replyRequirement() throws org.apache.thrift.TException
    {
      replyRequirement_result result = new replyRequirement_result();
      receiveBase(result, "replyRequirement");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "replyRequirement failed: unknown result");
    }

    public String deleteRequirement(String rid) throws org.apache.thrift.TException
    {
      send_deleteRequirement(rid);
      return recv_deleteRequirement();
    }

    public void send_deleteRequirement(String rid) throws org.apache.thrift.TException
    {
      deleteRequirement_args args = new deleteRequirement_args();
      args.setRid(rid);
      sendBase("deleteRequirement", args);
    }

    public String recv_deleteRequirement() throws org.apache.thrift.TException
    {
      deleteRequirement_result result = new deleteRequirement_result();
      receiveBase(result, "deleteRequirement");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deleteRequirement failed: unknown result");
    }

    public String supportRequirement(String rid) throws org.apache.thrift.TException
    {
      send_supportRequirement(rid);
      return recv_supportRequirement();
    }

    public void send_supportRequirement(String rid) throws org.apache.thrift.TException
    {
      supportRequirement_args args = new supportRequirement_args();
      args.setRid(rid);
      sendBase("supportRequirement", args);
    }

    public String recv_supportRequirement() throws org.apache.thrift.TException
    {
      supportRequirement_result result = new supportRequirement_result();
      receiveBase(result, "supportRequirement");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "supportRequirement failed: unknown result");
    }

    public String loadRequirement(int type, int pageNum) throws org.apache.thrift.TException
    {
      send_loadRequirement(type, pageNum);
      return recv_loadRequirement();
    }

    public void send_loadRequirement(int type, int pageNum) throws org.apache.thrift.TException
    {
      loadRequirement_args args = new loadRequirement_args();
      args.setType(type);
      args.setPageNum(pageNum);
      sendBase("loadRequirement", args);
    }

    public String recv_loadRequirement() throws org.apache.thrift.TException
    {
      loadRequirement_result result = new loadRequirement_result();
      receiveBase(result, "loadRequirement");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "loadRequirement failed: unknown result");
    }

    public String getRequirement(String rid) throws org.apache.thrift.TException
    {
      send_getRequirement(rid);
      return recv_getRequirement();
    }

    public void send_getRequirement(String rid) throws org.apache.thrift.TException
    {
      getRequirement_args args = new getRequirement_args();
      args.setRid(rid);
      sendBase("getRequirement", args);
    }

    public String recv_getRequirement() throws org.apache.thrift.TException
    {
      getRequirement_result result = new getRequirement_result();
      receiveBase(result, "getRequirement");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getRequirement failed: unknown result");
    }

    public String readRequirement(String rid) throws org.apache.thrift.TException
    {
      send_readRequirement(rid);
      return recv_readRequirement();
    }

    public void send_readRequirement(String rid) throws org.apache.thrift.TException
    {
      readRequirement_args args = new readRequirement_args();
      args.setRid(rid);
      sendBase("readRequirement", args);
    }

    public String recv_readRequirement() throws org.apache.thrift.TException
    {
      readRequirement_result result = new readRequirement_result();
      receiveBase(result, "readRequirement");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "readRequirement failed: unknown result");
    }

    public String loadReplies(String rid, int pageNum) throws org.apache.thrift.TException
    {
      send_loadReplies(rid, pageNum);
      return recv_loadReplies();
    }

    public void send_loadReplies(String rid, int pageNum) throws org.apache.thrift.TException
    {
      loadReplies_args args = new loadReplies_args();
      args.setRid(rid);
      args.setPageNum(pageNum);
      sendBase("loadReplies", args);
    }

    public String recv_loadReplies() throws org.apache.thrift.TException
    {
      loadReplies_result result = new loadReplies_result();
      receiveBase(result, "loadReplies");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "loadReplies failed: unknown result");
    }

    public String loadRequirementByCategoryId(String categoryId, int pageNum) throws org.apache.thrift.TException
    {
      send_loadRequirementByCategoryId(categoryId, pageNum);
      return recv_loadRequirementByCategoryId();
    }

    public void send_loadRequirementByCategoryId(String categoryId, int pageNum) throws org.apache.thrift.TException
    {
      loadRequirementByCategoryId_args args = new loadRequirementByCategoryId_args();
      args.setCategoryId(categoryId);
      args.setPageNum(pageNum);
      sendBase("loadRequirementByCategoryId", args);
    }

    public String recv_loadRequirementByCategoryId() throws org.apache.thrift.TException
    {
      loadRequirementByCategoryId_result result = new loadRequirementByCategoryId_result();
      receiveBase(result, "loadRequirementByCategoryId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "loadRequirementByCategoryId failed: unknown result");
    }

    public String getRequirementCount(String categoryId) throws org.apache.thrift.TException
    {
      send_getRequirementCount(categoryId);
      return recv_getRequirementCount();
    }

    public void send_getRequirementCount(String categoryId) throws org.apache.thrift.TException
    {
      getRequirementCount_args args = new getRequirementCount_args();
      args.setCategoryId(categoryId);
      sendBase("getRequirementCount", args);
    }

    public String recv_getRequirementCount() throws org.apache.thrift.TException
    {
      getRequirementCount_result result = new getRequirementCount_result();
      receiveBase(result, "getRequirementCount");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getRequirementCount failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void submitText(String title, String content, String posterId, String __remoteAddr, int requirementType, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      submitText_call method_call = new submitText_call(title, content, posterId, __remoteAddr, requirementType, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class submitText_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String title;
      private String content;
      private String posterId;
      private String __remoteAddr;
      private int requirementType;
      public submitText_call(String title, String content, String posterId, String __remoteAddr, int requirementType, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.title = title;
        this.content = content;
        this.posterId = posterId;
        this.__remoteAddr = __remoteAddr;
        this.requirementType = requirementType;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("submitText", org.apache.thrift.protocol.TMessageType.CALL, 0));
        submitText_args args = new submitText_args();
        args.setTitle(title);
        args.setContent(content);
        args.setPosterId(posterId);
        args.set__remoteAddr(__remoteAddr);
        args.setRequirementType(requirementType);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_submitText();
      }
    }

    public void submitPhoto(String title, String content, String multipart, String posterId, String __remoteAddr, int requirementType, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      submitPhoto_call method_call = new submitPhoto_call(title, content, multipart, posterId, __remoteAddr, requirementType, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class submitPhoto_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String title;
      private String content;
      private String multipart;
      private String posterId;
      private String __remoteAddr;
      private int requirementType;
      public submitPhoto_call(String title, String content, String multipart, String posterId, String __remoteAddr, int requirementType, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.title = title;
        this.content = content;
        this.multipart = multipart;
        this.posterId = posterId;
        this.__remoteAddr = __remoteAddr;
        this.requirementType = requirementType;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("submitPhoto", org.apache.thrift.protocol.TMessageType.CALL, 0));
        submitPhoto_args args = new submitPhoto_args();
        args.setTitle(title);
        args.setContent(content);
        args.setMultipart(multipart);
        args.setPosterId(posterId);
        args.set__remoteAddr(__remoteAddr);
        args.setRequirementType(requirementType);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_submitPhoto();
      }
    }

    public void submitVideo(String title, String content, String multipart, String posterId, String __remoteAddr, int requirementType, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      submitVideo_call method_call = new submitVideo_call(title, content, multipart, posterId, __remoteAddr, requirementType, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class submitVideo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String title;
      private String content;
      private String multipart;
      private String posterId;
      private String __remoteAddr;
      private int requirementType;
      public submitVideo_call(String title, String content, String multipart, String posterId, String __remoteAddr, int requirementType, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.title = title;
        this.content = content;
        this.multipart = multipart;
        this.posterId = posterId;
        this.__remoteAddr = __remoteAddr;
        this.requirementType = requirementType;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("submitVideo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        submitVideo_args args = new submitVideo_args();
        args.setTitle(title);
        args.setContent(content);
        args.setMultipart(multipart);
        args.setPosterId(posterId);
        args.set__remoteAddr(__remoteAddr);
        args.setRequirementType(requirementType);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_submitVideo();
      }
    }

    public void replyRequirement(String rid, String title, String content, String posterId, String __remoteAddr, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      replyRequirement_call method_call = new replyRequirement_call(rid, title, content, posterId, __remoteAddr, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class replyRequirement_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String rid;
      private String title;
      private String content;
      private String posterId;
      private String __remoteAddr;
      public replyRequirement_call(String rid, String title, String content, String posterId, String __remoteAddr, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.rid = rid;
        this.title = title;
        this.content = content;
        this.posterId = posterId;
        this.__remoteAddr = __remoteAddr;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("replyRequirement", org.apache.thrift.protocol.TMessageType.CALL, 0));
        replyRequirement_args args = new replyRequirement_args();
        args.setRid(rid);
        args.setTitle(title);
        args.setContent(content);
        args.setPosterId(posterId);
        args.set__remoteAddr(__remoteAddr);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_replyRequirement();
      }
    }

    public void deleteRequirement(String rid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteRequirement_call method_call = new deleteRequirement_call(rid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteRequirement_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String rid;
      public deleteRequirement_call(String rid, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.rid = rid;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteRequirement", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteRequirement_args args = new deleteRequirement_args();
        args.setRid(rid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_deleteRequirement();
      }
    }

    public void supportRequirement(String rid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      supportRequirement_call method_call = new supportRequirement_call(rid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class supportRequirement_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String rid;
      public supportRequirement_call(String rid, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.rid = rid;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("supportRequirement", org.apache.thrift.protocol.TMessageType.CALL, 0));
        supportRequirement_args args = new supportRequirement_args();
        args.setRid(rid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_supportRequirement();
      }
    }

    public void loadRequirement(int type, int pageNum, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      loadRequirement_call method_call = new loadRequirement_call(type, pageNum, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class loadRequirement_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int type;
      private int pageNum;
      public loadRequirement_call(int type, int pageNum, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.type = type;
        this.pageNum = pageNum;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("loadRequirement", org.apache.thrift.protocol.TMessageType.CALL, 0));
        loadRequirement_args args = new loadRequirement_args();
        args.setType(type);
        args.setPageNum(pageNum);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_loadRequirement();
      }
    }

    public void getRequirement(String rid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getRequirement_call method_call = new getRequirement_call(rid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getRequirement_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String rid;
      public getRequirement_call(String rid, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.rid = rid;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getRequirement", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getRequirement_args args = new getRequirement_args();
        args.setRid(rid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getRequirement();
      }
    }

    public void readRequirement(String rid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      readRequirement_call method_call = new readRequirement_call(rid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class readRequirement_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String rid;
      public readRequirement_call(String rid, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.rid = rid;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("readRequirement", org.apache.thrift.protocol.TMessageType.CALL, 0));
        readRequirement_args args = new readRequirement_args();
        args.setRid(rid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_readRequirement();
      }
    }

    public void loadReplies(String rid, int pageNum, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      loadReplies_call method_call = new loadReplies_call(rid, pageNum, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class loadReplies_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String rid;
      private int pageNum;
      public loadReplies_call(String rid, int pageNum, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.rid = rid;
        this.pageNum = pageNum;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("loadReplies", org.apache.thrift.protocol.TMessageType.CALL, 0));
        loadReplies_args args = new loadReplies_args();
        args.setRid(rid);
        args.setPageNum(pageNum);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_loadReplies();
      }
    }

    public void loadRequirementByCategoryId(String categoryId, int pageNum, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      loadRequirementByCategoryId_call method_call = new loadRequirementByCategoryId_call(categoryId, pageNum, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class loadRequirementByCategoryId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String categoryId;
      private int pageNum;
      public loadRequirementByCategoryId_call(String categoryId, int pageNum, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.categoryId = categoryId;
        this.pageNum = pageNum;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("loadRequirementByCategoryId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        loadRequirementByCategoryId_args args = new loadRequirementByCategoryId_args();
        args.setCategoryId(categoryId);
        args.setPageNum(pageNum);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_loadRequirementByCategoryId();
      }
    }

    public void getRequirementCount(String categoryId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getRequirementCount_call method_call = new getRequirementCount_call(categoryId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getRequirementCount_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String categoryId;
      public getRequirementCount_call(String categoryId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.categoryId = categoryId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getRequirementCount", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getRequirementCount_args args = new getRequirementCount_args();
        args.setCategoryId(categoryId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getRequirementCount();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("submitText", new submitText());
      processMap.put("submitPhoto", new submitPhoto());
      processMap.put("submitVideo", new submitVideo());
      processMap.put("replyRequirement", new replyRequirement());
      processMap.put("deleteRequirement", new deleteRequirement());
      processMap.put("supportRequirement", new supportRequirement());
      processMap.put("loadRequirement", new loadRequirement());
      processMap.put("getRequirement", new getRequirement());
      processMap.put("readRequirement", new readRequirement());
      processMap.put("loadReplies", new loadReplies());
      processMap.put("loadRequirementByCategoryId", new loadRequirementByCategoryId());
      processMap.put("getRequirementCount", new getRequirementCount());
      return processMap;
    }

    public static class submitText<I extends Iface> extends org.apache.thrift.ProcessFunction<I, submitText_args> {
      public submitText() {
        super("submitText");
      }

      public submitText_args getEmptyArgsInstance() {
        return new submitText_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public submitText_result getResult(I iface, submitText_args args) throws org.apache.thrift.TException {
        submitText_result result = new submitText_result();
        result.success = iface.submitText(args.title, args.content, args.posterId, args.__remoteAddr, args.requirementType);
        return result;
      }
    }

    public static class submitPhoto<I extends Iface> extends org.apache.thrift.ProcessFunction<I, submitPhoto_args> {
      public submitPhoto() {
        super("submitPhoto");
      }

      public submitPhoto_args getEmptyArgsInstance() {
        return new submitPhoto_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public submitPhoto_result getResult(I iface, submitPhoto_args args) throws org.apache.thrift.TException {
        submitPhoto_result result = new submitPhoto_result();
        result.success = iface.submitPhoto(args.title, args.content, args.multipart, args.posterId, args.__remoteAddr, args.requirementType);
        return result;
      }
    }

    public static class submitVideo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, submitVideo_args> {
      public submitVideo() {
        super("submitVideo");
      }

      public submitVideo_args getEmptyArgsInstance() {
        return new submitVideo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public submitVideo_result getResult(I iface, submitVideo_args args) throws org.apache.thrift.TException {
        submitVideo_result result = new submitVideo_result();
        result.success = iface.submitVideo(args.title, args.content, args.multipart, args.posterId, args.__remoteAddr, args.requirementType);
        return result;
      }
    }

    public static class replyRequirement<I extends Iface> extends org.apache.thrift.ProcessFunction<I, replyRequirement_args> {
      public replyRequirement() {
        super("replyRequirement");
      }

      public replyRequirement_args getEmptyArgsInstance() {
        return new replyRequirement_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public replyRequirement_result getResult(I iface, replyRequirement_args args) throws org.apache.thrift.TException {
        replyRequirement_result result = new replyRequirement_result();
        result.success = iface.replyRequirement(args.rid, args.title, args.content, args.posterId, args.__remoteAddr);
        return result;
      }
    }

    public static class deleteRequirement<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteRequirement_args> {
      public deleteRequirement() {
        super("deleteRequirement");
      }

      public deleteRequirement_args getEmptyArgsInstance() {
        return new deleteRequirement_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteRequirement_result getResult(I iface, deleteRequirement_args args) throws org.apache.thrift.TException {
        deleteRequirement_result result = new deleteRequirement_result();
        result.success = iface.deleteRequirement(args.rid);
        return result;
      }
    }

    public static class supportRequirement<I extends Iface> extends org.apache.thrift.ProcessFunction<I, supportRequirement_args> {
      public supportRequirement() {
        super("supportRequirement");
      }

      public supportRequirement_args getEmptyArgsInstance() {
        return new supportRequirement_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public supportRequirement_result getResult(I iface, supportRequirement_args args) throws org.apache.thrift.TException {
        supportRequirement_result result = new supportRequirement_result();
        result.success = iface.supportRequirement(args.rid);
        return result;
      }
    }

    public static class loadRequirement<I extends Iface> extends org.apache.thrift.ProcessFunction<I, loadRequirement_args> {
      public loadRequirement() {
        super("loadRequirement");
      }

      public loadRequirement_args getEmptyArgsInstance() {
        return new loadRequirement_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public loadRequirement_result getResult(I iface, loadRequirement_args args) throws org.apache.thrift.TException {
        loadRequirement_result result = new loadRequirement_result();
        result.success = iface.loadRequirement(args.type, args.pageNum);
        return result;
      }
    }

    public static class getRequirement<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getRequirement_args> {
      public getRequirement() {
        super("getRequirement");
      }

      public getRequirement_args getEmptyArgsInstance() {
        return new getRequirement_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getRequirement_result getResult(I iface, getRequirement_args args) throws org.apache.thrift.TException {
        getRequirement_result result = new getRequirement_result();
        result.success = iface.getRequirement(args.rid);
        return result;
      }
    }

    public static class readRequirement<I extends Iface> extends org.apache.thrift.ProcessFunction<I, readRequirement_args> {
      public readRequirement() {
        super("readRequirement");
      }

      public readRequirement_args getEmptyArgsInstance() {
        return new readRequirement_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public readRequirement_result getResult(I iface, readRequirement_args args) throws org.apache.thrift.TException {
        readRequirement_result result = new readRequirement_result();
        result.success = iface.readRequirement(args.rid);
        return result;
      }
    }

    public static class loadReplies<I extends Iface> extends org.apache.thrift.ProcessFunction<I, loadReplies_args> {
      public loadReplies() {
        super("loadReplies");
      }

      public loadReplies_args getEmptyArgsInstance() {
        return new loadReplies_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public loadReplies_result getResult(I iface, loadReplies_args args) throws org.apache.thrift.TException {
        loadReplies_result result = new loadReplies_result();
        result.success = iface.loadReplies(args.rid, args.pageNum);
        return result;
      }
    }

    public static class loadRequirementByCategoryId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, loadRequirementByCategoryId_args> {
      public loadRequirementByCategoryId() {
        super("loadRequirementByCategoryId");
      }

      public loadRequirementByCategoryId_args getEmptyArgsInstance() {
        return new loadRequirementByCategoryId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public loadRequirementByCategoryId_result getResult(I iface, loadRequirementByCategoryId_args args) throws org.apache.thrift.TException {
        loadRequirementByCategoryId_result result = new loadRequirementByCategoryId_result();
        result.success = iface.loadRequirementByCategoryId(args.categoryId, args.pageNum);
        return result;
      }
    }

    public static class getRequirementCount<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getRequirementCount_args> {
      public getRequirementCount() {
        super("getRequirementCount");
      }

      public getRequirementCount_args getEmptyArgsInstance() {
        return new getRequirementCount_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getRequirementCount_result getResult(I iface, getRequirementCount_args args) throws org.apache.thrift.TException {
        getRequirementCount_result result = new getRequirementCount_result();
        result.success = iface.getRequirementCount(args.categoryId);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("submitText", new submitText());
      processMap.put("submitPhoto", new submitPhoto());
      processMap.put("submitVideo", new submitVideo());
      processMap.put("replyRequirement", new replyRequirement());
      processMap.put("deleteRequirement", new deleteRequirement());
      processMap.put("supportRequirement", new supportRequirement());
      processMap.put("loadRequirement", new loadRequirement());
      processMap.put("getRequirement", new getRequirement());
      processMap.put("readRequirement", new readRequirement());
      processMap.put("loadReplies", new loadReplies());
      processMap.put("loadRequirementByCategoryId", new loadRequirementByCategoryId());
      processMap.put("getRequirementCount", new getRequirementCount());
      return processMap;
    }

    public static class submitText<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, submitText_args, String> {
      public submitText() {
        super("submitText");
      }

      public submitText_args getEmptyArgsInstance() {
        return new submitText_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            submitText_result result = new submitText_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            submitText_result result = new submitText_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, submitText_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.submitText(args.title, args.content, args.posterId, args.__remoteAddr, args.requirementType,resultHandler);
      }
    }

    public static class submitPhoto<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, submitPhoto_args, String> {
      public submitPhoto() {
        super("submitPhoto");
      }

      public submitPhoto_args getEmptyArgsInstance() {
        return new submitPhoto_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            submitPhoto_result result = new submitPhoto_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            submitPhoto_result result = new submitPhoto_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, submitPhoto_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.submitPhoto(args.title, args.content, args.multipart, args.posterId, args.__remoteAddr, args.requirementType,resultHandler);
      }
    }

    public static class submitVideo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, submitVideo_args, String> {
      public submitVideo() {
        super("submitVideo");
      }

      public submitVideo_args getEmptyArgsInstance() {
        return new submitVideo_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            submitVideo_result result = new submitVideo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            submitVideo_result result = new submitVideo_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, submitVideo_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.submitVideo(args.title, args.content, args.multipart, args.posterId, args.__remoteAddr, args.requirementType,resultHandler);
      }
    }

    public static class replyRequirement<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, replyRequirement_args, String> {
      public replyRequirement() {
        super("replyRequirement");
      }

      public replyRequirement_args getEmptyArgsInstance() {
        return new replyRequirement_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            replyRequirement_result result = new replyRequirement_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            replyRequirement_result result = new replyRequirement_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, replyRequirement_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.replyRequirement(args.rid, args.title, args.content, args.posterId, args.__remoteAddr,resultHandler);
      }
    }

    public static class deleteRequirement<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteRequirement_args, String> {
      public deleteRequirement() {
        super("deleteRequirement");
      }

      public deleteRequirement_args getEmptyArgsInstance() {
        return new deleteRequirement_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            deleteRequirement_result result = new deleteRequirement_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            deleteRequirement_result result = new deleteRequirement_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteRequirement_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.deleteRequirement(args.rid,resultHandler);
      }
    }

    public static class supportRequirement<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, supportRequirement_args, String> {
      public supportRequirement() {
        super("supportRequirement");
      }

      public supportRequirement_args getEmptyArgsInstance() {
        return new supportRequirement_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            supportRequirement_result result = new supportRequirement_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            supportRequirement_result result = new supportRequirement_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, supportRequirement_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.supportRequirement(args.rid,resultHandler);
      }
    }

    public static class loadRequirement<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, loadRequirement_args, String> {
      public loadRequirement() {
        super("loadRequirement");
      }

      public loadRequirement_args getEmptyArgsInstance() {
        return new loadRequirement_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            loadRequirement_result result = new loadRequirement_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            loadRequirement_result result = new loadRequirement_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, loadRequirement_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.loadRequirement(args.type, args.pageNum,resultHandler);
      }
    }

    public static class getRequirement<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getRequirement_args, String> {
      public getRequirement() {
        super("getRequirement");
      }

      public getRequirement_args getEmptyArgsInstance() {
        return new getRequirement_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            getRequirement_result result = new getRequirement_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getRequirement_result result = new getRequirement_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getRequirement_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.getRequirement(args.rid,resultHandler);
      }
    }

    public static class readRequirement<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, readRequirement_args, String> {
      public readRequirement() {
        super("readRequirement");
      }

      public readRequirement_args getEmptyArgsInstance() {
        return new readRequirement_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            readRequirement_result result = new readRequirement_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            readRequirement_result result = new readRequirement_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, readRequirement_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.readRequirement(args.rid,resultHandler);
      }
    }

    public static class loadReplies<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, loadReplies_args, String> {
      public loadReplies() {
        super("loadReplies");
      }

      public loadReplies_args getEmptyArgsInstance() {
        return new loadReplies_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            loadReplies_result result = new loadReplies_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            loadReplies_result result = new loadReplies_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, loadReplies_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.loadReplies(args.rid, args.pageNum,resultHandler);
      }
    }

    public static class loadRequirementByCategoryId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, loadRequirementByCategoryId_args, String> {
      public loadRequirementByCategoryId() {
        super("loadRequirementByCategoryId");
      }

      public loadRequirementByCategoryId_args getEmptyArgsInstance() {
        return new loadRequirementByCategoryId_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            loadRequirementByCategoryId_result result = new loadRequirementByCategoryId_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            loadRequirementByCategoryId_result result = new loadRequirementByCategoryId_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, loadRequirementByCategoryId_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.loadRequirementByCategoryId(args.categoryId, args.pageNum,resultHandler);
      }
    }

    public static class getRequirementCount<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getRequirementCount_args, String> {
      public getRequirementCount() {
        super("getRequirementCount");
      }

      public getRequirementCount_args getEmptyArgsInstance() {
        return new getRequirementCount_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            getRequirementCount_result result = new getRequirementCount_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getRequirementCount_result result = new getRequirementCount_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getRequirementCount_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.getRequirementCount(args.categoryId,resultHandler);
      }
    }

  }

  public static class submitText_args implements org.apache.thrift.TBase<submitText_args, submitText_args._Fields>, java.io.Serializable, Cloneable, Comparable<submitText_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("submitText_args");

    private static final org.apache.thrift.protocol.TField TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("title", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("content", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField POSTER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("posterId", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField __REMOTE_ADDR_FIELD_DESC = new org.apache.thrift.protocol.TField("__remoteAddr", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField REQUIREMENT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("requirementType", org.apache.thrift.protocol.TType.I32, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new submitText_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new submitText_argsTupleSchemeFactory());
    }

    public String title; // required
    public String content; // required
    public String posterId; // required
    public String __remoteAddr; // required
    public int requirementType; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TITLE((short)1, "title"),
      CONTENT((short)2, "content"),
      POSTER_ID((short)3, "posterId"),
      __REMOTE_ADDR((short)4, "__remoteAddr"),
      REQUIREMENT_TYPE((short)5, "requirementType");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TITLE
            return TITLE;
          case 2: // CONTENT
            return CONTENT;
          case 3: // POSTER_ID
            return POSTER_ID;
          case 4: // __REMOTE_ADDR
            return __REMOTE_ADDR;
          case 5: // REQUIREMENT_TYPE
            return REQUIREMENT_TYPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __REQUIREMENTTYPE_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TITLE, new org.apache.thrift.meta_data.FieldMetaData("title", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CONTENT, new org.apache.thrift.meta_data.FieldMetaData("content", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.POSTER_ID, new org.apache.thrift.meta_data.FieldMetaData("posterId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.__REMOTE_ADDR, new org.apache.thrift.meta_data.FieldMetaData("__remoteAddr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.REQUIREMENT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("requirementType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(submitText_args.class, metaDataMap);
    }

    public submitText_args() {
    }

    public submitText_args(
      String title,
      String content,
      String posterId,
      String __remoteAddr,
      int requirementType)
    {
      this();
      this.title = title;
      this.content = content;
      this.posterId = posterId;
      this.__remoteAddr = __remoteAddr;
      this.requirementType = requirementType;
      setRequirementTypeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public submitText_args(submitText_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetTitle()) {
        this.title = other.title;
      }
      if (other.isSetContent()) {
        this.content = other.content;
      }
      if (other.isSetPosterId()) {
        this.posterId = other.posterId;
      }
      if (other.isSet__remoteAddr()) {
        this.__remoteAddr = other.__remoteAddr;
      }
      this.requirementType = other.requirementType;
    }

    public submitText_args deepCopy() {
      return new submitText_args(this);
    }

    @Override
    public void clear() {
      this.title = null;
      this.content = null;
      this.posterId = null;
      this.__remoteAddr = null;
      setRequirementTypeIsSet(false);
      this.requirementType = 0;
    }

    public String getTitle() {
      return this.title;
    }

    public submitText_args setTitle(String title) {
      this.title = title;
      return this;
    }

    public void unsetTitle() {
      this.title = null;
    }

    /** Returns true if field title is set (has been assigned a value) and false otherwise */
    public boolean isSetTitle() {
      return this.title != null;
    }

    public void setTitleIsSet(boolean value) {
      if (!value) {
        this.title = null;
      }
    }

    public String getContent() {
      return this.content;
    }

    public submitText_args setContent(String content) {
      this.content = content;
      return this;
    }

    public void unsetContent() {
      this.content = null;
    }

    /** Returns true if field content is set (has been assigned a value) and false otherwise */
    public boolean isSetContent() {
      return this.content != null;
    }

    public void setContentIsSet(boolean value) {
      if (!value) {
        this.content = null;
      }
    }

    public String getPosterId() {
      return this.posterId;
    }

    public submitText_args setPosterId(String posterId) {
      this.posterId = posterId;
      return this;
    }

    public void unsetPosterId() {
      this.posterId = null;
    }

    /** Returns true if field posterId is set (has been assigned a value) and false otherwise */
    public boolean isSetPosterId() {
      return this.posterId != null;
    }

    public void setPosterIdIsSet(boolean value) {
      if (!value) {
        this.posterId = null;
      }
    }

    public String get__remoteAddr() {
      return this.__remoteAddr;
    }

    public submitText_args set__remoteAddr(String __remoteAddr) {
      this.__remoteAddr = __remoteAddr;
      return this;
    }

    public void unset__remoteAddr() {
      this.__remoteAddr = null;
    }

    /** Returns true if field __remoteAddr is set (has been assigned a value) and false otherwise */
    public boolean isSet__remoteAddr() {
      return this.__remoteAddr != null;
    }

    public void set__remoteAddrIsSet(boolean value) {
      if (!value) {
        this.__remoteAddr = null;
      }
    }

    public int getRequirementType() {
      return this.requirementType;
    }

    public submitText_args setRequirementType(int requirementType) {
      this.requirementType = requirementType;
      setRequirementTypeIsSet(true);
      return this;
    }

    public void unsetRequirementType() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REQUIREMENTTYPE_ISSET_ID);
    }

    /** Returns true if field requirementType is set (has been assigned a value) and false otherwise */
    public boolean isSetRequirementType() {
      return EncodingUtils.testBit(__isset_bitfield, __REQUIREMENTTYPE_ISSET_ID);
    }

    public void setRequirementTypeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REQUIREMENTTYPE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TITLE:
        if (value == null) {
          unsetTitle();
        } else {
          setTitle((String)value);
        }
        break;

      case CONTENT:
        if (value == null) {
          unsetContent();
        } else {
          setContent((String)value);
        }
        break;

      case POSTER_ID:
        if (value == null) {
          unsetPosterId();
        } else {
          setPosterId((String)value);
        }
        break;

      case __REMOTE_ADDR:
        if (value == null) {
          unset__remoteAddr();
        } else {
          set__remoteAddr((String)value);
        }
        break;

      case REQUIREMENT_TYPE:
        if (value == null) {
          unsetRequirementType();
        } else {
          setRequirementType((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TITLE:
        return getTitle();

      case CONTENT:
        return getContent();

      case POSTER_ID:
        return getPosterId();

      case __REMOTE_ADDR:
        return get__remoteAddr();

      case REQUIREMENT_TYPE:
        return getRequirementType();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TITLE:
        return isSetTitle();
      case CONTENT:
        return isSetContent();
      case POSTER_ID:
        return isSetPosterId();
      case __REMOTE_ADDR:
        return isSet__remoteAddr();
      case REQUIREMENT_TYPE:
        return isSetRequirementType();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof submitText_args)
        return this.equals((submitText_args)that);
      return false;
    }

    public boolean equals(submitText_args that) {
      if (that == null)
        return false;

      boolean this_present_title = true && this.isSetTitle();
      boolean that_present_title = true && that.isSetTitle();
      if (this_present_title || that_present_title) {
        if (!(this_present_title && that_present_title))
          return false;
        if (!this.title.equals(that.title))
          return false;
      }

      boolean this_present_content = true && this.isSetContent();
      boolean that_present_content = true && that.isSetContent();
      if (this_present_content || that_present_content) {
        if (!(this_present_content && that_present_content))
          return false;
        if (!this.content.equals(that.content))
          return false;
      }

      boolean this_present_posterId = true && this.isSetPosterId();
      boolean that_present_posterId = true && that.isSetPosterId();
      if (this_present_posterId || that_present_posterId) {
        if (!(this_present_posterId && that_present_posterId))
          return false;
        if (!this.posterId.equals(that.posterId))
          return false;
      }

      boolean this_present___remoteAddr = true && this.isSet__remoteAddr();
      boolean that_present___remoteAddr = true && that.isSet__remoteAddr();
      if (this_present___remoteAddr || that_present___remoteAddr) {
        if (!(this_present___remoteAddr && that_present___remoteAddr))
          return false;
        if (!this.__remoteAddr.equals(that.__remoteAddr))
          return false;
      }

      boolean this_present_requirementType = true;
      boolean that_present_requirementType = true;
      if (this_present_requirementType || that_present_requirementType) {
        if (!(this_present_requirementType && that_present_requirementType))
          return false;
        if (this.requirementType != that.requirementType)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_title = true && (isSetTitle());
      list.add(present_title);
      if (present_title)
        list.add(title);

      boolean present_content = true && (isSetContent());
      list.add(present_content);
      if (present_content)
        list.add(content);

      boolean present_posterId = true && (isSetPosterId());
      list.add(present_posterId);
      if (present_posterId)
        list.add(posterId);

      boolean present___remoteAddr = true && (isSet__remoteAddr());
      list.add(present___remoteAddr);
      if (present___remoteAddr)
        list.add(__remoteAddr);

      boolean present_requirementType = true;
      list.add(present_requirementType);
      if (present_requirementType)
        list.add(requirementType);

      return list.hashCode();
    }

    @Override
    public int compareTo(submitText_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTitle()).compareTo(other.isSetTitle());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTitle()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.title, other.title);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetContent()).compareTo(other.isSetContent());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetContent()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.content, other.content);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPosterId()).compareTo(other.isSetPosterId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPosterId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.posterId, other.posterId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSet__remoteAddr()).compareTo(other.isSet__remoteAddr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet__remoteAddr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.__remoteAddr, other.__remoteAddr);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRequirementType()).compareTo(other.isSetRequirementType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequirementType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requirementType, other.requirementType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("submitText_args(");
      boolean first = true;

      sb.append("title:");
      if (this.title == null) {
        sb.append("null");
      } else {
        sb.append(this.title);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("content:");
      if (this.content == null) {
        sb.append("null");
      } else {
        sb.append(this.content);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("posterId:");
      if (this.posterId == null) {
        sb.append("null");
      } else {
        sb.append(this.posterId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("__remoteAddr:");
      if (this.__remoteAddr == null) {
        sb.append("null");
      } else {
        sb.append(this.__remoteAddr);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("requirementType:");
      sb.append(this.requirementType);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class submitText_argsStandardSchemeFactory implements SchemeFactory {
      public submitText_argsStandardScheme getScheme() {
        return new submitText_argsStandardScheme();
      }
    }

    private static class submitText_argsStandardScheme extends StandardScheme<submitText_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, submitText_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TITLE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.title = iprot.readString();
                struct.setTitleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CONTENT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.content = iprot.readString();
                struct.setContentIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // POSTER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.posterId = iprot.readString();
                struct.setPosterIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // __REMOTE_ADDR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.__remoteAddr = iprot.readString();
                struct.set__remoteAddrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // REQUIREMENT_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.requirementType = iprot.readI32();
                struct.setRequirementTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, submitText_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.title != null) {
          oprot.writeFieldBegin(TITLE_FIELD_DESC);
          oprot.writeString(struct.title);
          oprot.writeFieldEnd();
        }
        if (struct.content != null) {
          oprot.writeFieldBegin(CONTENT_FIELD_DESC);
          oprot.writeString(struct.content);
          oprot.writeFieldEnd();
        }
        if (struct.posterId != null) {
          oprot.writeFieldBegin(POSTER_ID_FIELD_DESC);
          oprot.writeString(struct.posterId);
          oprot.writeFieldEnd();
        }
        if (struct.__remoteAddr != null) {
          oprot.writeFieldBegin(__REMOTE_ADDR_FIELD_DESC);
          oprot.writeString(struct.__remoteAddr);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(REQUIREMENT_TYPE_FIELD_DESC);
        oprot.writeI32(struct.requirementType);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class submitText_argsTupleSchemeFactory implements SchemeFactory {
      public submitText_argsTupleScheme getScheme() {
        return new submitText_argsTupleScheme();
      }
    }

    private static class submitText_argsTupleScheme extends TupleScheme<submitText_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, submitText_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTitle()) {
          optionals.set(0);
        }
        if (struct.isSetContent()) {
          optionals.set(1);
        }
        if (struct.isSetPosterId()) {
          optionals.set(2);
        }
        if (struct.isSet__remoteAddr()) {
          optionals.set(3);
        }
        if (struct.isSetRequirementType()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetTitle()) {
          oprot.writeString(struct.title);
        }
        if (struct.isSetContent()) {
          oprot.writeString(struct.content);
        }
        if (struct.isSetPosterId()) {
          oprot.writeString(struct.posterId);
        }
        if (struct.isSet__remoteAddr()) {
          oprot.writeString(struct.__remoteAddr);
        }
        if (struct.isSetRequirementType()) {
          oprot.writeI32(struct.requirementType);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, submitText_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.title = iprot.readString();
          struct.setTitleIsSet(true);
        }
        if (incoming.get(1)) {
          struct.content = iprot.readString();
          struct.setContentIsSet(true);
        }
        if (incoming.get(2)) {
          struct.posterId = iprot.readString();
          struct.setPosterIdIsSet(true);
        }
        if (incoming.get(3)) {
          struct.__remoteAddr = iprot.readString();
          struct.set__remoteAddrIsSet(true);
        }
        if (incoming.get(4)) {
          struct.requirementType = iprot.readI32();
          struct.setRequirementTypeIsSet(true);
        }
      }
    }

  }

  public static class submitText_result implements org.apache.thrift.TBase<submitText_result, submitText_result._Fields>, java.io.Serializable, Cloneable, Comparable<submitText_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("submitText_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new submitText_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new submitText_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(submitText_result.class, metaDataMap);
    }

    public submitText_result() {
    }

    public submitText_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public submitText_result(submitText_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public submitText_result deepCopy() {
      return new submitText_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public submitText_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof submitText_result)
        return this.equals((submitText_result)that);
      return false;
    }

    public boolean equals(submitText_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(submitText_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("submitText_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class submitText_resultStandardSchemeFactory implements SchemeFactory {
      public submitText_resultStandardScheme getScheme() {
        return new submitText_resultStandardScheme();
      }
    }

    private static class submitText_resultStandardScheme extends StandardScheme<submitText_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, submitText_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, submitText_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class submitText_resultTupleSchemeFactory implements SchemeFactory {
      public submitText_resultTupleScheme getScheme() {
        return new submitText_resultTupleScheme();
      }
    }

    private static class submitText_resultTupleScheme extends TupleScheme<submitText_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, submitText_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, submitText_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class submitPhoto_args implements org.apache.thrift.TBase<submitPhoto_args, submitPhoto_args._Fields>, java.io.Serializable, Cloneable, Comparable<submitPhoto_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("submitPhoto_args");

    private static final org.apache.thrift.protocol.TField TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("title", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("content", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField MULTIPART_FIELD_DESC = new org.apache.thrift.protocol.TField("multipart", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField POSTER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("posterId", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField __REMOTE_ADDR_FIELD_DESC = new org.apache.thrift.protocol.TField("__remoteAddr", org.apache.thrift.protocol.TType.STRING, (short)5);
    private static final org.apache.thrift.protocol.TField REQUIREMENT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("requirementType", org.apache.thrift.protocol.TType.I32, (short)6);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new submitPhoto_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new submitPhoto_argsTupleSchemeFactory());
    }

    public String title; // required
    public String content; // required
    public String multipart; // required
    public String posterId; // required
    public String __remoteAddr; // required
    public int requirementType; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TITLE((short)1, "title"),
      CONTENT((short)2, "content"),
      MULTIPART((short)3, "multipart"),
      POSTER_ID((short)4, "posterId"),
      __REMOTE_ADDR((short)5, "__remoteAddr"),
      REQUIREMENT_TYPE((short)6, "requirementType");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TITLE
            return TITLE;
          case 2: // CONTENT
            return CONTENT;
          case 3: // MULTIPART
            return MULTIPART;
          case 4: // POSTER_ID
            return POSTER_ID;
          case 5: // __REMOTE_ADDR
            return __REMOTE_ADDR;
          case 6: // REQUIREMENT_TYPE
            return REQUIREMENT_TYPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __REQUIREMENTTYPE_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TITLE, new org.apache.thrift.meta_data.FieldMetaData("title", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CONTENT, new org.apache.thrift.meta_data.FieldMetaData("content", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MULTIPART, new org.apache.thrift.meta_data.FieldMetaData("multipart", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.POSTER_ID, new org.apache.thrift.meta_data.FieldMetaData("posterId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.__REMOTE_ADDR, new org.apache.thrift.meta_data.FieldMetaData("__remoteAddr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.REQUIREMENT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("requirementType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(submitPhoto_args.class, metaDataMap);
    }

    public submitPhoto_args() {
    }

    public submitPhoto_args(
      String title,
      String content,
      String multipart,
      String posterId,
      String __remoteAddr,
      int requirementType)
    {
      this();
      this.title = title;
      this.content = content;
      this.multipart = multipart;
      this.posterId = posterId;
      this.__remoteAddr = __remoteAddr;
      this.requirementType = requirementType;
      setRequirementTypeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public submitPhoto_args(submitPhoto_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetTitle()) {
        this.title = other.title;
      }
      if (other.isSetContent()) {
        this.content = other.content;
      }
      if (other.isSetMultipart()) {
        this.multipart = other.multipart;
      }
      if (other.isSetPosterId()) {
        this.posterId = other.posterId;
      }
      if (other.isSet__remoteAddr()) {
        this.__remoteAddr = other.__remoteAddr;
      }
      this.requirementType = other.requirementType;
    }

    public submitPhoto_args deepCopy() {
      return new submitPhoto_args(this);
    }

    @Override
    public void clear() {
      this.title = null;
      this.content = null;
      this.multipart = null;
      this.posterId = null;
      this.__remoteAddr = null;
      setRequirementTypeIsSet(false);
      this.requirementType = 0;
    }

    public String getTitle() {
      return this.title;
    }

    public submitPhoto_args setTitle(String title) {
      this.title = title;
      return this;
    }

    public void unsetTitle() {
      this.title = null;
    }

    /** Returns true if field title is set (has been assigned a value) and false otherwise */
    public boolean isSetTitle() {
      return this.title != null;
    }

    public void setTitleIsSet(boolean value) {
      if (!value) {
        this.title = null;
      }
    }

    public String getContent() {
      return this.content;
    }

    public submitPhoto_args setContent(String content) {
      this.content = content;
      return this;
    }

    public void unsetContent() {
      this.content = null;
    }

    /** Returns true if field content is set (has been assigned a value) and false otherwise */
    public boolean isSetContent() {
      return this.content != null;
    }

    public void setContentIsSet(boolean value) {
      if (!value) {
        this.content = null;
      }
    }

    public String getMultipart() {
      return this.multipart;
    }

    public submitPhoto_args setMultipart(String multipart) {
      this.multipart = multipart;
      return this;
    }

    public void unsetMultipart() {
      this.multipart = null;
    }

    /** Returns true if field multipart is set (has been assigned a value) and false otherwise */
    public boolean isSetMultipart() {
      return this.multipart != null;
    }

    public void setMultipartIsSet(boolean value) {
      if (!value) {
        this.multipart = null;
      }
    }

    public String getPosterId() {
      return this.posterId;
    }

    public submitPhoto_args setPosterId(String posterId) {
      this.posterId = posterId;
      return this;
    }

    public void unsetPosterId() {
      this.posterId = null;
    }

    /** Returns true if field posterId is set (has been assigned a value) and false otherwise */
    public boolean isSetPosterId() {
      return this.posterId != null;
    }

    public void setPosterIdIsSet(boolean value) {
      if (!value) {
        this.posterId = null;
      }
    }

    public String get__remoteAddr() {
      return this.__remoteAddr;
    }

    public submitPhoto_args set__remoteAddr(String __remoteAddr) {
      this.__remoteAddr = __remoteAddr;
      return this;
    }

    public void unset__remoteAddr() {
      this.__remoteAddr = null;
    }

    /** Returns true if field __remoteAddr is set (has been assigned a value) and false otherwise */
    public boolean isSet__remoteAddr() {
      return this.__remoteAddr != null;
    }

    public void set__remoteAddrIsSet(boolean value) {
      if (!value) {
        this.__remoteAddr = null;
      }
    }

    public int getRequirementType() {
      return this.requirementType;
    }

    public submitPhoto_args setRequirementType(int requirementType) {
      this.requirementType = requirementType;
      setRequirementTypeIsSet(true);
      return this;
    }

    public void unsetRequirementType() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REQUIREMENTTYPE_ISSET_ID);
    }

    /** Returns true if field requirementType is set (has been assigned a value) and false otherwise */
    public boolean isSetRequirementType() {
      return EncodingUtils.testBit(__isset_bitfield, __REQUIREMENTTYPE_ISSET_ID);
    }

    public void setRequirementTypeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REQUIREMENTTYPE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TITLE:
        if (value == null) {
          unsetTitle();
        } else {
          setTitle((String)value);
        }
        break;

      case CONTENT:
        if (value == null) {
          unsetContent();
        } else {
          setContent((String)value);
        }
        break;

      case MULTIPART:
        if (value == null) {
          unsetMultipart();
        } else {
          setMultipart((String)value);
        }
        break;

      case POSTER_ID:
        if (value == null) {
          unsetPosterId();
        } else {
          setPosterId((String)value);
        }
        break;

      case __REMOTE_ADDR:
        if (value == null) {
          unset__remoteAddr();
        } else {
          set__remoteAddr((String)value);
        }
        break;

      case REQUIREMENT_TYPE:
        if (value == null) {
          unsetRequirementType();
        } else {
          setRequirementType((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TITLE:
        return getTitle();

      case CONTENT:
        return getContent();

      case MULTIPART:
        return getMultipart();

      case POSTER_ID:
        return getPosterId();

      case __REMOTE_ADDR:
        return get__remoteAddr();

      case REQUIREMENT_TYPE:
        return getRequirementType();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TITLE:
        return isSetTitle();
      case CONTENT:
        return isSetContent();
      case MULTIPART:
        return isSetMultipart();
      case POSTER_ID:
        return isSetPosterId();
      case __REMOTE_ADDR:
        return isSet__remoteAddr();
      case REQUIREMENT_TYPE:
        return isSetRequirementType();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof submitPhoto_args)
        return this.equals((submitPhoto_args)that);
      return false;
    }

    public boolean equals(submitPhoto_args that) {
      if (that == null)
        return false;

      boolean this_present_title = true && this.isSetTitle();
      boolean that_present_title = true && that.isSetTitle();
      if (this_present_title || that_present_title) {
        if (!(this_present_title && that_present_title))
          return false;
        if (!this.title.equals(that.title))
          return false;
      }

      boolean this_present_content = true && this.isSetContent();
      boolean that_present_content = true && that.isSetContent();
      if (this_present_content || that_present_content) {
        if (!(this_present_content && that_present_content))
          return false;
        if (!this.content.equals(that.content))
          return false;
      }

      boolean this_present_multipart = true && this.isSetMultipart();
      boolean that_present_multipart = true && that.isSetMultipart();
      if (this_present_multipart || that_present_multipart) {
        if (!(this_present_multipart && that_present_multipart))
          return false;
        if (!this.multipart.equals(that.multipart))
          return false;
      }

      boolean this_present_posterId = true && this.isSetPosterId();
      boolean that_present_posterId = true && that.isSetPosterId();
      if (this_present_posterId || that_present_posterId) {
        if (!(this_present_posterId && that_present_posterId))
          return false;
        if (!this.posterId.equals(that.posterId))
          return false;
      }

      boolean this_present___remoteAddr = true && this.isSet__remoteAddr();
      boolean that_present___remoteAddr = true && that.isSet__remoteAddr();
      if (this_present___remoteAddr || that_present___remoteAddr) {
        if (!(this_present___remoteAddr && that_present___remoteAddr))
          return false;
        if (!this.__remoteAddr.equals(that.__remoteAddr))
          return false;
      }

      boolean this_present_requirementType = true;
      boolean that_present_requirementType = true;
      if (this_present_requirementType || that_present_requirementType) {
        if (!(this_present_requirementType && that_present_requirementType))
          return false;
        if (this.requirementType != that.requirementType)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_title = true && (isSetTitle());
      list.add(present_title);
      if (present_title)
        list.add(title);

      boolean present_content = true && (isSetContent());
      list.add(present_content);
      if (present_content)
        list.add(content);

      boolean present_multipart = true && (isSetMultipart());
      list.add(present_multipart);
      if (present_multipart)
        list.add(multipart);

      boolean present_posterId = true && (isSetPosterId());
      list.add(present_posterId);
      if (present_posterId)
        list.add(posterId);

      boolean present___remoteAddr = true && (isSet__remoteAddr());
      list.add(present___remoteAddr);
      if (present___remoteAddr)
        list.add(__remoteAddr);

      boolean present_requirementType = true;
      list.add(present_requirementType);
      if (present_requirementType)
        list.add(requirementType);

      return list.hashCode();
    }

    @Override
    public int compareTo(submitPhoto_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTitle()).compareTo(other.isSetTitle());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTitle()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.title, other.title);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetContent()).compareTo(other.isSetContent());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetContent()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.content, other.content);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMultipart()).compareTo(other.isSetMultipart());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMultipart()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.multipart, other.multipart);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPosterId()).compareTo(other.isSetPosterId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPosterId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.posterId, other.posterId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSet__remoteAddr()).compareTo(other.isSet__remoteAddr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet__remoteAddr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.__remoteAddr, other.__remoteAddr);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRequirementType()).compareTo(other.isSetRequirementType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequirementType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requirementType, other.requirementType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("submitPhoto_args(");
      boolean first = true;

      sb.append("title:");
      if (this.title == null) {
        sb.append("null");
      } else {
        sb.append(this.title);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("content:");
      if (this.content == null) {
        sb.append("null");
      } else {
        sb.append(this.content);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("multipart:");
      if (this.multipart == null) {
        sb.append("null");
      } else {
        sb.append(this.multipart);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("posterId:");
      if (this.posterId == null) {
        sb.append("null");
      } else {
        sb.append(this.posterId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("__remoteAddr:");
      if (this.__remoteAddr == null) {
        sb.append("null");
      } else {
        sb.append(this.__remoteAddr);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("requirementType:");
      sb.append(this.requirementType);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class submitPhoto_argsStandardSchemeFactory implements SchemeFactory {
      public submitPhoto_argsStandardScheme getScheme() {
        return new submitPhoto_argsStandardScheme();
      }
    }

    private static class submitPhoto_argsStandardScheme extends StandardScheme<submitPhoto_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, submitPhoto_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TITLE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.title = iprot.readString();
                struct.setTitleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CONTENT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.content = iprot.readString();
                struct.setContentIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // MULTIPART
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.multipart = iprot.readString();
                struct.setMultipartIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // POSTER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.posterId = iprot.readString();
                struct.setPosterIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // __REMOTE_ADDR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.__remoteAddr = iprot.readString();
                struct.set__remoteAddrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // REQUIREMENT_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.requirementType = iprot.readI32();
                struct.setRequirementTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, submitPhoto_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.title != null) {
          oprot.writeFieldBegin(TITLE_FIELD_DESC);
          oprot.writeString(struct.title);
          oprot.writeFieldEnd();
        }
        if (struct.content != null) {
          oprot.writeFieldBegin(CONTENT_FIELD_DESC);
          oprot.writeString(struct.content);
          oprot.writeFieldEnd();
        }
        if (struct.multipart != null) {
          oprot.writeFieldBegin(MULTIPART_FIELD_DESC);
          oprot.writeString(struct.multipart);
          oprot.writeFieldEnd();
        }
        if (struct.posterId != null) {
          oprot.writeFieldBegin(POSTER_ID_FIELD_DESC);
          oprot.writeString(struct.posterId);
          oprot.writeFieldEnd();
        }
        if (struct.__remoteAddr != null) {
          oprot.writeFieldBegin(__REMOTE_ADDR_FIELD_DESC);
          oprot.writeString(struct.__remoteAddr);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(REQUIREMENT_TYPE_FIELD_DESC);
        oprot.writeI32(struct.requirementType);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class submitPhoto_argsTupleSchemeFactory implements SchemeFactory {
      public submitPhoto_argsTupleScheme getScheme() {
        return new submitPhoto_argsTupleScheme();
      }
    }

    private static class submitPhoto_argsTupleScheme extends TupleScheme<submitPhoto_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, submitPhoto_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTitle()) {
          optionals.set(0);
        }
        if (struct.isSetContent()) {
          optionals.set(1);
        }
        if (struct.isSetMultipart()) {
          optionals.set(2);
        }
        if (struct.isSetPosterId()) {
          optionals.set(3);
        }
        if (struct.isSet__remoteAddr()) {
          optionals.set(4);
        }
        if (struct.isSetRequirementType()) {
          optionals.set(5);
        }
        oprot.writeBitSet(optionals, 6);
        if (struct.isSetTitle()) {
          oprot.writeString(struct.title);
        }
        if (struct.isSetContent()) {
          oprot.writeString(struct.content);
        }
        if (struct.isSetMultipart()) {
          oprot.writeString(struct.multipart);
        }
        if (struct.isSetPosterId()) {
          oprot.writeString(struct.posterId);
        }
        if (struct.isSet__remoteAddr()) {
          oprot.writeString(struct.__remoteAddr);
        }
        if (struct.isSetRequirementType()) {
          oprot.writeI32(struct.requirementType);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, submitPhoto_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(6);
        if (incoming.get(0)) {
          struct.title = iprot.readString();
          struct.setTitleIsSet(true);
        }
        if (incoming.get(1)) {
          struct.content = iprot.readString();
          struct.setContentIsSet(true);
        }
        if (incoming.get(2)) {
          struct.multipart = iprot.readString();
          struct.setMultipartIsSet(true);
        }
        if (incoming.get(3)) {
          struct.posterId = iprot.readString();
          struct.setPosterIdIsSet(true);
        }
        if (incoming.get(4)) {
          struct.__remoteAddr = iprot.readString();
          struct.set__remoteAddrIsSet(true);
        }
        if (incoming.get(5)) {
          struct.requirementType = iprot.readI32();
          struct.setRequirementTypeIsSet(true);
        }
      }
    }

  }

  public static class submitPhoto_result implements org.apache.thrift.TBase<submitPhoto_result, submitPhoto_result._Fields>, java.io.Serializable, Cloneable, Comparable<submitPhoto_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("submitPhoto_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new submitPhoto_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new submitPhoto_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(submitPhoto_result.class, metaDataMap);
    }

    public submitPhoto_result() {
    }

    public submitPhoto_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public submitPhoto_result(submitPhoto_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public submitPhoto_result deepCopy() {
      return new submitPhoto_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public submitPhoto_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof submitPhoto_result)
        return this.equals((submitPhoto_result)that);
      return false;
    }

    public boolean equals(submitPhoto_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(submitPhoto_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("submitPhoto_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class submitPhoto_resultStandardSchemeFactory implements SchemeFactory {
      public submitPhoto_resultStandardScheme getScheme() {
        return new submitPhoto_resultStandardScheme();
      }
    }

    private static class submitPhoto_resultStandardScheme extends StandardScheme<submitPhoto_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, submitPhoto_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, submitPhoto_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class submitPhoto_resultTupleSchemeFactory implements SchemeFactory {
      public submitPhoto_resultTupleScheme getScheme() {
        return new submitPhoto_resultTupleScheme();
      }
    }

    private static class submitPhoto_resultTupleScheme extends TupleScheme<submitPhoto_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, submitPhoto_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, submitPhoto_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class submitVideo_args implements org.apache.thrift.TBase<submitVideo_args, submitVideo_args._Fields>, java.io.Serializable, Cloneable, Comparable<submitVideo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("submitVideo_args");

    private static final org.apache.thrift.protocol.TField TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("title", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("content", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField MULTIPART_FIELD_DESC = new org.apache.thrift.protocol.TField("multipart", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField POSTER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("posterId", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField __REMOTE_ADDR_FIELD_DESC = new org.apache.thrift.protocol.TField("__remoteAddr", org.apache.thrift.protocol.TType.STRING, (short)5);
    private static final org.apache.thrift.protocol.TField REQUIREMENT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("requirementType", org.apache.thrift.protocol.TType.I32, (short)6);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new submitVideo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new submitVideo_argsTupleSchemeFactory());
    }

    public String title; // required
    public String content; // required
    public String multipart; // required
    public String posterId; // required
    public String __remoteAddr; // required
    public int requirementType; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TITLE((short)1, "title"),
      CONTENT((short)2, "content"),
      MULTIPART((short)3, "multipart"),
      POSTER_ID((short)4, "posterId"),
      __REMOTE_ADDR((short)5, "__remoteAddr"),
      REQUIREMENT_TYPE((short)6, "requirementType");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TITLE
            return TITLE;
          case 2: // CONTENT
            return CONTENT;
          case 3: // MULTIPART
            return MULTIPART;
          case 4: // POSTER_ID
            return POSTER_ID;
          case 5: // __REMOTE_ADDR
            return __REMOTE_ADDR;
          case 6: // REQUIREMENT_TYPE
            return REQUIREMENT_TYPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __REQUIREMENTTYPE_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TITLE, new org.apache.thrift.meta_data.FieldMetaData("title", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CONTENT, new org.apache.thrift.meta_data.FieldMetaData("content", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MULTIPART, new org.apache.thrift.meta_data.FieldMetaData("multipart", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.POSTER_ID, new org.apache.thrift.meta_data.FieldMetaData("posterId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.__REMOTE_ADDR, new org.apache.thrift.meta_data.FieldMetaData("__remoteAddr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.REQUIREMENT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("requirementType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(submitVideo_args.class, metaDataMap);
    }

    public submitVideo_args() {
    }

    public submitVideo_args(
      String title,
      String content,
      String multipart,
      String posterId,
      String __remoteAddr,
      int requirementType)
    {
      this();
      this.title = title;
      this.content = content;
      this.multipart = multipart;
      this.posterId = posterId;
      this.__remoteAddr = __remoteAddr;
      this.requirementType = requirementType;
      setRequirementTypeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public submitVideo_args(submitVideo_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetTitle()) {
        this.title = other.title;
      }
      if (other.isSetContent()) {
        this.content = other.content;
      }
      if (other.isSetMultipart()) {
        this.multipart = other.multipart;
      }
      if (other.isSetPosterId()) {
        this.posterId = other.posterId;
      }
      if (other.isSet__remoteAddr()) {
        this.__remoteAddr = other.__remoteAddr;
      }
      this.requirementType = other.requirementType;
    }

    public submitVideo_args deepCopy() {
      return new submitVideo_args(this);
    }

    @Override
    public void clear() {
      this.title = null;
      this.content = null;
      this.multipart = null;
      this.posterId = null;
      this.__remoteAddr = null;
      setRequirementTypeIsSet(false);
      this.requirementType = 0;
    }

    public String getTitle() {
      return this.title;
    }

    public submitVideo_args setTitle(String title) {
      this.title = title;
      return this;
    }

    public void unsetTitle() {
      this.title = null;
    }

    /** Returns true if field title is set (has been assigned a value) and false otherwise */
    public boolean isSetTitle() {
      return this.title != null;
    }

    public void setTitleIsSet(boolean value) {
      if (!value) {
        this.title = null;
      }
    }

    public String getContent() {
      return this.content;
    }

    public submitVideo_args setContent(String content) {
      this.content = content;
      return this;
    }

    public void unsetContent() {
      this.content = null;
    }

    /** Returns true if field content is set (has been assigned a value) and false otherwise */
    public boolean isSetContent() {
      return this.content != null;
    }

    public void setContentIsSet(boolean value) {
      if (!value) {
        this.content = null;
      }
    }

    public String getMultipart() {
      return this.multipart;
    }

    public submitVideo_args setMultipart(String multipart) {
      this.multipart = multipart;
      return this;
    }

    public void unsetMultipart() {
      this.multipart = null;
    }

    /** Returns true if field multipart is set (has been assigned a value) and false otherwise */
    public boolean isSetMultipart() {
      return this.multipart != null;
    }

    public void setMultipartIsSet(boolean value) {
      if (!value) {
        this.multipart = null;
      }
    }

    public String getPosterId() {
      return this.posterId;
    }

    public submitVideo_args setPosterId(String posterId) {
      this.posterId = posterId;
      return this;
    }

    public void unsetPosterId() {
      this.posterId = null;
    }

    /** Returns true if field posterId is set (has been assigned a value) and false otherwise */
    public boolean isSetPosterId() {
      return this.posterId != null;
    }

    public void setPosterIdIsSet(boolean value) {
      if (!value) {
        this.posterId = null;
      }
    }

    public String get__remoteAddr() {
      return this.__remoteAddr;
    }

    public submitVideo_args set__remoteAddr(String __remoteAddr) {
      this.__remoteAddr = __remoteAddr;
      return this;
    }

    public void unset__remoteAddr() {
      this.__remoteAddr = null;
    }

    /** Returns true if field __remoteAddr is set (has been assigned a value) and false otherwise */
    public boolean isSet__remoteAddr() {
      return this.__remoteAddr != null;
    }

    public void set__remoteAddrIsSet(boolean value) {
      if (!value) {
        this.__remoteAddr = null;
      }
    }

    public int getRequirementType() {
      return this.requirementType;
    }

    public submitVideo_args setRequirementType(int requirementType) {
      this.requirementType = requirementType;
      setRequirementTypeIsSet(true);
      return this;
    }

    public void unsetRequirementType() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REQUIREMENTTYPE_ISSET_ID);
    }

    /** Returns true if field requirementType is set (has been assigned a value) and false otherwise */
    public boolean isSetRequirementType() {
      return EncodingUtils.testBit(__isset_bitfield, __REQUIREMENTTYPE_ISSET_ID);
    }

    public void setRequirementTypeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REQUIREMENTTYPE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TITLE:
        if (value == null) {
          unsetTitle();
        } else {
          setTitle((String)value);
        }
        break;

      case CONTENT:
        if (value == null) {
          unsetContent();
        } else {
          setContent((String)value);
        }
        break;

      case MULTIPART:
        if (value == null) {
          unsetMultipart();
        } else {
          setMultipart((String)value);
        }
        break;

      case POSTER_ID:
        if (value == null) {
          unsetPosterId();
        } else {
          setPosterId((String)value);
        }
        break;

      case __REMOTE_ADDR:
        if (value == null) {
          unset__remoteAddr();
        } else {
          set__remoteAddr((String)value);
        }
        break;

      case REQUIREMENT_TYPE:
        if (value == null) {
          unsetRequirementType();
        } else {
          setRequirementType((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TITLE:
        return getTitle();

      case CONTENT:
        return getContent();

      case MULTIPART:
        return getMultipart();

      case POSTER_ID:
        return getPosterId();

      case __REMOTE_ADDR:
        return get__remoteAddr();

      case REQUIREMENT_TYPE:
        return getRequirementType();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TITLE:
        return isSetTitle();
      case CONTENT:
        return isSetContent();
      case MULTIPART:
        return isSetMultipart();
      case POSTER_ID:
        return isSetPosterId();
      case __REMOTE_ADDR:
        return isSet__remoteAddr();
      case REQUIREMENT_TYPE:
        return isSetRequirementType();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof submitVideo_args)
        return this.equals((submitVideo_args)that);
      return false;
    }

    public boolean equals(submitVideo_args that) {
      if (that == null)
        return false;

      boolean this_present_title = true && this.isSetTitle();
      boolean that_present_title = true && that.isSetTitle();
      if (this_present_title || that_present_title) {
        if (!(this_present_title && that_present_title))
          return false;
        if (!this.title.equals(that.title))
          return false;
      }

      boolean this_present_content = true && this.isSetContent();
      boolean that_present_content = true && that.isSetContent();
      if (this_present_content || that_present_content) {
        if (!(this_present_content && that_present_content))
          return false;
        if (!this.content.equals(that.content))
          return false;
      }

      boolean this_present_multipart = true && this.isSetMultipart();
      boolean that_present_multipart = true && that.isSetMultipart();
      if (this_present_multipart || that_present_multipart) {
        if (!(this_present_multipart && that_present_multipart))
          return false;
        if (!this.multipart.equals(that.multipart))
          return false;
      }

      boolean this_present_posterId = true && this.isSetPosterId();
      boolean that_present_posterId = true && that.isSetPosterId();
      if (this_present_posterId || that_present_posterId) {
        if (!(this_present_posterId && that_present_posterId))
          return false;
        if (!this.posterId.equals(that.posterId))
          return false;
      }

      boolean this_present___remoteAddr = true && this.isSet__remoteAddr();
      boolean that_present___remoteAddr = true && that.isSet__remoteAddr();
      if (this_present___remoteAddr || that_present___remoteAddr) {
        if (!(this_present___remoteAddr && that_present___remoteAddr))
          return false;
        if (!this.__remoteAddr.equals(that.__remoteAddr))
          return false;
      }

      boolean this_present_requirementType = true;
      boolean that_present_requirementType = true;
      if (this_present_requirementType || that_present_requirementType) {
        if (!(this_present_requirementType && that_present_requirementType))
          return false;
        if (this.requirementType != that.requirementType)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_title = true && (isSetTitle());
      list.add(present_title);
      if (present_title)
        list.add(title);

      boolean present_content = true && (isSetContent());
      list.add(present_content);
      if (present_content)
        list.add(content);

      boolean present_multipart = true && (isSetMultipart());
      list.add(present_multipart);
      if (present_multipart)
        list.add(multipart);

      boolean present_posterId = true && (isSetPosterId());
      list.add(present_posterId);
      if (present_posterId)
        list.add(posterId);

      boolean present___remoteAddr = true && (isSet__remoteAddr());
      list.add(present___remoteAddr);
      if (present___remoteAddr)
        list.add(__remoteAddr);

      boolean present_requirementType = true;
      list.add(present_requirementType);
      if (present_requirementType)
        list.add(requirementType);

      return list.hashCode();
    }

    @Override
    public int compareTo(submitVideo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTitle()).compareTo(other.isSetTitle());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTitle()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.title, other.title);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetContent()).compareTo(other.isSetContent());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetContent()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.content, other.content);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMultipart()).compareTo(other.isSetMultipart());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMultipart()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.multipart, other.multipart);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPosterId()).compareTo(other.isSetPosterId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPosterId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.posterId, other.posterId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSet__remoteAddr()).compareTo(other.isSet__remoteAddr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet__remoteAddr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.__remoteAddr, other.__remoteAddr);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRequirementType()).compareTo(other.isSetRequirementType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequirementType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requirementType, other.requirementType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("submitVideo_args(");
      boolean first = true;

      sb.append("title:");
      if (this.title == null) {
        sb.append("null");
      } else {
        sb.append(this.title);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("content:");
      if (this.content == null) {
        sb.append("null");
      } else {
        sb.append(this.content);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("multipart:");
      if (this.multipart == null) {
        sb.append("null");
      } else {
        sb.append(this.multipart);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("posterId:");
      if (this.posterId == null) {
        sb.append("null");
      } else {
        sb.append(this.posterId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("__remoteAddr:");
      if (this.__remoteAddr == null) {
        sb.append("null");
      } else {
        sb.append(this.__remoteAddr);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("requirementType:");
      sb.append(this.requirementType);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class submitVideo_argsStandardSchemeFactory implements SchemeFactory {
      public submitVideo_argsStandardScheme getScheme() {
        return new submitVideo_argsStandardScheme();
      }
    }

    private static class submitVideo_argsStandardScheme extends StandardScheme<submitVideo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, submitVideo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TITLE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.title = iprot.readString();
                struct.setTitleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CONTENT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.content = iprot.readString();
                struct.setContentIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // MULTIPART
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.multipart = iprot.readString();
                struct.setMultipartIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // POSTER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.posterId = iprot.readString();
                struct.setPosterIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // __REMOTE_ADDR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.__remoteAddr = iprot.readString();
                struct.set__remoteAddrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // REQUIREMENT_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.requirementType = iprot.readI32();
                struct.setRequirementTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, submitVideo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.title != null) {
          oprot.writeFieldBegin(TITLE_FIELD_DESC);
          oprot.writeString(struct.title);
          oprot.writeFieldEnd();
        }
        if (struct.content != null) {
          oprot.writeFieldBegin(CONTENT_FIELD_DESC);
          oprot.writeString(struct.content);
          oprot.writeFieldEnd();
        }
        if (struct.multipart != null) {
          oprot.writeFieldBegin(MULTIPART_FIELD_DESC);
          oprot.writeString(struct.multipart);
          oprot.writeFieldEnd();
        }
        if (struct.posterId != null) {
          oprot.writeFieldBegin(POSTER_ID_FIELD_DESC);
          oprot.writeString(struct.posterId);
          oprot.writeFieldEnd();
        }
        if (struct.__remoteAddr != null) {
          oprot.writeFieldBegin(__REMOTE_ADDR_FIELD_DESC);
          oprot.writeString(struct.__remoteAddr);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(REQUIREMENT_TYPE_FIELD_DESC);
        oprot.writeI32(struct.requirementType);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class submitVideo_argsTupleSchemeFactory implements SchemeFactory {
      public submitVideo_argsTupleScheme getScheme() {
        return new submitVideo_argsTupleScheme();
      }
    }

    private static class submitVideo_argsTupleScheme extends TupleScheme<submitVideo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, submitVideo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTitle()) {
          optionals.set(0);
        }
        if (struct.isSetContent()) {
          optionals.set(1);
        }
        if (struct.isSetMultipart()) {
          optionals.set(2);
        }
        if (struct.isSetPosterId()) {
          optionals.set(3);
        }
        if (struct.isSet__remoteAddr()) {
          optionals.set(4);
        }
        if (struct.isSetRequirementType()) {
          optionals.set(5);
        }
        oprot.writeBitSet(optionals, 6);
        if (struct.isSetTitle()) {
          oprot.writeString(struct.title);
        }
        if (struct.isSetContent()) {
          oprot.writeString(struct.content);
        }
        if (struct.isSetMultipart()) {
          oprot.writeString(struct.multipart);
        }
        if (struct.isSetPosterId()) {
          oprot.writeString(struct.posterId);
        }
        if (struct.isSet__remoteAddr()) {
          oprot.writeString(struct.__remoteAddr);
        }
        if (struct.isSetRequirementType()) {
          oprot.writeI32(struct.requirementType);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, submitVideo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(6);
        if (incoming.get(0)) {
          struct.title = iprot.readString();
          struct.setTitleIsSet(true);
        }
        if (incoming.get(1)) {
          struct.content = iprot.readString();
          struct.setContentIsSet(true);
        }
        if (incoming.get(2)) {
          struct.multipart = iprot.readString();
          struct.setMultipartIsSet(true);
        }
        if (incoming.get(3)) {
          struct.posterId = iprot.readString();
          struct.setPosterIdIsSet(true);
        }
        if (incoming.get(4)) {
          struct.__remoteAddr = iprot.readString();
          struct.set__remoteAddrIsSet(true);
        }
        if (incoming.get(5)) {
          struct.requirementType = iprot.readI32();
          struct.setRequirementTypeIsSet(true);
        }
      }
    }

  }

  public static class submitVideo_result implements org.apache.thrift.TBase<submitVideo_result, submitVideo_result._Fields>, java.io.Serializable, Cloneable, Comparable<submitVideo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("submitVideo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new submitVideo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new submitVideo_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(submitVideo_result.class, metaDataMap);
    }

    public submitVideo_result() {
    }

    public submitVideo_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public submitVideo_result(submitVideo_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public submitVideo_result deepCopy() {
      return new submitVideo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public submitVideo_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof submitVideo_result)
        return this.equals((submitVideo_result)that);
      return false;
    }

    public boolean equals(submitVideo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(submitVideo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("submitVideo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class submitVideo_resultStandardSchemeFactory implements SchemeFactory {
      public submitVideo_resultStandardScheme getScheme() {
        return new submitVideo_resultStandardScheme();
      }
    }

    private static class submitVideo_resultStandardScheme extends StandardScheme<submitVideo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, submitVideo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, submitVideo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class submitVideo_resultTupleSchemeFactory implements SchemeFactory {
      public submitVideo_resultTupleScheme getScheme() {
        return new submitVideo_resultTupleScheme();
      }
    }

    private static class submitVideo_resultTupleScheme extends TupleScheme<submitVideo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, submitVideo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, submitVideo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class replyRequirement_args implements org.apache.thrift.TBase<replyRequirement_args, replyRequirement_args._Fields>, java.io.Serializable, Cloneable, Comparable<replyRequirement_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("replyRequirement_args");

    private static final org.apache.thrift.protocol.TField RID_FIELD_DESC = new org.apache.thrift.protocol.TField("rid", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("title", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("content", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField POSTER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("posterId", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField __REMOTE_ADDR_FIELD_DESC = new org.apache.thrift.protocol.TField("__remoteAddr", org.apache.thrift.protocol.TType.STRING, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new replyRequirement_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new replyRequirement_argsTupleSchemeFactory());
    }

    public String rid; // required
    public String title; // required
    public String content; // required
    public String posterId; // required
    public String __remoteAddr; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      RID((short)1, "rid"),
      TITLE((short)2, "title"),
      CONTENT((short)3, "content"),
      POSTER_ID((short)4, "posterId"),
      __REMOTE_ADDR((short)5, "__remoteAddr");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // RID
            return RID;
          case 2: // TITLE
            return TITLE;
          case 3: // CONTENT
            return CONTENT;
          case 4: // POSTER_ID
            return POSTER_ID;
          case 5: // __REMOTE_ADDR
            return __REMOTE_ADDR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.RID, new org.apache.thrift.meta_data.FieldMetaData("rid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TITLE, new org.apache.thrift.meta_data.FieldMetaData("title", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CONTENT, new org.apache.thrift.meta_data.FieldMetaData("content", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.POSTER_ID, new org.apache.thrift.meta_data.FieldMetaData("posterId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.__REMOTE_ADDR, new org.apache.thrift.meta_data.FieldMetaData("__remoteAddr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(replyRequirement_args.class, metaDataMap);
    }

    public replyRequirement_args() {
    }

    public replyRequirement_args(
      String rid,
      String title,
      String content,
      String posterId,
      String __remoteAddr)
    {
      this();
      this.rid = rid;
      this.title = title;
      this.content = content;
      this.posterId = posterId;
      this.__remoteAddr = __remoteAddr;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public replyRequirement_args(replyRequirement_args other) {
      if (other.isSetRid()) {
        this.rid = other.rid;
      }
      if (other.isSetTitle()) {
        this.title = other.title;
      }
      if (other.isSetContent()) {
        this.content = other.content;
      }
      if (other.isSetPosterId()) {
        this.posterId = other.posterId;
      }
      if (other.isSet__remoteAddr()) {
        this.__remoteAddr = other.__remoteAddr;
      }
    }

    public replyRequirement_args deepCopy() {
      return new replyRequirement_args(this);
    }

    @Override
    public void clear() {
      this.rid = null;
      this.title = null;
      this.content = null;
      this.posterId = null;
      this.__remoteAddr = null;
    }

    public String getRid() {
      return this.rid;
    }

    public replyRequirement_args setRid(String rid) {
      this.rid = rid;
      return this;
    }

    public void unsetRid() {
      this.rid = null;
    }

    /** Returns true if field rid is set (has been assigned a value) and false otherwise */
    public boolean isSetRid() {
      return this.rid != null;
    }

    public void setRidIsSet(boolean value) {
      if (!value) {
        this.rid = null;
      }
    }

    public String getTitle() {
      return this.title;
    }

    public replyRequirement_args setTitle(String title) {
      this.title = title;
      return this;
    }

    public void unsetTitle() {
      this.title = null;
    }

    /** Returns true if field title is set (has been assigned a value) and false otherwise */
    public boolean isSetTitle() {
      return this.title != null;
    }

    public void setTitleIsSet(boolean value) {
      if (!value) {
        this.title = null;
      }
    }

    public String getContent() {
      return this.content;
    }

    public replyRequirement_args setContent(String content) {
      this.content = content;
      return this;
    }

    public void unsetContent() {
      this.content = null;
    }

    /** Returns true if field content is set (has been assigned a value) and false otherwise */
    public boolean isSetContent() {
      return this.content != null;
    }

    public void setContentIsSet(boolean value) {
      if (!value) {
        this.content = null;
      }
    }

    public String getPosterId() {
      return this.posterId;
    }

    public replyRequirement_args setPosterId(String posterId) {
      this.posterId = posterId;
      return this;
    }

    public void unsetPosterId() {
      this.posterId = null;
    }

    /** Returns true if field posterId is set (has been assigned a value) and false otherwise */
    public boolean isSetPosterId() {
      return this.posterId != null;
    }

    public void setPosterIdIsSet(boolean value) {
      if (!value) {
        this.posterId = null;
      }
    }

    public String get__remoteAddr() {
      return this.__remoteAddr;
    }

    public replyRequirement_args set__remoteAddr(String __remoteAddr) {
      this.__remoteAddr = __remoteAddr;
      return this;
    }

    public void unset__remoteAddr() {
      this.__remoteAddr = null;
    }

    /** Returns true if field __remoteAddr is set (has been assigned a value) and false otherwise */
    public boolean isSet__remoteAddr() {
      return this.__remoteAddr != null;
    }

    public void set__remoteAddrIsSet(boolean value) {
      if (!value) {
        this.__remoteAddr = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case RID:
        if (value == null) {
          unsetRid();
        } else {
          setRid((String)value);
        }
        break;

      case TITLE:
        if (value == null) {
          unsetTitle();
        } else {
          setTitle((String)value);
        }
        break;

      case CONTENT:
        if (value == null) {
          unsetContent();
        } else {
          setContent((String)value);
        }
        break;

      case POSTER_ID:
        if (value == null) {
          unsetPosterId();
        } else {
          setPosterId((String)value);
        }
        break;

      case __REMOTE_ADDR:
        if (value == null) {
          unset__remoteAddr();
        } else {
          set__remoteAddr((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case RID:
        return getRid();

      case TITLE:
        return getTitle();

      case CONTENT:
        return getContent();

      case POSTER_ID:
        return getPosterId();

      case __REMOTE_ADDR:
        return get__remoteAddr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case RID:
        return isSetRid();
      case TITLE:
        return isSetTitle();
      case CONTENT:
        return isSetContent();
      case POSTER_ID:
        return isSetPosterId();
      case __REMOTE_ADDR:
        return isSet__remoteAddr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof replyRequirement_args)
        return this.equals((replyRequirement_args)that);
      return false;
    }

    public boolean equals(replyRequirement_args that) {
      if (that == null)
        return false;

      boolean this_present_rid = true && this.isSetRid();
      boolean that_present_rid = true && that.isSetRid();
      if (this_present_rid || that_present_rid) {
        if (!(this_present_rid && that_present_rid))
          return false;
        if (!this.rid.equals(that.rid))
          return false;
      }

      boolean this_present_title = true && this.isSetTitle();
      boolean that_present_title = true && that.isSetTitle();
      if (this_present_title || that_present_title) {
        if (!(this_present_title && that_present_title))
          return false;
        if (!this.title.equals(that.title))
          return false;
      }

      boolean this_present_content = true && this.isSetContent();
      boolean that_present_content = true && that.isSetContent();
      if (this_present_content || that_present_content) {
        if (!(this_present_content && that_present_content))
          return false;
        if (!this.content.equals(that.content))
          return false;
      }

      boolean this_present_posterId = true && this.isSetPosterId();
      boolean that_present_posterId = true && that.isSetPosterId();
      if (this_present_posterId || that_present_posterId) {
        if (!(this_present_posterId && that_present_posterId))
          return false;
        if (!this.posterId.equals(that.posterId))
          return false;
      }

      boolean this_present___remoteAddr = true && this.isSet__remoteAddr();
      boolean that_present___remoteAddr = true && that.isSet__remoteAddr();
      if (this_present___remoteAddr || that_present___remoteAddr) {
        if (!(this_present___remoteAddr && that_present___remoteAddr))
          return false;
        if (!this.__remoteAddr.equals(that.__remoteAddr))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_rid = true && (isSetRid());
      list.add(present_rid);
      if (present_rid)
        list.add(rid);

      boolean present_title = true && (isSetTitle());
      list.add(present_title);
      if (present_title)
        list.add(title);

      boolean present_content = true && (isSetContent());
      list.add(present_content);
      if (present_content)
        list.add(content);

      boolean present_posterId = true && (isSetPosterId());
      list.add(present_posterId);
      if (present_posterId)
        list.add(posterId);

      boolean present___remoteAddr = true && (isSet__remoteAddr());
      list.add(present___remoteAddr);
      if (present___remoteAddr)
        list.add(__remoteAddr);

      return list.hashCode();
    }

    @Override
    public int compareTo(replyRequirement_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRid()).compareTo(other.isSetRid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rid, other.rid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTitle()).compareTo(other.isSetTitle());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTitle()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.title, other.title);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetContent()).compareTo(other.isSetContent());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetContent()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.content, other.content);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPosterId()).compareTo(other.isSetPosterId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPosterId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.posterId, other.posterId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSet__remoteAddr()).compareTo(other.isSet__remoteAddr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet__remoteAddr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.__remoteAddr, other.__remoteAddr);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("replyRequirement_args(");
      boolean first = true;

      sb.append("rid:");
      if (this.rid == null) {
        sb.append("null");
      } else {
        sb.append(this.rid);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("title:");
      if (this.title == null) {
        sb.append("null");
      } else {
        sb.append(this.title);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("content:");
      if (this.content == null) {
        sb.append("null");
      } else {
        sb.append(this.content);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("posterId:");
      if (this.posterId == null) {
        sb.append("null");
      } else {
        sb.append(this.posterId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("__remoteAddr:");
      if (this.__remoteAddr == null) {
        sb.append("null");
      } else {
        sb.append(this.__remoteAddr);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class replyRequirement_argsStandardSchemeFactory implements SchemeFactory {
      public replyRequirement_argsStandardScheme getScheme() {
        return new replyRequirement_argsStandardScheme();
      }
    }

    private static class replyRequirement_argsStandardScheme extends StandardScheme<replyRequirement_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, replyRequirement_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // RID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.rid = iprot.readString();
                struct.setRidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TITLE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.title = iprot.readString();
                struct.setTitleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // CONTENT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.content = iprot.readString();
                struct.setContentIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // POSTER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.posterId = iprot.readString();
                struct.setPosterIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // __REMOTE_ADDR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.__remoteAddr = iprot.readString();
                struct.set__remoteAddrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, replyRequirement_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.rid != null) {
          oprot.writeFieldBegin(RID_FIELD_DESC);
          oprot.writeString(struct.rid);
          oprot.writeFieldEnd();
        }
        if (struct.title != null) {
          oprot.writeFieldBegin(TITLE_FIELD_DESC);
          oprot.writeString(struct.title);
          oprot.writeFieldEnd();
        }
        if (struct.content != null) {
          oprot.writeFieldBegin(CONTENT_FIELD_DESC);
          oprot.writeString(struct.content);
          oprot.writeFieldEnd();
        }
        if (struct.posterId != null) {
          oprot.writeFieldBegin(POSTER_ID_FIELD_DESC);
          oprot.writeString(struct.posterId);
          oprot.writeFieldEnd();
        }
        if (struct.__remoteAddr != null) {
          oprot.writeFieldBegin(__REMOTE_ADDR_FIELD_DESC);
          oprot.writeString(struct.__remoteAddr);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class replyRequirement_argsTupleSchemeFactory implements SchemeFactory {
      public replyRequirement_argsTupleScheme getScheme() {
        return new replyRequirement_argsTupleScheme();
      }
    }

    private static class replyRequirement_argsTupleScheme extends TupleScheme<replyRequirement_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, replyRequirement_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRid()) {
          optionals.set(0);
        }
        if (struct.isSetTitle()) {
          optionals.set(1);
        }
        if (struct.isSetContent()) {
          optionals.set(2);
        }
        if (struct.isSetPosterId()) {
          optionals.set(3);
        }
        if (struct.isSet__remoteAddr()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetRid()) {
          oprot.writeString(struct.rid);
        }
        if (struct.isSetTitle()) {
          oprot.writeString(struct.title);
        }
        if (struct.isSetContent()) {
          oprot.writeString(struct.content);
        }
        if (struct.isSetPosterId()) {
          oprot.writeString(struct.posterId);
        }
        if (struct.isSet__remoteAddr()) {
          oprot.writeString(struct.__remoteAddr);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, replyRequirement_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.rid = iprot.readString();
          struct.setRidIsSet(true);
        }
        if (incoming.get(1)) {
          struct.title = iprot.readString();
          struct.setTitleIsSet(true);
        }
        if (incoming.get(2)) {
          struct.content = iprot.readString();
          struct.setContentIsSet(true);
        }
        if (incoming.get(3)) {
          struct.posterId = iprot.readString();
          struct.setPosterIdIsSet(true);
        }
        if (incoming.get(4)) {
          struct.__remoteAddr = iprot.readString();
          struct.set__remoteAddrIsSet(true);
        }
      }
    }

  }

  public static class replyRequirement_result implements org.apache.thrift.TBase<replyRequirement_result, replyRequirement_result._Fields>, java.io.Serializable, Cloneable, Comparable<replyRequirement_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("replyRequirement_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new replyRequirement_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new replyRequirement_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(replyRequirement_result.class, metaDataMap);
    }

    public replyRequirement_result() {
    }

    public replyRequirement_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public replyRequirement_result(replyRequirement_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public replyRequirement_result deepCopy() {
      return new replyRequirement_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public replyRequirement_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof replyRequirement_result)
        return this.equals((replyRequirement_result)that);
      return false;
    }

    public boolean equals(replyRequirement_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(replyRequirement_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("replyRequirement_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class replyRequirement_resultStandardSchemeFactory implements SchemeFactory {
      public replyRequirement_resultStandardScheme getScheme() {
        return new replyRequirement_resultStandardScheme();
      }
    }

    private static class replyRequirement_resultStandardScheme extends StandardScheme<replyRequirement_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, replyRequirement_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, replyRequirement_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class replyRequirement_resultTupleSchemeFactory implements SchemeFactory {
      public replyRequirement_resultTupleScheme getScheme() {
        return new replyRequirement_resultTupleScheme();
      }
    }

    private static class replyRequirement_resultTupleScheme extends TupleScheme<replyRequirement_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, replyRequirement_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, replyRequirement_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class deleteRequirement_args implements org.apache.thrift.TBase<deleteRequirement_args, deleteRequirement_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteRequirement_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteRequirement_args");

    private static final org.apache.thrift.protocol.TField RID_FIELD_DESC = new org.apache.thrift.protocol.TField("rid", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteRequirement_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteRequirement_argsTupleSchemeFactory());
    }

    public String rid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      RID((short)1, "rid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // RID
            return RID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.RID, new org.apache.thrift.meta_data.FieldMetaData("rid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteRequirement_args.class, metaDataMap);
    }

    public deleteRequirement_args() {
    }

    public deleteRequirement_args(
      String rid)
    {
      this();
      this.rid = rid;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteRequirement_args(deleteRequirement_args other) {
      if (other.isSetRid()) {
        this.rid = other.rid;
      }
    }

    public deleteRequirement_args deepCopy() {
      return new deleteRequirement_args(this);
    }

    @Override
    public void clear() {
      this.rid = null;
    }

    public String getRid() {
      return this.rid;
    }

    public deleteRequirement_args setRid(String rid) {
      this.rid = rid;
      return this;
    }

    public void unsetRid() {
      this.rid = null;
    }

    /** Returns true if field rid is set (has been assigned a value) and false otherwise */
    public boolean isSetRid() {
      return this.rid != null;
    }

    public void setRidIsSet(boolean value) {
      if (!value) {
        this.rid = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case RID:
        if (value == null) {
          unsetRid();
        } else {
          setRid((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case RID:
        return getRid();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case RID:
        return isSetRid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteRequirement_args)
        return this.equals((deleteRequirement_args)that);
      return false;
    }

    public boolean equals(deleteRequirement_args that) {
      if (that == null)
        return false;

      boolean this_present_rid = true && this.isSetRid();
      boolean that_present_rid = true && that.isSetRid();
      if (this_present_rid || that_present_rid) {
        if (!(this_present_rid && that_present_rid))
          return false;
        if (!this.rid.equals(that.rid))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_rid = true && (isSetRid());
      list.add(present_rid);
      if (present_rid)
        list.add(rid);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteRequirement_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRid()).compareTo(other.isSetRid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rid, other.rid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteRequirement_args(");
      boolean first = true;

      sb.append("rid:");
      if (this.rid == null) {
        sb.append("null");
      } else {
        sb.append(this.rid);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteRequirement_argsStandardSchemeFactory implements SchemeFactory {
      public deleteRequirement_argsStandardScheme getScheme() {
        return new deleteRequirement_argsStandardScheme();
      }
    }

    private static class deleteRequirement_argsStandardScheme extends StandardScheme<deleteRequirement_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteRequirement_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // RID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.rid = iprot.readString();
                struct.setRidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteRequirement_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.rid != null) {
          oprot.writeFieldBegin(RID_FIELD_DESC);
          oprot.writeString(struct.rid);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteRequirement_argsTupleSchemeFactory implements SchemeFactory {
      public deleteRequirement_argsTupleScheme getScheme() {
        return new deleteRequirement_argsTupleScheme();
      }
    }

    private static class deleteRequirement_argsTupleScheme extends TupleScheme<deleteRequirement_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteRequirement_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRid()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRid()) {
          oprot.writeString(struct.rid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteRequirement_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.rid = iprot.readString();
          struct.setRidIsSet(true);
        }
      }
    }

  }

  public static class deleteRequirement_result implements org.apache.thrift.TBase<deleteRequirement_result, deleteRequirement_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteRequirement_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteRequirement_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteRequirement_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteRequirement_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteRequirement_result.class, metaDataMap);
    }

    public deleteRequirement_result() {
    }

    public deleteRequirement_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteRequirement_result(deleteRequirement_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public deleteRequirement_result deepCopy() {
      return new deleteRequirement_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public deleteRequirement_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteRequirement_result)
        return this.equals((deleteRequirement_result)that);
      return false;
    }

    public boolean equals(deleteRequirement_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteRequirement_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteRequirement_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteRequirement_resultStandardSchemeFactory implements SchemeFactory {
      public deleteRequirement_resultStandardScheme getScheme() {
        return new deleteRequirement_resultStandardScheme();
      }
    }

    private static class deleteRequirement_resultStandardScheme extends StandardScheme<deleteRequirement_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteRequirement_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteRequirement_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteRequirement_resultTupleSchemeFactory implements SchemeFactory {
      public deleteRequirement_resultTupleScheme getScheme() {
        return new deleteRequirement_resultTupleScheme();
      }
    }

    private static class deleteRequirement_resultTupleScheme extends TupleScheme<deleteRequirement_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteRequirement_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteRequirement_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class supportRequirement_args implements org.apache.thrift.TBase<supportRequirement_args, supportRequirement_args._Fields>, java.io.Serializable, Cloneable, Comparable<supportRequirement_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("supportRequirement_args");

    private static final org.apache.thrift.protocol.TField RID_FIELD_DESC = new org.apache.thrift.protocol.TField("rid", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new supportRequirement_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new supportRequirement_argsTupleSchemeFactory());
    }

    public String rid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      RID((short)1, "rid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // RID
            return RID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.RID, new org.apache.thrift.meta_data.FieldMetaData("rid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(supportRequirement_args.class, metaDataMap);
    }

    public supportRequirement_args() {
    }

    public supportRequirement_args(
      String rid)
    {
      this();
      this.rid = rid;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public supportRequirement_args(supportRequirement_args other) {
      if (other.isSetRid()) {
        this.rid = other.rid;
      }
    }

    public supportRequirement_args deepCopy() {
      return new supportRequirement_args(this);
    }

    @Override
    public void clear() {
      this.rid = null;
    }

    public String getRid() {
      return this.rid;
    }

    public supportRequirement_args setRid(String rid) {
      this.rid = rid;
      return this;
    }

    public void unsetRid() {
      this.rid = null;
    }

    /** Returns true if field rid is set (has been assigned a value) and false otherwise */
    public boolean isSetRid() {
      return this.rid != null;
    }

    public void setRidIsSet(boolean value) {
      if (!value) {
        this.rid = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case RID:
        if (value == null) {
          unsetRid();
        } else {
          setRid((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case RID:
        return getRid();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case RID:
        return isSetRid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof supportRequirement_args)
        return this.equals((supportRequirement_args)that);
      return false;
    }

    public boolean equals(supportRequirement_args that) {
      if (that == null)
        return false;

      boolean this_present_rid = true && this.isSetRid();
      boolean that_present_rid = true && that.isSetRid();
      if (this_present_rid || that_present_rid) {
        if (!(this_present_rid && that_present_rid))
          return false;
        if (!this.rid.equals(that.rid))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_rid = true && (isSetRid());
      list.add(present_rid);
      if (present_rid)
        list.add(rid);

      return list.hashCode();
    }

    @Override
    public int compareTo(supportRequirement_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRid()).compareTo(other.isSetRid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rid, other.rid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("supportRequirement_args(");
      boolean first = true;

      sb.append("rid:");
      if (this.rid == null) {
        sb.append("null");
      } else {
        sb.append(this.rid);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class supportRequirement_argsStandardSchemeFactory implements SchemeFactory {
      public supportRequirement_argsStandardScheme getScheme() {
        return new supportRequirement_argsStandardScheme();
      }
    }

    private static class supportRequirement_argsStandardScheme extends StandardScheme<supportRequirement_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, supportRequirement_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // RID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.rid = iprot.readString();
                struct.setRidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, supportRequirement_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.rid != null) {
          oprot.writeFieldBegin(RID_FIELD_DESC);
          oprot.writeString(struct.rid);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class supportRequirement_argsTupleSchemeFactory implements SchemeFactory {
      public supportRequirement_argsTupleScheme getScheme() {
        return new supportRequirement_argsTupleScheme();
      }
    }

    private static class supportRequirement_argsTupleScheme extends TupleScheme<supportRequirement_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, supportRequirement_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRid()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRid()) {
          oprot.writeString(struct.rid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, supportRequirement_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.rid = iprot.readString();
          struct.setRidIsSet(true);
        }
      }
    }

  }

  public static class supportRequirement_result implements org.apache.thrift.TBase<supportRequirement_result, supportRequirement_result._Fields>, java.io.Serializable, Cloneable, Comparable<supportRequirement_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("supportRequirement_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new supportRequirement_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new supportRequirement_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(supportRequirement_result.class, metaDataMap);
    }

    public supportRequirement_result() {
    }

    public supportRequirement_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public supportRequirement_result(supportRequirement_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public supportRequirement_result deepCopy() {
      return new supportRequirement_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public supportRequirement_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof supportRequirement_result)
        return this.equals((supportRequirement_result)that);
      return false;
    }

    public boolean equals(supportRequirement_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(supportRequirement_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("supportRequirement_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class supportRequirement_resultStandardSchemeFactory implements SchemeFactory {
      public supportRequirement_resultStandardScheme getScheme() {
        return new supportRequirement_resultStandardScheme();
      }
    }

    private static class supportRequirement_resultStandardScheme extends StandardScheme<supportRequirement_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, supportRequirement_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, supportRequirement_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class supportRequirement_resultTupleSchemeFactory implements SchemeFactory {
      public supportRequirement_resultTupleScheme getScheme() {
        return new supportRequirement_resultTupleScheme();
      }
    }

    private static class supportRequirement_resultTupleScheme extends TupleScheme<supportRequirement_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, supportRequirement_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, supportRequirement_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class loadRequirement_args implements org.apache.thrift.TBase<loadRequirement_args, loadRequirement_args._Fields>, java.io.Serializable, Cloneable, Comparable<loadRequirement_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("loadRequirement_args");

    private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField PAGE_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("pageNum", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new loadRequirement_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new loadRequirement_argsTupleSchemeFactory());
    }

    public int type; // required
    public int pageNum; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TYPE((short)1, "type"),
      PAGE_NUM((short)2, "pageNum");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TYPE
            return TYPE;
          case 2: // PAGE_NUM
            return PAGE_NUM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TYPE_ISSET_ID = 0;
    private static final int __PAGENUM_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PAGE_NUM, new org.apache.thrift.meta_data.FieldMetaData("pageNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(loadRequirement_args.class, metaDataMap);
    }

    public loadRequirement_args() {
    }

    public loadRequirement_args(
      int type,
      int pageNum)
    {
      this();
      this.type = type;
      setTypeIsSet(true);
      this.pageNum = pageNum;
      setPageNumIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public loadRequirement_args(loadRequirement_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.type = other.type;
      this.pageNum = other.pageNum;
    }

    public loadRequirement_args deepCopy() {
      return new loadRequirement_args(this);
    }

    @Override
    public void clear() {
      setTypeIsSet(false);
      this.type = 0;
      setPageNumIsSet(false);
      this.pageNum = 0;
    }

    public int getType() {
      return this.type;
    }

    public loadRequirement_args setType(int type) {
      this.type = type;
      setTypeIsSet(true);
      return this;
    }

    public void unsetType() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TYPE_ISSET_ID);
    }

    /** Returns true if field type is set (has been assigned a value) and false otherwise */
    public boolean isSetType() {
      return EncodingUtils.testBit(__isset_bitfield, __TYPE_ISSET_ID);
    }

    public void setTypeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TYPE_ISSET_ID, value);
    }

    public int getPageNum() {
      return this.pageNum;
    }

    public loadRequirement_args setPageNum(int pageNum) {
      this.pageNum = pageNum;
      setPageNumIsSet(true);
      return this;
    }

    public void unsetPageNum() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGENUM_ISSET_ID);
    }

    /** Returns true if field pageNum is set (has been assigned a value) and false otherwise */
    public boolean isSetPageNum() {
      return EncodingUtils.testBit(__isset_bitfield, __PAGENUM_ISSET_ID);
    }

    public void setPageNumIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGENUM_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TYPE:
        if (value == null) {
          unsetType();
        } else {
          setType((Integer)value);
        }
        break;

      case PAGE_NUM:
        if (value == null) {
          unsetPageNum();
        } else {
          setPageNum((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TYPE:
        return getType();

      case PAGE_NUM:
        return getPageNum();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TYPE:
        return isSetType();
      case PAGE_NUM:
        return isSetPageNum();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof loadRequirement_args)
        return this.equals((loadRequirement_args)that);
      return false;
    }

    public boolean equals(loadRequirement_args that) {
      if (that == null)
        return false;

      boolean this_present_type = true;
      boolean that_present_type = true;
      if (this_present_type || that_present_type) {
        if (!(this_present_type && that_present_type))
          return false;
        if (this.type != that.type)
          return false;
      }

      boolean this_present_pageNum = true;
      boolean that_present_pageNum = true;
      if (this_present_pageNum || that_present_pageNum) {
        if (!(this_present_pageNum && that_present_pageNum))
          return false;
        if (this.pageNum != that.pageNum)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_type = true;
      list.add(present_type);
      if (present_type)
        list.add(type);

      boolean present_pageNum = true;
      list.add(present_pageNum);
      if (present_pageNum)
        list.add(pageNum);

      return list.hashCode();
    }

    @Override
    public int compareTo(loadRequirement_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPageNum()).compareTo(other.isSetPageNum());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageNum()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageNum, other.pageNum);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("loadRequirement_args(");
      boolean first = true;

      sb.append("type:");
      sb.append(this.type);
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageNum:");
      sb.append(this.pageNum);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class loadRequirement_argsStandardSchemeFactory implements SchemeFactory {
      public loadRequirement_argsStandardScheme getScheme() {
        return new loadRequirement_argsStandardScheme();
      }
    }

    private static class loadRequirement_argsStandardScheme extends StandardScheme<loadRequirement_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, loadRequirement_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.type = iprot.readI32();
                struct.setTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PAGE_NUM
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pageNum = iprot.readI32();
                struct.setPageNumIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, loadRequirement_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeI32(struct.type);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PAGE_NUM_FIELD_DESC);
        oprot.writeI32(struct.pageNum);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class loadRequirement_argsTupleSchemeFactory implements SchemeFactory {
      public loadRequirement_argsTupleScheme getScheme() {
        return new loadRequirement_argsTupleScheme();
      }
    }

    private static class loadRequirement_argsTupleScheme extends TupleScheme<loadRequirement_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, loadRequirement_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetType()) {
          optionals.set(0);
        }
        if (struct.isSetPageNum()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetType()) {
          oprot.writeI32(struct.type);
        }
        if (struct.isSetPageNum()) {
          oprot.writeI32(struct.pageNum);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, loadRequirement_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.type = iprot.readI32();
          struct.setTypeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.pageNum = iprot.readI32();
          struct.setPageNumIsSet(true);
        }
      }
    }

  }

  public static class loadRequirement_result implements org.apache.thrift.TBase<loadRequirement_result, loadRequirement_result._Fields>, java.io.Serializable, Cloneable, Comparable<loadRequirement_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("loadRequirement_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new loadRequirement_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new loadRequirement_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(loadRequirement_result.class, metaDataMap);
    }

    public loadRequirement_result() {
    }

    public loadRequirement_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public loadRequirement_result(loadRequirement_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public loadRequirement_result deepCopy() {
      return new loadRequirement_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public loadRequirement_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof loadRequirement_result)
        return this.equals((loadRequirement_result)that);
      return false;
    }

    public boolean equals(loadRequirement_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(loadRequirement_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("loadRequirement_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class loadRequirement_resultStandardSchemeFactory implements SchemeFactory {
      public loadRequirement_resultStandardScheme getScheme() {
        return new loadRequirement_resultStandardScheme();
      }
    }

    private static class loadRequirement_resultStandardScheme extends StandardScheme<loadRequirement_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, loadRequirement_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, loadRequirement_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class loadRequirement_resultTupleSchemeFactory implements SchemeFactory {
      public loadRequirement_resultTupleScheme getScheme() {
        return new loadRequirement_resultTupleScheme();
      }
    }

    private static class loadRequirement_resultTupleScheme extends TupleScheme<loadRequirement_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, loadRequirement_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, loadRequirement_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getRequirement_args implements org.apache.thrift.TBase<getRequirement_args, getRequirement_args._Fields>, java.io.Serializable, Cloneable, Comparable<getRequirement_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRequirement_args");

    private static final org.apache.thrift.protocol.TField RID_FIELD_DESC = new org.apache.thrift.protocol.TField("rid", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getRequirement_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getRequirement_argsTupleSchemeFactory());
    }

    public String rid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      RID((short)1, "rid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // RID
            return RID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.RID, new org.apache.thrift.meta_data.FieldMetaData("rid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRequirement_args.class, metaDataMap);
    }

    public getRequirement_args() {
    }

    public getRequirement_args(
      String rid)
    {
      this();
      this.rid = rid;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRequirement_args(getRequirement_args other) {
      if (other.isSetRid()) {
        this.rid = other.rid;
      }
    }

    public getRequirement_args deepCopy() {
      return new getRequirement_args(this);
    }

    @Override
    public void clear() {
      this.rid = null;
    }

    public String getRid() {
      return this.rid;
    }

    public getRequirement_args setRid(String rid) {
      this.rid = rid;
      return this;
    }

    public void unsetRid() {
      this.rid = null;
    }

    /** Returns true if field rid is set (has been assigned a value) and false otherwise */
    public boolean isSetRid() {
      return this.rid != null;
    }

    public void setRidIsSet(boolean value) {
      if (!value) {
        this.rid = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case RID:
        if (value == null) {
          unsetRid();
        } else {
          setRid((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case RID:
        return getRid();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case RID:
        return isSetRid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRequirement_args)
        return this.equals((getRequirement_args)that);
      return false;
    }

    public boolean equals(getRequirement_args that) {
      if (that == null)
        return false;

      boolean this_present_rid = true && this.isSetRid();
      boolean that_present_rid = true && that.isSetRid();
      if (this_present_rid || that_present_rid) {
        if (!(this_present_rid && that_present_rid))
          return false;
        if (!this.rid.equals(that.rid))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_rid = true && (isSetRid());
      list.add(present_rid);
      if (present_rid)
        list.add(rid);

      return list.hashCode();
    }

    @Override
    public int compareTo(getRequirement_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRid()).compareTo(other.isSetRid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rid, other.rid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getRequirement_args(");
      boolean first = true;

      sb.append("rid:");
      if (this.rid == null) {
        sb.append("null");
      } else {
        sb.append(this.rid);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRequirement_argsStandardSchemeFactory implements SchemeFactory {
      public getRequirement_argsStandardScheme getScheme() {
        return new getRequirement_argsStandardScheme();
      }
    }

    private static class getRequirement_argsStandardScheme extends StandardScheme<getRequirement_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRequirement_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // RID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.rid = iprot.readString();
                struct.setRidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRequirement_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.rid != null) {
          oprot.writeFieldBegin(RID_FIELD_DESC);
          oprot.writeString(struct.rid);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRequirement_argsTupleSchemeFactory implements SchemeFactory {
      public getRequirement_argsTupleScheme getScheme() {
        return new getRequirement_argsTupleScheme();
      }
    }

    private static class getRequirement_argsTupleScheme extends TupleScheme<getRequirement_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRequirement_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRid()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRid()) {
          oprot.writeString(struct.rid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRequirement_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.rid = iprot.readString();
          struct.setRidIsSet(true);
        }
      }
    }

  }

  public static class getRequirement_result implements org.apache.thrift.TBase<getRequirement_result, getRequirement_result._Fields>, java.io.Serializable, Cloneable, Comparable<getRequirement_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRequirement_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getRequirement_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getRequirement_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRequirement_result.class, metaDataMap);
    }

    public getRequirement_result() {
    }

    public getRequirement_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRequirement_result(getRequirement_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public getRequirement_result deepCopy() {
      return new getRequirement_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public getRequirement_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRequirement_result)
        return this.equals((getRequirement_result)that);
      return false;
    }

    public boolean equals(getRequirement_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getRequirement_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getRequirement_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRequirement_resultStandardSchemeFactory implements SchemeFactory {
      public getRequirement_resultStandardScheme getScheme() {
        return new getRequirement_resultStandardScheme();
      }
    }

    private static class getRequirement_resultStandardScheme extends StandardScheme<getRequirement_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRequirement_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRequirement_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRequirement_resultTupleSchemeFactory implements SchemeFactory {
      public getRequirement_resultTupleScheme getScheme() {
        return new getRequirement_resultTupleScheme();
      }
    }

    private static class getRequirement_resultTupleScheme extends TupleScheme<getRequirement_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRequirement_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRequirement_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class readRequirement_args implements org.apache.thrift.TBase<readRequirement_args, readRequirement_args._Fields>, java.io.Serializable, Cloneable, Comparable<readRequirement_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("readRequirement_args");

    private static final org.apache.thrift.protocol.TField RID_FIELD_DESC = new org.apache.thrift.protocol.TField("rid", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new readRequirement_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new readRequirement_argsTupleSchemeFactory());
    }

    public String rid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      RID((short)1, "rid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // RID
            return RID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.RID, new org.apache.thrift.meta_data.FieldMetaData("rid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(readRequirement_args.class, metaDataMap);
    }

    public readRequirement_args() {
    }

    public readRequirement_args(
      String rid)
    {
      this();
      this.rid = rid;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public readRequirement_args(readRequirement_args other) {
      if (other.isSetRid()) {
        this.rid = other.rid;
      }
    }

    public readRequirement_args deepCopy() {
      return new readRequirement_args(this);
    }

    @Override
    public void clear() {
      this.rid = null;
    }

    public String getRid() {
      return this.rid;
    }

    public readRequirement_args setRid(String rid) {
      this.rid = rid;
      return this;
    }

    public void unsetRid() {
      this.rid = null;
    }

    /** Returns true if field rid is set (has been assigned a value) and false otherwise */
    public boolean isSetRid() {
      return this.rid != null;
    }

    public void setRidIsSet(boolean value) {
      if (!value) {
        this.rid = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case RID:
        if (value == null) {
          unsetRid();
        } else {
          setRid((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case RID:
        return getRid();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case RID:
        return isSetRid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof readRequirement_args)
        return this.equals((readRequirement_args)that);
      return false;
    }

    public boolean equals(readRequirement_args that) {
      if (that == null)
        return false;

      boolean this_present_rid = true && this.isSetRid();
      boolean that_present_rid = true && that.isSetRid();
      if (this_present_rid || that_present_rid) {
        if (!(this_present_rid && that_present_rid))
          return false;
        if (!this.rid.equals(that.rid))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_rid = true && (isSetRid());
      list.add(present_rid);
      if (present_rid)
        list.add(rid);

      return list.hashCode();
    }

    @Override
    public int compareTo(readRequirement_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRid()).compareTo(other.isSetRid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rid, other.rid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("readRequirement_args(");
      boolean first = true;

      sb.append("rid:");
      if (this.rid == null) {
        sb.append("null");
      } else {
        sb.append(this.rid);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class readRequirement_argsStandardSchemeFactory implements SchemeFactory {
      public readRequirement_argsStandardScheme getScheme() {
        return new readRequirement_argsStandardScheme();
      }
    }

    private static class readRequirement_argsStandardScheme extends StandardScheme<readRequirement_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, readRequirement_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // RID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.rid = iprot.readString();
                struct.setRidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, readRequirement_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.rid != null) {
          oprot.writeFieldBegin(RID_FIELD_DESC);
          oprot.writeString(struct.rid);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class readRequirement_argsTupleSchemeFactory implements SchemeFactory {
      public readRequirement_argsTupleScheme getScheme() {
        return new readRequirement_argsTupleScheme();
      }
    }

    private static class readRequirement_argsTupleScheme extends TupleScheme<readRequirement_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, readRequirement_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRid()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRid()) {
          oprot.writeString(struct.rid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, readRequirement_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.rid = iprot.readString();
          struct.setRidIsSet(true);
        }
      }
    }

  }

  public static class readRequirement_result implements org.apache.thrift.TBase<readRequirement_result, readRequirement_result._Fields>, java.io.Serializable, Cloneable, Comparable<readRequirement_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("readRequirement_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new readRequirement_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new readRequirement_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(readRequirement_result.class, metaDataMap);
    }

    public readRequirement_result() {
    }

    public readRequirement_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public readRequirement_result(readRequirement_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public readRequirement_result deepCopy() {
      return new readRequirement_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public readRequirement_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof readRequirement_result)
        return this.equals((readRequirement_result)that);
      return false;
    }

    public boolean equals(readRequirement_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(readRequirement_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("readRequirement_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class readRequirement_resultStandardSchemeFactory implements SchemeFactory {
      public readRequirement_resultStandardScheme getScheme() {
        return new readRequirement_resultStandardScheme();
      }
    }

    private static class readRequirement_resultStandardScheme extends StandardScheme<readRequirement_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, readRequirement_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, readRequirement_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class readRequirement_resultTupleSchemeFactory implements SchemeFactory {
      public readRequirement_resultTupleScheme getScheme() {
        return new readRequirement_resultTupleScheme();
      }
    }

    private static class readRequirement_resultTupleScheme extends TupleScheme<readRequirement_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, readRequirement_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, readRequirement_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class loadReplies_args implements org.apache.thrift.TBase<loadReplies_args, loadReplies_args._Fields>, java.io.Serializable, Cloneable, Comparable<loadReplies_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("loadReplies_args");

    private static final org.apache.thrift.protocol.TField RID_FIELD_DESC = new org.apache.thrift.protocol.TField("rid", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PAGE_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("pageNum", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new loadReplies_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new loadReplies_argsTupleSchemeFactory());
    }

    public String rid; // required
    public int pageNum; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      RID((short)1, "rid"),
      PAGE_NUM((short)2, "pageNum");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // RID
            return RID;
          case 2: // PAGE_NUM
            return PAGE_NUM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PAGENUM_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.RID, new org.apache.thrift.meta_data.FieldMetaData("rid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PAGE_NUM, new org.apache.thrift.meta_data.FieldMetaData("pageNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(loadReplies_args.class, metaDataMap);
    }

    public loadReplies_args() {
    }

    public loadReplies_args(
      String rid,
      int pageNum)
    {
      this();
      this.rid = rid;
      this.pageNum = pageNum;
      setPageNumIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public loadReplies_args(loadReplies_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetRid()) {
        this.rid = other.rid;
      }
      this.pageNum = other.pageNum;
    }

    public loadReplies_args deepCopy() {
      return new loadReplies_args(this);
    }

    @Override
    public void clear() {
      this.rid = null;
      setPageNumIsSet(false);
      this.pageNum = 0;
    }

    public String getRid() {
      return this.rid;
    }

    public loadReplies_args setRid(String rid) {
      this.rid = rid;
      return this;
    }

    public void unsetRid() {
      this.rid = null;
    }

    /** Returns true if field rid is set (has been assigned a value) and false otherwise */
    public boolean isSetRid() {
      return this.rid != null;
    }

    public void setRidIsSet(boolean value) {
      if (!value) {
        this.rid = null;
      }
    }

    public int getPageNum() {
      return this.pageNum;
    }

    public loadReplies_args setPageNum(int pageNum) {
      this.pageNum = pageNum;
      setPageNumIsSet(true);
      return this;
    }

    public void unsetPageNum() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGENUM_ISSET_ID);
    }

    /** Returns true if field pageNum is set (has been assigned a value) and false otherwise */
    public boolean isSetPageNum() {
      return EncodingUtils.testBit(__isset_bitfield, __PAGENUM_ISSET_ID);
    }

    public void setPageNumIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGENUM_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case RID:
        if (value == null) {
          unsetRid();
        } else {
          setRid((String)value);
        }
        break;

      case PAGE_NUM:
        if (value == null) {
          unsetPageNum();
        } else {
          setPageNum((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case RID:
        return getRid();

      case PAGE_NUM:
        return getPageNum();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case RID:
        return isSetRid();
      case PAGE_NUM:
        return isSetPageNum();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof loadReplies_args)
        return this.equals((loadReplies_args)that);
      return false;
    }

    public boolean equals(loadReplies_args that) {
      if (that == null)
        return false;

      boolean this_present_rid = true && this.isSetRid();
      boolean that_present_rid = true && that.isSetRid();
      if (this_present_rid || that_present_rid) {
        if (!(this_present_rid && that_present_rid))
          return false;
        if (!this.rid.equals(that.rid))
          return false;
      }

      boolean this_present_pageNum = true;
      boolean that_present_pageNum = true;
      if (this_present_pageNum || that_present_pageNum) {
        if (!(this_present_pageNum && that_present_pageNum))
          return false;
        if (this.pageNum != that.pageNum)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_rid = true && (isSetRid());
      list.add(present_rid);
      if (present_rid)
        list.add(rid);

      boolean present_pageNum = true;
      list.add(present_pageNum);
      if (present_pageNum)
        list.add(pageNum);

      return list.hashCode();
    }

    @Override
    public int compareTo(loadReplies_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRid()).compareTo(other.isSetRid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rid, other.rid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPageNum()).compareTo(other.isSetPageNum());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageNum()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageNum, other.pageNum);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("loadReplies_args(");
      boolean first = true;

      sb.append("rid:");
      if (this.rid == null) {
        sb.append("null");
      } else {
        sb.append(this.rid);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageNum:");
      sb.append(this.pageNum);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class loadReplies_argsStandardSchemeFactory implements SchemeFactory {
      public loadReplies_argsStandardScheme getScheme() {
        return new loadReplies_argsStandardScheme();
      }
    }

    private static class loadReplies_argsStandardScheme extends StandardScheme<loadReplies_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, loadReplies_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // RID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.rid = iprot.readString();
                struct.setRidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PAGE_NUM
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pageNum = iprot.readI32();
                struct.setPageNumIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, loadReplies_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.rid != null) {
          oprot.writeFieldBegin(RID_FIELD_DESC);
          oprot.writeString(struct.rid);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PAGE_NUM_FIELD_DESC);
        oprot.writeI32(struct.pageNum);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class loadReplies_argsTupleSchemeFactory implements SchemeFactory {
      public loadReplies_argsTupleScheme getScheme() {
        return new loadReplies_argsTupleScheme();
      }
    }

    private static class loadReplies_argsTupleScheme extends TupleScheme<loadReplies_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, loadReplies_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRid()) {
          optionals.set(0);
        }
        if (struct.isSetPageNum()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetRid()) {
          oprot.writeString(struct.rid);
        }
        if (struct.isSetPageNum()) {
          oprot.writeI32(struct.pageNum);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, loadReplies_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.rid = iprot.readString();
          struct.setRidIsSet(true);
        }
        if (incoming.get(1)) {
          struct.pageNum = iprot.readI32();
          struct.setPageNumIsSet(true);
        }
      }
    }

  }

  public static class loadReplies_result implements org.apache.thrift.TBase<loadReplies_result, loadReplies_result._Fields>, java.io.Serializable, Cloneable, Comparable<loadReplies_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("loadReplies_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new loadReplies_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new loadReplies_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(loadReplies_result.class, metaDataMap);
    }

    public loadReplies_result() {
    }

    public loadReplies_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public loadReplies_result(loadReplies_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public loadReplies_result deepCopy() {
      return new loadReplies_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public loadReplies_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof loadReplies_result)
        return this.equals((loadReplies_result)that);
      return false;
    }

    public boolean equals(loadReplies_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(loadReplies_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("loadReplies_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class loadReplies_resultStandardSchemeFactory implements SchemeFactory {
      public loadReplies_resultStandardScheme getScheme() {
        return new loadReplies_resultStandardScheme();
      }
    }

    private static class loadReplies_resultStandardScheme extends StandardScheme<loadReplies_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, loadReplies_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, loadReplies_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class loadReplies_resultTupleSchemeFactory implements SchemeFactory {
      public loadReplies_resultTupleScheme getScheme() {
        return new loadReplies_resultTupleScheme();
      }
    }

    private static class loadReplies_resultTupleScheme extends TupleScheme<loadReplies_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, loadReplies_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, loadReplies_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class loadRequirementByCategoryId_args implements org.apache.thrift.TBase<loadRequirementByCategoryId_args, loadRequirementByCategoryId_args._Fields>, java.io.Serializable, Cloneable, Comparable<loadRequirementByCategoryId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("loadRequirementByCategoryId_args");

    private static final org.apache.thrift.protocol.TField CATEGORY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("categoryId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PAGE_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("pageNum", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new loadRequirementByCategoryId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new loadRequirementByCategoryId_argsTupleSchemeFactory());
    }

    public String categoryId; // required
    public int pageNum; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CATEGORY_ID((short)1, "categoryId"),
      PAGE_NUM((short)2, "pageNum");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CATEGORY_ID
            return CATEGORY_ID;
          case 2: // PAGE_NUM
            return PAGE_NUM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PAGENUM_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CATEGORY_ID, new org.apache.thrift.meta_data.FieldMetaData("categoryId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PAGE_NUM, new org.apache.thrift.meta_data.FieldMetaData("pageNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(loadRequirementByCategoryId_args.class, metaDataMap);
    }

    public loadRequirementByCategoryId_args() {
    }

    public loadRequirementByCategoryId_args(
      String categoryId,
      int pageNum)
    {
      this();
      this.categoryId = categoryId;
      this.pageNum = pageNum;
      setPageNumIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public loadRequirementByCategoryId_args(loadRequirementByCategoryId_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetCategoryId()) {
        this.categoryId = other.categoryId;
      }
      this.pageNum = other.pageNum;
    }

    public loadRequirementByCategoryId_args deepCopy() {
      return new loadRequirementByCategoryId_args(this);
    }

    @Override
    public void clear() {
      this.categoryId = null;
      setPageNumIsSet(false);
      this.pageNum = 0;
    }

    public String getCategoryId() {
      return this.categoryId;
    }

    public loadRequirementByCategoryId_args setCategoryId(String categoryId) {
      this.categoryId = categoryId;
      return this;
    }

    public void unsetCategoryId() {
      this.categoryId = null;
    }

    /** Returns true if field categoryId is set (has been assigned a value) and false otherwise */
    public boolean isSetCategoryId() {
      return this.categoryId != null;
    }

    public void setCategoryIdIsSet(boolean value) {
      if (!value) {
        this.categoryId = null;
      }
    }

    public int getPageNum() {
      return this.pageNum;
    }

    public loadRequirementByCategoryId_args setPageNum(int pageNum) {
      this.pageNum = pageNum;
      setPageNumIsSet(true);
      return this;
    }

    public void unsetPageNum() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGENUM_ISSET_ID);
    }

    /** Returns true if field pageNum is set (has been assigned a value) and false otherwise */
    public boolean isSetPageNum() {
      return EncodingUtils.testBit(__isset_bitfield, __PAGENUM_ISSET_ID);
    }

    public void setPageNumIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGENUM_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CATEGORY_ID:
        if (value == null) {
          unsetCategoryId();
        } else {
          setCategoryId((String)value);
        }
        break;

      case PAGE_NUM:
        if (value == null) {
          unsetPageNum();
        } else {
          setPageNum((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CATEGORY_ID:
        return getCategoryId();

      case PAGE_NUM:
        return getPageNum();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CATEGORY_ID:
        return isSetCategoryId();
      case PAGE_NUM:
        return isSetPageNum();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof loadRequirementByCategoryId_args)
        return this.equals((loadRequirementByCategoryId_args)that);
      return false;
    }

    public boolean equals(loadRequirementByCategoryId_args that) {
      if (that == null)
        return false;

      boolean this_present_categoryId = true && this.isSetCategoryId();
      boolean that_present_categoryId = true && that.isSetCategoryId();
      if (this_present_categoryId || that_present_categoryId) {
        if (!(this_present_categoryId && that_present_categoryId))
          return false;
        if (!this.categoryId.equals(that.categoryId))
          return false;
      }

      boolean this_present_pageNum = true;
      boolean that_present_pageNum = true;
      if (this_present_pageNum || that_present_pageNum) {
        if (!(this_present_pageNum && that_present_pageNum))
          return false;
        if (this.pageNum != that.pageNum)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_categoryId = true && (isSetCategoryId());
      list.add(present_categoryId);
      if (present_categoryId)
        list.add(categoryId);

      boolean present_pageNum = true;
      list.add(present_pageNum);
      if (present_pageNum)
        list.add(pageNum);

      return list.hashCode();
    }

    @Override
    public int compareTo(loadRequirementByCategoryId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCategoryId()).compareTo(other.isSetCategoryId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCategoryId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.categoryId, other.categoryId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPageNum()).compareTo(other.isSetPageNum());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageNum()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageNum, other.pageNum);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("loadRequirementByCategoryId_args(");
      boolean first = true;

      sb.append("categoryId:");
      if (this.categoryId == null) {
        sb.append("null");
      } else {
        sb.append(this.categoryId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageNum:");
      sb.append(this.pageNum);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class loadRequirementByCategoryId_argsStandardSchemeFactory implements SchemeFactory {
      public loadRequirementByCategoryId_argsStandardScheme getScheme() {
        return new loadRequirementByCategoryId_argsStandardScheme();
      }
    }

    private static class loadRequirementByCategoryId_argsStandardScheme extends StandardScheme<loadRequirementByCategoryId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, loadRequirementByCategoryId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CATEGORY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.categoryId = iprot.readString();
                struct.setCategoryIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PAGE_NUM
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pageNum = iprot.readI32();
                struct.setPageNumIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, loadRequirementByCategoryId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.categoryId != null) {
          oprot.writeFieldBegin(CATEGORY_ID_FIELD_DESC);
          oprot.writeString(struct.categoryId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PAGE_NUM_FIELD_DESC);
        oprot.writeI32(struct.pageNum);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class loadRequirementByCategoryId_argsTupleSchemeFactory implements SchemeFactory {
      public loadRequirementByCategoryId_argsTupleScheme getScheme() {
        return new loadRequirementByCategoryId_argsTupleScheme();
      }
    }

    private static class loadRequirementByCategoryId_argsTupleScheme extends TupleScheme<loadRequirementByCategoryId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, loadRequirementByCategoryId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCategoryId()) {
          optionals.set(0);
        }
        if (struct.isSetPageNum()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetCategoryId()) {
          oprot.writeString(struct.categoryId);
        }
        if (struct.isSetPageNum()) {
          oprot.writeI32(struct.pageNum);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, loadRequirementByCategoryId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.categoryId = iprot.readString();
          struct.setCategoryIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.pageNum = iprot.readI32();
          struct.setPageNumIsSet(true);
        }
      }
    }

  }

  public static class loadRequirementByCategoryId_result implements org.apache.thrift.TBase<loadRequirementByCategoryId_result, loadRequirementByCategoryId_result._Fields>, java.io.Serializable, Cloneable, Comparable<loadRequirementByCategoryId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("loadRequirementByCategoryId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new loadRequirementByCategoryId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new loadRequirementByCategoryId_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(loadRequirementByCategoryId_result.class, metaDataMap);
    }

    public loadRequirementByCategoryId_result() {
    }

    public loadRequirementByCategoryId_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public loadRequirementByCategoryId_result(loadRequirementByCategoryId_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public loadRequirementByCategoryId_result deepCopy() {
      return new loadRequirementByCategoryId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public loadRequirementByCategoryId_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof loadRequirementByCategoryId_result)
        return this.equals((loadRequirementByCategoryId_result)that);
      return false;
    }

    public boolean equals(loadRequirementByCategoryId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(loadRequirementByCategoryId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("loadRequirementByCategoryId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class loadRequirementByCategoryId_resultStandardSchemeFactory implements SchemeFactory {
      public loadRequirementByCategoryId_resultStandardScheme getScheme() {
        return new loadRequirementByCategoryId_resultStandardScheme();
      }
    }

    private static class loadRequirementByCategoryId_resultStandardScheme extends StandardScheme<loadRequirementByCategoryId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, loadRequirementByCategoryId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, loadRequirementByCategoryId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class loadRequirementByCategoryId_resultTupleSchemeFactory implements SchemeFactory {
      public loadRequirementByCategoryId_resultTupleScheme getScheme() {
        return new loadRequirementByCategoryId_resultTupleScheme();
      }
    }

    private static class loadRequirementByCategoryId_resultTupleScheme extends TupleScheme<loadRequirementByCategoryId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, loadRequirementByCategoryId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, loadRequirementByCategoryId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getRequirementCount_args implements org.apache.thrift.TBase<getRequirementCount_args, getRequirementCount_args._Fields>, java.io.Serializable, Cloneable, Comparable<getRequirementCount_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRequirementCount_args");

    private static final org.apache.thrift.protocol.TField CATEGORY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("categoryId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getRequirementCount_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getRequirementCount_argsTupleSchemeFactory());
    }

    public String categoryId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CATEGORY_ID((short)1, "categoryId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CATEGORY_ID
            return CATEGORY_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CATEGORY_ID, new org.apache.thrift.meta_data.FieldMetaData("categoryId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRequirementCount_args.class, metaDataMap);
    }

    public getRequirementCount_args() {
    }

    public getRequirementCount_args(
      String categoryId)
    {
      this();
      this.categoryId = categoryId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRequirementCount_args(getRequirementCount_args other) {
      if (other.isSetCategoryId()) {
        this.categoryId = other.categoryId;
      }
    }

    public getRequirementCount_args deepCopy() {
      return new getRequirementCount_args(this);
    }

    @Override
    public void clear() {
      this.categoryId = null;
    }

    public String getCategoryId() {
      return this.categoryId;
    }

    public getRequirementCount_args setCategoryId(String categoryId) {
      this.categoryId = categoryId;
      return this;
    }

    public void unsetCategoryId() {
      this.categoryId = null;
    }

    /** Returns true if field categoryId is set (has been assigned a value) and false otherwise */
    public boolean isSetCategoryId() {
      return this.categoryId != null;
    }

    public void setCategoryIdIsSet(boolean value) {
      if (!value) {
        this.categoryId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CATEGORY_ID:
        if (value == null) {
          unsetCategoryId();
        } else {
          setCategoryId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CATEGORY_ID:
        return getCategoryId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CATEGORY_ID:
        return isSetCategoryId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRequirementCount_args)
        return this.equals((getRequirementCount_args)that);
      return false;
    }

    public boolean equals(getRequirementCount_args that) {
      if (that == null)
        return false;

      boolean this_present_categoryId = true && this.isSetCategoryId();
      boolean that_present_categoryId = true && that.isSetCategoryId();
      if (this_present_categoryId || that_present_categoryId) {
        if (!(this_present_categoryId && that_present_categoryId))
          return false;
        if (!this.categoryId.equals(that.categoryId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_categoryId = true && (isSetCategoryId());
      list.add(present_categoryId);
      if (present_categoryId)
        list.add(categoryId);

      return list.hashCode();
    }

    @Override
    public int compareTo(getRequirementCount_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCategoryId()).compareTo(other.isSetCategoryId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCategoryId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.categoryId, other.categoryId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getRequirementCount_args(");
      boolean first = true;

      sb.append("categoryId:");
      if (this.categoryId == null) {
        sb.append("null");
      } else {
        sb.append(this.categoryId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRequirementCount_argsStandardSchemeFactory implements SchemeFactory {
      public getRequirementCount_argsStandardScheme getScheme() {
        return new getRequirementCount_argsStandardScheme();
      }
    }

    private static class getRequirementCount_argsStandardScheme extends StandardScheme<getRequirementCount_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRequirementCount_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CATEGORY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.categoryId = iprot.readString();
                struct.setCategoryIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRequirementCount_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.categoryId != null) {
          oprot.writeFieldBegin(CATEGORY_ID_FIELD_DESC);
          oprot.writeString(struct.categoryId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRequirementCount_argsTupleSchemeFactory implements SchemeFactory {
      public getRequirementCount_argsTupleScheme getScheme() {
        return new getRequirementCount_argsTupleScheme();
      }
    }

    private static class getRequirementCount_argsTupleScheme extends TupleScheme<getRequirementCount_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRequirementCount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCategoryId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCategoryId()) {
          oprot.writeString(struct.categoryId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRequirementCount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.categoryId = iprot.readString();
          struct.setCategoryIdIsSet(true);
        }
      }
    }

  }

  public static class getRequirementCount_result implements org.apache.thrift.TBase<getRequirementCount_result, getRequirementCount_result._Fields>, java.io.Serializable, Cloneable, Comparable<getRequirementCount_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRequirementCount_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getRequirementCount_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getRequirementCount_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRequirementCount_result.class, metaDataMap);
    }

    public getRequirementCount_result() {
    }

    public getRequirementCount_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRequirementCount_result(getRequirementCount_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public getRequirementCount_result deepCopy() {
      return new getRequirementCount_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public getRequirementCount_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRequirementCount_result)
        return this.equals((getRequirementCount_result)that);
      return false;
    }

    public boolean equals(getRequirementCount_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getRequirementCount_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getRequirementCount_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRequirementCount_resultStandardSchemeFactory implements SchemeFactory {
      public getRequirementCount_resultStandardScheme getScheme() {
        return new getRequirementCount_resultStandardScheme();
      }
    }

    private static class getRequirementCount_resultStandardScheme extends StandardScheme<getRequirementCount_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRequirementCount_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRequirementCount_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRequirementCount_resultTupleSchemeFactory implements SchemeFactory {
      public getRequirementCount_resultTupleScheme getScheme() {
        return new getRequirementCount_resultTupleScheme();
      }
    }

    private static class getRequirementCount_resultTupleScheme extends TupleScheme<getRequirementCount_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRequirementCount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRequirementCount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
