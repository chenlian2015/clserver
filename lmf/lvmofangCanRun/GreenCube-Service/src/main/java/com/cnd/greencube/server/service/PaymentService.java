/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cnd.greencube.server.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-03-25")
public class PaymentService {

  /**
   * 支付记录服务
   * @author 胡晓光
   */
  public interface Iface {

    /**
     * 返回所有可用的支付方式
     * 
     * @param clientType
     */
    public String loadAvaliablePaymentMethod(String clientType) throws org.apache.thrift.TException;

    /**
     * 取得一个支付方式
     * 
     * @param paymentMethodId
     * @return
     * 
     * @param paymentMethodId
     */
    public String getPaymentMethod(String paymentMethodId) throws org.apache.thrift.TException;

    /**
     * 保存支付方式
     * 
     * @return
     * 
     * @param paymentMethod
     */
    public String savePaymentMethod(String paymentMethod) throws org.apache.thrift.TException;

    /**
     * 更新支付方式
     * 
     * @param paymentMethod
     * 
     * @param paymentMethod
     */
    public String updatePaymentMethod(String paymentMethod) throws org.apache.thrift.TException;

    /**
     * 返回所有可用的支付方式
     * 
     * @param paymentMethodId
     */
    public String enablePaymentMethod(String paymentMethodId) throws org.apache.thrift.TException;

    /**
     * 返回所有可用的支付方式
     * 
     * @param paymentMethodId
     */
    public String disablePaymentMethod(String paymentMethodId) throws org.apache.thrift.TException;

    /**
     * 更新支付方式
     * 
     * @param paymentMethod
     * 
     * @param paymentMethodId
     */
    public String deletePaymentMethod(String paymentMethodId) throws org.apache.thrift.TException;

    /**
     * 确认支付
     * @param orderid -- 订单id
     * @return 返回订单详情及可选择的支付方式列表
     * 
     * @param orderid
     */
    public String confirm(String orderid) throws org.apache.thrift.TException;

    /**
     * 获取charge对象
     * @param paymentSubject -- 支付科目
     * @param paymentMethod -- 支付渠道
     * @param type -- 费用科目
     * @param amount -- 支付金额
     * @return 返回确认订单的相关信息
     * 
     * @param paymentSubject
     * @param paymentMethod
     * @param type
     * @param token
     * @param fee
     * @param __remoteAddr
     * @param subject
     * @param body
     * @param description
     */
    public String checkout(String paymentSubject, String paymentMethod, int type, String token, String fee, String __remoteAddr, String subject, String body, String description) throws org.apache.thrift.TException;

    /**
     * 账户余额支付
     * @param paymentSubject -- 支付科目
     * @param paymentMethod -- 支付渠道
     * @param type -- 费用科目
     * @param amount -- 支付金额
     * @return 返回确认订单的相关信息
     * 
     * @param charge
     * @param password
     */
    public String directPay(String charge, String password) throws org.apache.thrift.TException;

    /**
     * 完成一笔支付
     * @paymentId -- 支付id
     * 
     * @param paymentId
     */
    public String finishPayment(String paymentId) throws org.apache.thrift.TException;

    /**
     * 取消一笔支付
     * @paymentId -- 支付id
     * 
     * @param paymentId
     */
    public String cancelPayment(String paymentId) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void loadAvaliablePaymentMethod(String clientType, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getPaymentMethod(String paymentMethodId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void savePaymentMethod(String paymentMethod, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updatePaymentMethod(String paymentMethod, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void enablePaymentMethod(String paymentMethodId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void disablePaymentMethod(String paymentMethodId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void deletePaymentMethod(String paymentMethodId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void confirm(String orderid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void checkout(String paymentSubject, String paymentMethod, int type, String token, String fee, String __remoteAddr, String subject, String body, String description, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void directPay(String charge, String password, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void finishPayment(String paymentId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void cancelPayment(String paymentId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public String loadAvaliablePaymentMethod(String clientType) throws org.apache.thrift.TException
    {
      send_loadAvaliablePaymentMethod(clientType);
      return recv_loadAvaliablePaymentMethod();
    }

    public void send_loadAvaliablePaymentMethod(String clientType) throws org.apache.thrift.TException
    {
      loadAvaliablePaymentMethod_args args = new loadAvaliablePaymentMethod_args();
      args.setClientType(clientType);
      sendBase("loadAvaliablePaymentMethod", args);
    }

    public String recv_loadAvaliablePaymentMethod() throws org.apache.thrift.TException
    {
      loadAvaliablePaymentMethod_result result = new loadAvaliablePaymentMethod_result();
      receiveBase(result, "loadAvaliablePaymentMethod");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "loadAvaliablePaymentMethod failed: unknown result");
    }

    public String getPaymentMethod(String paymentMethodId) throws org.apache.thrift.TException
    {
      send_getPaymentMethod(paymentMethodId);
      return recv_getPaymentMethod();
    }

    public void send_getPaymentMethod(String paymentMethodId) throws org.apache.thrift.TException
    {
      getPaymentMethod_args args = new getPaymentMethod_args();
      args.setPaymentMethodId(paymentMethodId);
      sendBase("getPaymentMethod", args);
    }

    public String recv_getPaymentMethod() throws org.apache.thrift.TException
    {
      getPaymentMethod_result result = new getPaymentMethod_result();
      receiveBase(result, "getPaymentMethod");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getPaymentMethod failed: unknown result");
    }

    public String savePaymentMethod(String paymentMethod) throws org.apache.thrift.TException
    {
      send_savePaymentMethod(paymentMethod);
      return recv_savePaymentMethod();
    }

    public void send_savePaymentMethod(String paymentMethod) throws org.apache.thrift.TException
    {
      savePaymentMethod_args args = new savePaymentMethod_args();
      args.setPaymentMethod(paymentMethod);
      sendBase("savePaymentMethod", args);
    }

    public String recv_savePaymentMethod() throws org.apache.thrift.TException
    {
      savePaymentMethod_result result = new savePaymentMethod_result();
      receiveBase(result, "savePaymentMethod");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "savePaymentMethod failed: unknown result");
    }

    public String updatePaymentMethod(String paymentMethod) throws org.apache.thrift.TException
    {
      send_updatePaymentMethod(paymentMethod);
      return recv_updatePaymentMethod();
    }

    public void send_updatePaymentMethod(String paymentMethod) throws org.apache.thrift.TException
    {
      updatePaymentMethod_args args = new updatePaymentMethod_args();
      args.setPaymentMethod(paymentMethod);
      sendBase("updatePaymentMethod", args);
    }

    public String recv_updatePaymentMethod() throws org.apache.thrift.TException
    {
      updatePaymentMethod_result result = new updatePaymentMethod_result();
      receiveBase(result, "updatePaymentMethod");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updatePaymentMethod failed: unknown result");
    }

    public String enablePaymentMethod(String paymentMethodId) throws org.apache.thrift.TException
    {
      send_enablePaymentMethod(paymentMethodId);
      return recv_enablePaymentMethod();
    }

    public void send_enablePaymentMethod(String paymentMethodId) throws org.apache.thrift.TException
    {
      enablePaymentMethod_args args = new enablePaymentMethod_args();
      args.setPaymentMethodId(paymentMethodId);
      sendBase("enablePaymentMethod", args);
    }

    public String recv_enablePaymentMethod() throws org.apache.thrift.TException
    {
      enablePaymentMethod_result result = new enablePaymentMethod_result();
      receiveBase(result, "enablePaymentMethod");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "enablePaymentMethod failed: unknown result");
    }

    public String disablePaymentMethod(String paymentMethodId) throws org.apache.thrift.TException
    {
      send_disablePaymentMethod(paymentMethodId);
      return recv_disablePaymentMethod();
    }

    public void send_disablePaymentMethod(String paymentMethodId) throws org.apache.thrift.TException
    {
      disablePaymentMethod_args args = new disablePaymentMethod_args();
      args.setPaymentMethodId(paymentMethodId);
      sendBase("disablePaymentMethod", args);
    }

    public String recv_disablePaymentMethod() throws org.apache.thrift.TException
    {
      disablePaymentMethod_result result = new disablePaymentMethod_result();
      receiveBase(result, "disablePaymentMethod");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "disablePaymentMethod failed: unknown result");
    }

    public String deletePaymentMethod(String paymentMethodId) throws org.apache.thrift.TException
    {
      send_deletePaymentMethod(paymentMethodId);
      return recv_deletePaymentMethod();
    }

    public void send_deletePaymentMethod(String paymentMethodId) throws org.apache.thrift.TException
    {
      deletePaymentMethod_args args = new deletePaymentMethod_args();
      args.setPaymentMethodId(paymentMethodId);
      sendBase("deletePaymentMethod", args);
    }

    public String recv_deletePaymentMethod() throws org.apache.thrift.TException
    {
      deletePaymentMethod_result result = new deletePaymentMethod_result();
      receiveBase(result, "deletePaymentMethod");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deletePaymentMethod failed: unknown result");
    }

    public String confirm(String orderid) throws org.apache.thrift.TException
    {
      send_confirm(orderid);
      return recv_confirm();
    }

    public void send_confirm(String orderid) throws org.apache.thrift.TException
    {
      confirm_args args = new confirm_args();
      args.setOrderid(orderid);
      sendBase("confirm", args);
    }

    public String recv_confirm() throws org.apache.thrift.TException
    {
      confirm_result result = new confirm_result();
      receiveBase(result, "confirm");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "confirm failed: unknown result");
    }

    public String checkout(String paymentSubject, String paymentMethod, int type, String token, String fee, String __remoteAddr, String subject, String body, String description) throws org.apache.thrift.TException
    {
      send_checkout(paymentSubject, paymentMethod, type, token, fee, __remoteAddr, subject, body, description);
      return recv_checkout();
    }

    public void send_checkout(String paymentSubject, String paymentMethod, int type, String token, String fee, String __remoteAddr, String subject, String body, String description) throws org.apache.thrift.TException
    {
      checkout_args args = new checkout_args();
      args.setPaymentSubject(paymentSubject);
      args.setPaymentMethod(paymentMethod);
      args.setType(type);
      args.setToken(token);
      args.setFee(fee);
      args.set__remoteAddr(__remoteAddr);
      args.setSubject(subject);
      args.setBody(body);
      args.setDescription(description);
      sendBase("checkout", args);
    }

    public String recv_checkout() throws org.apache.thrift.TException
    {
      checkout_result result = new checkout_result();
      receiveBase(result, "checkout");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "checkout failed: unknown result");
    }

    public String directPay(String charge, String password) throws org.apache.thrift.TException
    {
      send_directPay(charge, password);
      return recv_directPay();
    }

    public void send_directPay(String charge, String password) throws org.apache.thrift.TException
    {
      directPay_args args = new directPay_args();
      args.setCharge(charge);
      args.setPassword(password);
      sendBase("directPay", args);
    }

    public String recv_directPay() throws org.apache.thrift.TException
    {
      directPay_result result = new directPay_result();
      receiveBase(result, "directPay");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "directPay failed: unknown result");
    }

    public String finishPayment(String paymentId) throws org.apache.thrift.TException
    {
      send_finishPayment(paymentId);
      return recv_finishPayment();
    }

    public void send_finishPayment(String paymentId) throws org.apache.thrift.TException
    {
      finishPayment_args args = new finishPayment_args();
      args.setPaymentId(paymentId);
      sendBase("finishPayment", args);
    }

    public String recv_finishPayment() throws org.apache.thrift.TException
    {
      finishPayment_result result = new finishPayment_result();
      receiveBase(result, "finishPayment");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "finishPayment failed: unknown result");
    }

    public String cancelPayment(String paymentId) throws org.apache.thrift.TException
    {
      send_cancelPayment(paymentId);
      return recv_cancelPayment();
    }

    public void send_cancelPayment(String paymentId) throws org.apache.thrift.TException
    {
      cancelPayment_args args = new cancelPayment_args();
      args.setPaymentId(paymentId);
      sendBase("cancelPayment", args);
    }

    public String recv_cancelPayment() throws org.apache.thrift.TException
    {
      cancelPayment_result result = new cancelPayment_result();
      receiveBase(result, "cancelPayment");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "cancelPayment failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void loadAvaliablePaymentMethod(String clientType, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      loadAvaliablePaymentMethod_call method_call = new loadAvaliablePaymentMethod_call(clientType, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class loadAvaliablePaymentMethod_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String clientType;
      public loadAvaliablePaymentMethod_call(String clientType, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.clientType = clientType;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("loadAvaliablePaymentMethod", org.apache.thrift.protocol.TMessageType.CALL, 0));
        loadAvaliablePaymentMethod_args args = new loadAvaliablePaymentMethod_args();
        args.setClientType(clientType);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_loadAvaliablePaymentMethod();
      }
    }

    public void getPaymentMethod(String paymentMethodId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getPaymentMethod_call method_call = new getPaymentMethod_call(paymentMethodId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getPaymentMethod_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String paymentMethodId;
      public getPaymentMethod_call(String paymentMethodId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.paymentMethodId = paymentMethodId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getPaymentMethod", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getPaymentMethod_args args = new getPaymentMethod_args();
        args.setPaymentMethodId(paymentMethodId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getPaymentMethod();
      }
    }

    public void savePaymentMethod(String paymentMethod, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      savePaymentMethod_call method_call = new savePaymentMethod_call(paymentMethod, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class savePaymentMethod_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String paymentMethod;
      public savePaymentMethod_call(String paymentMethod, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.paymentMethod = paymentMethod;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("savePaymentMethod", org.apache.thrift.protocol.TMessageType.CALL, 0));
        savePaymentMethod_args args = new savePaymentMethod_args();
        args.setPaymentMethod(paymentMethod);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_savePaymentMethod();
      }
    }

    public void updatePaymentMethod(String paymentMethod, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updatePaymentMethod_call method_call = new updatePaymentMethod_call(paymentMethod, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updatePaymentMethod_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String paymentMethod;
      public updatePaymentMethod_call(String paymentMethod, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.paymentMethod = paymentMethod;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updatePaymentMethod", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updatePaymentMethod_args args = new updatePaymentMethod_args();
        args.setPaymentMethod(paymentMethod);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updatePaymentMethod();
      }
    }

    public void enablePaymentMethod(String paymentMethodId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      enablePaymentMethod_call method_call = new enablePaymentMethod_call(paymentMethodId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class enablePaymentMethod_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String paymentMethodId;
      public enablePaymentMethod_call(String paymentMethodId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.paymentMethodId = paymentMethodId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("enablePaymentMethod", org.apache.thrift.protocol.TMessageType.CALL, 0));
        enablePaymentMethod_args args = new enablePaymentMethod_args();
        args.setPaymentMethodId(paymentMethodId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_enablePaymentMethod();
      }
    }

    public void disablePaymentMethod(String paymentMethodId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      disablePaymentMethod_call method_call = new disablePaymentMethod_call(paymentMethodId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class disablePaymentMethod_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String paymentMethodId;
      public disablePaymentMethod_call(String paymentMethodId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.paymentMethodId = paymentMethodId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("disablePaymentMethod", org.apache.thrift.protocol.TMessageType.CALL, 0));
        disablePaymentMethod_args args = new disablePaymentMethod_args();
        args.setPaymentMethodId(paymentMethodId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_disablePaymentMethod();
      }
    }

    public void deletePaymentMethod(String paymentMethodId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deletePaymentMethod_call method_call = new deletePaymentMethod_call(paymentMethodId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deletePaymentMethod_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String paymentMethodId;
      public deletePaymentMethod_call(String paymentMethodId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.paymentMethodId = paymentMethodId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deletePaymentMethod", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deletePaymentMethod_args args = new deletePaymentMethod_args();
        args.setPaymentMethodId(paymentMethodId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_deletePaymentMethod();
      }
    }

    public void confirm(String orderid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      confirm_call method_call = new confirm_call(orderid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class confirm_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String orderid;
      public confirm_call(String orderid, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.orderid = orderid;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("confirm", org.apache.thrift.protocol.TMessageType.CALL, 0));
        confirm_args args = new confirm_args();
        args.setOrderid(orderid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_confirm();
      }
    }

    public void checkout(String paymentSubject, String paymentMethod, int type, String token, String fee, String __remoteAddr, String subject, String body, String description, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      checkout_call method_call = new checkout_call(paymentSubject, paymentMethod, type, token, fee, __remoteAddr, subject, body, description, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class checkout_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String paymentSubject;
      private String paymentMethod;
      private int type;
      private String token;
      private String fee;
      private String __remoteAddr;
      private String subject;
      private String body;
      private String description;
      public checkout_call(String paymentSubject, String paymentMethod, int type, String token, String fee, String __remoteAddr, String subject, String body, String description, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.paymentSubject = paymentSubject;
        this.paymentMethod = paymentMethod;
        this.type = type;
        this.token = token;
        this.fee = fee;
        this.__remoteAddr = __remoteAddr;
        this.subject = subject;
        this.body = body;
        this.description = description;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("checkout", org.apache.thrift.protocol.TMessageType.CALL, 0));
        checkout_args args = new checkout_args();
        args.setPaymentSubject(paymentSubject);
        args.setPaymentMethod(paymentMethod);
        args.setType(type);
        args.setToken(token);
        args.setFee(fee);
        args.set__remoteAddr(__remoteAddr);
        args.setSubject(subject);
        args.setBody(body);
        args.setDescription(description);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_checkout();
      }
    }

    public void directPay(String charge, String password, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      directPay_call method_call = new directPay_call(charge, password, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class directPay_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String charge;
      private String password;
      public directPay_call(String charge, String password, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.charge = charge;
        this.password = password;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("directPay", org.apache.thrift.protocol.TMessageType.CALL, 0));
        directPay_args args = new directPay_args();
        args.setCharge(charge);
        args.setPassword(password);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_directPay();
      }
    }

    public void finishPayment(String paymentId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      finishPayment_call method_call = new finishPayment_call(paymentId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class finishPayment_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String paymentId;
      public finishPayment_call(String paymentId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.paymentId = paymentId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("finishPayment", org.apache.thrift.protocol.TMessageType.CALL, 0));
        finishPayment_args args = new finishPayment_args();
        args.setPaymentId(paymentId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_finishPayment();
      }
    }

    public void cancelPayment(String paymentId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      cancelPayment_call method_call = new cancelPayment_call(paymentId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class cancelPayment_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String paymentId;
      public cancelPayment_call(String paymentId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.paymentId = paymentId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("cancelPayment", org.apache.thrift.protocol.TMessageType.CALL, 0));
        cancelPayment_args args = new cancelPayment_args();
        args.setPaymentId(paymentId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_cancelPayment();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("loadAvaliablePaymentMethod", new loadAvaliablePaymentMethod());
      processMap.put("getPaymentMethod", new getPaymentMethod());
      processMap.put("savePaymentMethod", new savePaymentMethod());
      processMap.put("updatePaymentMethod", new updatePaymentMethod());
      processMap.put("enablePaymentMethod", new enablePaymentMethod());
      processMap.put("disablePaymentMethod", new disablePaymentMethod());
      processMap.put("deletePaymentMethod", new deletePaymentMethod());
      processMap.put("confirm", new confirm());
      processMap.put("checkout", new checkout());
      processMap.put("directPay", new directPay());
      processMap.put("finishPayment", new finishPayment());
      processMap.put("cancelPayment", new cancelPayment());
      return processMap;
    }

    public static class loadAvaliablePaymentMethod<I extends Iface> extends org.apache.thrift.ProcessFunction<I, loadAvaliablePaymentMethod_args> {
      public loadAvaliablePaymentMethod() {
        super("loadAvaliablePaymentMethod");
      }

      public loadAvaliablePaymentMethod_args getEmptyArgsInstance() {
        return new loadAvaliablePaymentMethod_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public loadAvaliablePaymentMethod_result getResult(I iface, loadAvaliablePaymentMethod_args args) throws org.apache.thrift.TException {
        loadAvaliablePaymentMethod_result result = new loadAvaliablePaymentMethod_result();
        result.success = iface.loadAvaliablePaymentMethod(args.clientType);
        return result;
      }
    }

    public static class getPaymentMethod<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getPaymentMethod_args> {
      public getPaymentMethod() {
        super("getPaymentMethod");
      }

      public getPaymentMethod_args getEmptyArgsInstance() {
        return new getPaymentMethod_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getPaymentMethod_result getResult(I iface, getPaymentMethod_args args) throws org.apache.thrift.TException {
        getPaymentMethod_result result = new getPaymentMethod_result();
        result.success = iface.getPaymentMethod(args.paymentMethodId);
        return result;
      }
    }

    public static class savePaymentMethod<I extends Iface> extends org.apache.thrift.ProcessFunction<I, savePaymentMethod_args> {
      public savePaymentMethod() {
        super("savePaymentMethod");
      }

      public savePaymentMethod_args getEmptyArgsInstance() {
        return new savePaymentMethod_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public savePaymentMethod_result getResult(I iface, savePaymentMethod_args args) throws org.apache.thrift.TException {
        savePaymentMethod_result result = new savePaymentMethod_result();
        result.success = iface.savePaymentMethod(args.paymentMethod);
        return result;
      }
    }

    public static class updatePaymentMethod<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updatePaymentMethod_args> {
      public updatePaymentMethod() {
        super("updatePaymentMethod");
      }

      public updatePaymentMethod_args getEmptyArgsInstance() {
        return new updatePaymentMethod_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updatePaymentMethod_result getResult(I iface, updatePaymentMethod_args args) throws org.apache.thrift.TException {
        updatePaymentMethod_result result = new updatePaymentMethod_result();
        result.success = iface.updatePaymentMethod(args.paymentMethod);
        return result;
      }
    }

    public static class enablePaymentMethod<I extends Iface> extends org.apache.thrift.ProcessFunction<I, enablePaymentMethod_args> {
      public enablePaymentMethod() {
        super("enablePaymentMethod");
      }

      public enablePaymentMethod_args getEmptyArgsInstance() {
        return new enablePaymentMethod_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public enablePaymentMethod_result getResult(I iface, enablePaymentMethod_args args) throws org.apache.thrift.TException {
        enablePaymentMethod_result result = new enablePaymentMethod_result();
        result.success = iface.enablePaymentMethod(args.paymentMethodId);
        return result;
      }
    }

    public static class disablePaymentMethod<I extends Iface> extends org.apache.thrift.ProcessFunction<I, disablePaymentMethod_args> {
      public disablePaymentMethod() {
        super("disablePaymentMethod");
      }

      public disablePaymentMethod_args getEmptyArgsInstance() {
        return new disablePaymentMethod_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public disablePaymentMethod_result getResult(I iface, disablePaymentMethod_args args) throws org.apache.thrift.TException {
        disablePaymentMethod_result result = new disablePaymentMethod_result();
        result.success = iface.disablePaymentMethod(args.paymentMethodId);
        return result;
      }
    }

    public static class deletePaymentMethod<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deletePaymentMethod_args> {
      public deletePaymentMethod() {
        super("deletePaymentMethod");
      }

      public deletePaymentMethod_args getEmptyArgsInstance() {
        return new deletePaymentMethod_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deletePaymentMethod_result getResult(I iface, deletePaymentMethod_args args) throws org.apache.thrift.TException {
        deletePaymentMethod_result result = new deletePaymentMethod_result();
        result.success = iface.deletePaymentMethod(args.paymentMethodId);
        return result;
      }
    }

    public static class confirm<I extends Iface> extends org.apache.thrift.ProcessFunction<I, confirm_args> {
      public confirm() {
        super("confirm");
      }

      public confirm_args getEmptyArgsInstance() {
        return new confirm_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public confirm_result getResult(I iface, confirm_args args) throws org.apache.thrift.TException {
        confirm_result result = new confirm_result();
        result.success = iface.confirm(args.orderid);
        return result;
      }
    }

    public static class checkout<I extends Iface> extends org.apache.thrift.ProcessFunction<I, checkout_args> {
      public checkout() {
        super("checkout");
      }

      public checkout_args getEmptyArgsInstance() {
        return new checkout_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public checkout_result getResult(I iface, checkout_args args) throws org.apache.thrift.TException {
        checkout_result result = new checkout_result();
        result.success = iface.checkout(args.paymentSubject, args.paymentMethod, args.type, args.token, args.fee, args.__remoteAddr, args.subject, args.body, args.description);
        return result;
      }
    }

    public static class directPay<I extends Iface> extends org.apache.thrift.ProcessFunction<I, directPay_args> {
      public directPay() {
        super("directPay");
      }

      public directPay_args getEmptyArgsInstance() {
        return new directPay_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public directPay_result getResult(I iface, directPay_args args) throws org.apache.thrift.TException {
        directPay_result result = new directPay_result();
        result.success = iface.directPay(args.charge, args.password);
        return result;
      }
    }

    public static class finishPayment<I extends Iface> extends org.apache.thrift.ProcessFunction<I, finishPayment_args> {
      public finishPayment() {
        super("finishPayment");
      }

      public finishPayment_args getEmptyArgsInstance() {
        return new finishPayment_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public finishPayment_result getResult(I iface, finishPayment_args args) throws org.apache.thrift.TException {
        finishPayment_result result = new finishPayment_result();
        result.success = iface.finishPayment(args.paymentId);
        return result;
      }
    }

    public static class cancelPayment<I extends Iface> extends org.apache.thrift.ProcessFunction<I, cancelPayment_args> {
      public cancelPayment() {
        super("cancelPayment");
      }

      public cancelPayment_args getEmptyArgsInstance() {
        return new cancelPayment_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public cancelPayment_result getResult(I iface, cancelPayment_args args) throws org.apache.thrift.TException {
        cancelPayment_result result = new cancelPayment_result();
        result.success = iface.cancelPayment(args.paymentId);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("loadAvaliablePaymentMethod", new loadAvaliablePaymentMethod());
      processMap.put("getPaymentMethod", new getPaymentMethod());
      processMap.put("savePaymentMethod", new savePaymentMethod());
      processMap.put("updatePaymentMethod", new updatePaymentMethod());
      processMap.put("enablePaymentMethod", new enablePaymentMethod());
      processMap.put("disablePaymentMethod", new disablePaymentMethod());
      processMap.put("deletePaymentMethod", new deletePaymentMethod());
      processMap.put("confirm", new confirm());
      processMap.put("checkout", new checkout());
      processMap.put("directPay", new directPay());
      processMap.put("finishPayment", new finishPayment());
      processMap.put("cancelPayment", new cancelPayment());
      return processMap;
    }

    public static class loadAvaliablePaymentMethod<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, loadAvaliablePaymentMethod_args, String> {
      public loadAvaliablePaymentMethod() {
        super("loadAvaliablePaymentMethod");
      }

      public loadAvaliablePaymentMethod_args getEmptyArgsInstance() {
        return new loadAvaliablePaymentMethod_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            loadAvaliablePaymentMethod_result result = new loadAvaliablePaymentMethod_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            loadAvaliablePaymentMethod_result result = new loadAvaliablePaymentMethod_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, loadAvaliablePaymentMethod_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.loadAvaliablePaymentMethod(args.clientType,resultHandler);
      }
    }

    public static class getPaymentMethod<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getPaymentMethod_args, String> {
      public getPaymentMethod() {
        super("getPaymentMethod");
      }

      public getPaymentMethod_args getEmptyArgsInstance() {
        return new getPaymentMethod_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            getPaymentMethod_result result = new getPaymentMethod_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getPaymentMethod_result result = new getPaymentMethod_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getPaymentMethod_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.getPaymentMethod(args.paymentMethodId,resultHandler);
      }
    }

    public static class savePaymentMethod<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, savePaymentMethod_args, String> {
      public savePaymentMethod() {
        super("savePaymentMethod");
      }

      public savePaymentMethod_args getEmptyArgsInstance() {
        return new savePaymentMethod_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            savePaymentMethod_result result = new savePaymentMethod_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            savePaymentMethod_result result = new savePaymentMethod_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, savePaymentMethod_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.savePaymentMethod(args.paymentMethod,resultHandler);
      }
    }

    public static class updatePaymentMethod<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updatePaymentMethod_args, String> {
      public updatePaymentMethod() {
        super("updatePaymentMethod");
      }

      public updatePaymentMethod_args getEmptyArgsInstance() {
        return new updatePaymentMethod_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            updatePaymentMethod_result result = new updatePaymentMethod_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updatePaymentMethod_result result = new updatePaymentMethod_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updatePaymentMethod_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.updatePaymentMethod(args.paymentMethod,resultHandler);
      }
    }

    public static class enablePaymentMethod<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, enablePaymentMethod_args, String> {
      public enablePaymentMethod() {
        super("enablePaymentMethod");
      }

      public enablePaymentMethod_args getEmptyArgsInstance() {
        return new enablePaymentMethod_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            enablePaymentMethod_result result = new enablePaymentMethod_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            enablePaymentMethod_result result = new enablePaymentMethod_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, enablePaymentMethod_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.enablePaymentMethod(args.paymentMethodId,resultHandler);
      }
    }

    public static class disablePaymentMethod<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, disablePaymentMethod_args, String> {
      public disablePaymentMethod() {
        super("disablePaymentMethod");
      }

      public disablePaymentMethod_args getEmptyArgsInstance() {
        return new disablePaymentMethod_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            disablePaymentMethod_result result = new disablePaymentMethod_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            disablePaymentMethod_result result = new disablePaymentMethod_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, disablePaymentMethod_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.disablePaymentMethod(args.paymentMethodId,resultHandler);
      }
    }

    public static class deletePaymentMethod<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deletePaymentMethod_args, String> {
      public deletePaymentMethod() {
        super("deletePaymentMethod");
      }

      public deletePaymentMethod_args getEmptyArgsInstance() {
        return new deletePaymentMethod_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            deletePaymentMethod_result result = new deletePaymentMethod_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            deletePaymentMethod_result result = new deletePaymentMethod_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deletePaymentMethod_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.deletePaymentMethod(args.paymentMethodId,resultHandler);
      }
    }

    public static class confirm<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, confirm_args, String> {
      public confirm() {
        super("confirm");
      }

      public confirm_args getEmptyArgsInstance() {
        return new confirm_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            confirm_result result = new confirm_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            confirm_result result = new confirm_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, confirm_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.confirm(args.orderid,resultHandler);
      }
    }

    public static class checkout<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, checkout_args, String> {
      public checkout() {
        super("checkout");
      }

      public checkout_args getEmptyArgsInstance() {
        return new checkout_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            checkout_result result = new checkout_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            checkout_result result = new checkout_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, checkout_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.checkout(args.paymentSubject, args.paymentMethod, args.type, args.token, args.fee, args.__remoteAddr, args.subject, args.body, args.description,resultHandler);
      }
    }

    public static class directPay<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, directPay_args, String> {
      public directPay() {
        super("directPay");
      }

      public directPay_args getEmptyArgsInstance() {
        return new directPay_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            directPay_result result = new directPay_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            directPay_result result = new directPay_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, directPay_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.directPay(args.charge, args.password,resultHandler);
      }
    }

    public static class finishPayment<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, finishPayment_args, String> {
      public finishPayment() {
        super("finishPayment");
      }

      public finishPayment_args getEmptyArgsInstance() {
        return new finishPayment_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            finishPayment_result result = new finishPayment_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            finishPayment_result result = new finishPayment_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, finishPayment_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.finishPayment(args.paymentId,resultHandler);
      }
    }

    public static class cancelPayment<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, cancelPayment_args, String> {
      public cancelPayment() {
        super("cancelPayment");
      }

      public cancelPayment_args getEmptyArgsInstance() {
        return new cancelPayment_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            cancelPayment_result result = new cancelPayment_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            cancelPayment_result result = new cancelPayment_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, cancelPayment_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.cancelPayment(args.paymentId,resultHandler);
      }
    }

  }

  public static class loadAvaliablePaymentMethod_args implements org.apache.thrift.TBase<loadAvaliablePaymentMethod_args, loadAvaliablePaymentMethod_args._Fields>, java.io.Serializable, Cloneable, Comparable<loadAvaliablePaymentMethod_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("loadAvaliablePaymentMethod_args");

    private static final org.apache.thrift.protocol.TField CLIENT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("clientType", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new loadAvaliablePaymentMethod_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new loadAvaliablePaymentMethod_argsTupleSchemeFactory());
    }

    public String clientType; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CLIENT_TYPE((short)1, "clientType");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CLIENT_TYPE
            return CLIENT_TYPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CLIENT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("clientType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(loadAvaliablePaymentMethod_args.class, metaDataMap);
    }

    public loadAvaliablePaymentMethod_args() {
    }

    public loadAvaliablePaymentMethod_args(
      String clientType)
    {
      this();
      this.clientType = clientType;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public loadAvaliablePaymentMethod_args(loadAvaliablePaymentMethod_args other) {
      if (other.isSetClientType()) {
        this.clientType = other.clientType;
      }
    }

    public loadAvaliablePaymentMethod_args deepCopy() {
      return new loadAvaliablePaymentMethod_args(this);
    }

    @Override
    public void clear() {
      this.clientType = null;
    }

    public String getClientType() {
      return this.clientType;
    }

    public loadAvaliablePaymentMethod_args setClientType(String clientType) {
      this.clientType = clientType;
      return this;
    }

    public void unsetClientType() {
      this.clientType = null;
    }

    /** Returns true if field clientType is set (has been assigned a value) and false otherwise */
    public boolean isSetClientType() {
      return this.clientType != null;
    }

    public void setClientTypeIsSet(boolean value) {
      if (!value) {
        this.clientType = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CLIENT_TYPE:
        if (value == null) {
          unsetClientType();
        } else {
          setClientType((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CLIENT_TYPE:
        return getClientType();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CLIENT_TYPE:
        return isSetClientType();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof loadAvaliablePaymentMethod_args)
        return this.equals((loadAvaliablePaymentMethod_args)that);
      return false;
    }

    public boolean equals(loadAvaliablePaymentMethod_args that) {
      if (that == null)
        return false;

      boolean this_present_clientType = true && this.isSetClientType();
      boolean that_present_clientType = true && that.isSetClientType();
      if (this_present_clientType || that_present_clientType) {
        if (!(this_present_clientType && that_present_clientType))
          return false;
        if (!this.clientType.equals(that.clientType))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_clientType = true && (isSetClientType());
      list.add(present_clientType);
      if (present_clientType)
        list.add(clientType);

      return list.hashCode();
    }

    @Override
    public int compareTo(loadAvaliablePaymentMethod_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetClientType()).compareTo(other.isSetClientType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClientType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientType, other.clientType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("loadAvaliablePaymentMethod_args(");
      boolean first = true;

      sb.append("clientType:");
      if (this.clientType == null) {
        sb.append("null");
      } else {
        sb.append(this.clientType);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class loadAvaliablePaymentMethod_argsStandardSchemeFactory implements SchemeFactory {
      public loadAvaliablePaymentMethod_argsStandardScheme getScheme() {
        return new loadAvaliablePaymentMethod_argsStandardScheme();
      }
    }

    private static class loadAvaliablePaymentMethod_argsStandardScheme extends StandardScheme<loadAvaliablePaymentMethod_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, loadAvaliablePaymentMethod_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CLIENT_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.clientType = iprot.readString();
                struct.setClientTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, loadAvaliablePaymentMethod_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.clientType != null) {
          oprot.writeFieldBegin(CLIENT_TYPE_FIELD_DESC);
          oprot.writeString(struct.clientType);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class loadAvaliablePaymentMethod_argsTupleSchemeFactory implements SchemeFactory {
      public loadAvaliablePaymentMethod_argsTupleScheme getScheme() {
        return new loadAvaliablePaymentMethod_argsTupleScheme();
      }
    }

    private static class loadAvaliablePaymentMethod_argsTupleScheme extends TupleScheme<loadAvaliablePaymentMethod_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, loadAvaliablePaymentMethod_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetClientType()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetClientType()) {
          oprot.writeString(struct.clientType);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, loadAvaliablePaymentMethod_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.clientType = iprot.readString();
          struct.setClientTypeIsSet(true);
        }
      }
    }

  }

  public static class loadAvaliablePaymentMethod_result implements org.apache.thrift.TBase<loadAvaliablePaymentMethod_result, loadAvaliablePaymentMethod_result._Fields>, java.io.Serializable, Cloneable, Comparable<loadAvaliablePaymentMethod_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("loadAvaliablePaymentMethod_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new loadAvaliablePaymentMethod_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new loadAvaliablePaymentMethod_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(loadAvaliablePaymentMethod_result.class, metaDataMap);
    }

    public loadAvaliablePaymentMethod_result() {
    }

    public loadAvaliablePaymentMethod_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public loadAvaliablePaymentMethod_result(loadAvaliablePaymentMethod_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public loadAvaliablePaymentMethod_result deepCopy() {
      return new loadAvaliablePaymentMethod_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public loadAvaliablePaymentMethod_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof loadAvaliablePaymentMethod_result)
        return this.equals((loadAvaliablePaymentMethod_result)that);
      return false;
    }

    public boolean equals(loadAvaliablePaymentMethod_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(loadAvaliablePaymentMethod_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("loadAvaliablePaymentMethod_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class loadAvaliablePaymentMethod_resultStandardSchemeFactory implements SchemeFactory {
      public loadAvaliablePaymentMethod_resultStandardScheme getScheme() {
        return new loadAvaliablePaymentMethod_resultStandardScheme();
      }
    }

    private static class loadAvaliablePaymentMethod_resultStandardScheme extends StandardScheme<loadAvaliablePaymentMethod_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, loadAvaliablePaymentMethod_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, loadAvaliablePaymentMethod_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class loadAvaliablePaymentMethod_resultTupleSchemeFactory implements SchemeFactory {
      public loadAvaliablePaymentMethod_resultTupleScheme getScheme() {
        return new loadAvaliablePaymentMethod_resultTupleScheme();
      }
    }

    private static class loadAvaliablePaymentMethod_resultTupleScheme extends TupleScheme<loadAvaliablePaymentMethod_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, loadAvaliablePaymentMethod_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, loadAvaliablePaymentMethod_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getPaymentMethod_args implements org.apache.thrift.TBase<getPaymentMethod_args, getPaymentMethod_args._Fields>, java.io.Serializable, Cloneable, Comparable<getPaymentMethod_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPaymentMethod_args");

    private static final org.apache.thrift.protocol.TField PAYMENT_METHOD_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("paymentMethodId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPaymentMethod_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPaymentMethod_argsTupleSchemeFactory());
    }

    public String paymentMethodId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PAYMENT_METHOD_ID((short)1, "paymentMethodId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PAYMENT_METHOD_ID
            return PAYMENT_METHOD_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PAYMENT_METHOD_ID, new org.apache.thrift.meta_data.FieldMetaData("paymentMethodId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPaymentMethod_args.class, metaDataMap);
    }

    public getPaymentMethod_args() {
    }

    public getPaymentMethod_args(
      String paymentMethodId)
    {
      this();
      this.paymentMethodId = paymentMethodId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPaymentMethod_args(getPaymentMethod_args other) {
      if (other.isSetPaymentMethodId()) {
        this.paymentMethodId = other.paymentMethodId;
      }
    }

    public getPaymentMethod_args deepCopy() {
      return new getPaymentMethod_args(this);
    }

    @Override
    public void clear() {
      this.paymentMethodId = null;
    }

    public String getPaymentMethodId() {
      return this.paymentMethodId;
    }

    public getPaymentMethod_args setPaymentMethodId(String paymentMethodId) {
      this.paymentMethodId = paymentMethodId;
      return this;
    }

    public void unsetPaymentMethodId() {
      this.paymentMethodId = null;
    }

    /** Returns true if field paymentMethodId is set (has been assigned a value) and false otherwise */
    public boolean isSetPaymentMethodId() {
      return this.paymentMethodId != null;
    }

    public void setPaymentMethodIdIsSet(boolean value) {
      if (!value) {
        this.paymentMethodId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PAYMENT_METHOD_ID:
        if (value == null) {
          unsetPaymentMethodId();
        } else {
          setPaymentMethodId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PAYMENT_METHOD_ID:
        return getPaymentMethodId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PAYMENT_METHOD_ID:
        return isSetPaymentMethodId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPaymentMethod_args)
        return this.equals((getPaymentMethod_args)that);
      return false;
    }

    public boolean equals(getPaymentMethod_args that) {
      if (that == null)
        return false;

      boolean this_present_paymentMethodId = true && this.isSetPaymentMethodId();
      boolean that_present_paymentMethodId = true && that.isSetPaymentMethodId();
      if (this_present_paymentMethodId || that_present_paymentMethodId) {
        if (!(this_present_paymentMethodId && that_present_paymentMethodId))
          return false;
        if (!this.paymentMethodId.equals(that.paymentMethodId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_paymentMethodId = true && (isSetPaymentMethodId());
      list.add(present_paymentMethodId);
      if (present_paymentMethodId)
        list.add(paymentMethodId);

      return list.hashCode();
    }

    @Override
    public int compareTo(getPaymentMethod_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPaymentMethodId()).compareTo(other.isSetPaymentMethodId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPaymentMethodId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paymentMethodId, other.paymentMethodId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPaymentMethod_args(");
      boolean first = true;

      sb.append("paymentMethodId:");
      if (this.paymentMethodId == null) {
        sb.append("null");
      } else {
        sb.append(this.paymentMethodId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPaymentMethod_argsStandardSchemeFactory implements SchemeFactory {
      public getPaymentMethod_argsStandardScheme getScheme() {
        return new getPaymentMethod_argsStandardScheme();
      }
    }

    private static class getPaymentMethod_argsStandardScheme extends StandardScheme<getPaymentMethod_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPaymentMethod_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PAYMENT_METHOD_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.paymentMethodId = iprot.readString();
                struct.setPaymentMethodIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPaymentMethod_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.paymentMethodId != null) {
          oprot.writeFieldBegin(PAYMENT_METHOD_ID_FIELD_DESC);
          oprot.writeString(struct.paymentMethodId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPaymentMethod_argsTupleSchemeFactory implements SchemeFactory {
      public getPaymentMethod_argsTupleScheme getScheme() {
        return new getPaymentMethod_argsTupleScheme();
      }
    }

    private static class getPaymentMethod_argsTupleScheme extends TupleScheme<getPaymentMethod_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPaymentMethod_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPaymentMethodId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetPaymentMethodId()) {
          oprot.writeString(struct.paymentMethodId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPaymentMethod_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.paymentMethodId = iprot.readString();
          struct.setPaymentMethodIdIsSet(true);
        }
      }
    }

  }

  public static class getPaymentMethod_result implements org.apache.thrift.TBase<getPaymentMethod_result, getPaymentMethod_result._Fields>, java.io.Serializable, Cloneable, Comparable<getPaymentMethod_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPaymentMethod_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPaymentMethod_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPaymentMethod_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPaymentMethod_result.class, metaDataMap);
    }

    public getPaymentMethod_result() {
    }

    public getPaymentMethod_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPaymentMethod_result(getPaymentMethod_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public getPaymentMethod_result deepCopy() {
      return new getPaymentMethod_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public getPaymentMethod_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPaymentMethod_result)
        return this.equals((getPaymentMethod_result)that);
      return false;
    }

    public boolean equals(getPaymentMethod_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getPaymentMethod_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPaymentMethod_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPaymentMethod_resultStandardSchemeFactory implements SchemeFactory {
      public getPaymentMethod_resultStandardScheme getScheme() {
        return new getPaymentMethod_resultStandardScheme();
      }
    }

    private static class getPaymentMethod_resultStandardScheme extends StandardScheme<getPaymentMethod_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPaymentMethod_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPaymentMethod_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPaymentMethod_resultTupleSchemeFactory implements SchemeFactory {
      public getPaymentMethod_resultTupleScheme getScheme() {
        return new getPaymentMethod_resultTupleScheme();
      }
    }

    private static class getPaymentMethod_resultTupleScheme extends TupleScheme<getPaymentMethod_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPaymentMethod_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPaymentMethod_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class savePaymentMethod_args implements org.apache.thrift.TBase<savePaymentMethod_args, savePaymentMethod_args._Fields>, java.io.Serializable, Cloneable, Comparable<savePaymentMethod_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("savePaymentMethod_args");

    private static final org.apache.thrift.protocol.TField PAYMENT_METHOD_FIELD_DESC = new org.apache.thrift.protocol.TField("paymentMethod", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new savePaymentMethod_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new savePaymentMethod_argsTupleSchemeFactory());
    }

    public String paymentMethod; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PAYMENT_METHOD((short)1, "paymentMethod");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PAYMENT_METHOD
            return PAYMENT_METHOD;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PAYMENT_METHOD, new org.apache.thrift.meta_data.FieldMetaData("paymentMethod", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(savePaymentMethod_args.class, metaDataMap);
    }

    public savePaymentMethod_args() {
    }

    public savePaymentMethod_args(
      String paymentMethod)
    {
      this();
      this.paymentMethod = paymentMethod;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public savePaymentMethod_args(savePaymentMethod_args other) {
      if (other.isSetPaymentMethod()) {
        this.paymentMethod = other.paymentMethod;
      }
    }

    public savePaymentMethod_args deepCopy() {
      return new savePaymentMethod_args(this);
    }

    @Override
    public void clear() {
      this.paymentMethod = null;
    }

    public String getPaymentMethod() {
      return this.paymentMethod;
    }

    public savePaymentMethod_args setPaymentMethod(String paymentMethod) {
      this.paymentMethod = paymentMethod;
      return this;
    }

    public void unsetPaymentMethod() {
      this.paymentMethod = null;
    }

    /** Returns true if field paymentMethod is set (has been assigned a value) and false otherwise */
    public boolean isSetPaymentMethod() {
      return this.paymentMethod != null;
    }

    public void setPaymentMethodIsSet(boolean value) {
      if (!value) {
        this.paymentMethod = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PAYMENT_METHOD:
        if (value == null) {
          unsetPaymentMethod();
        } else {
          setPaymentMethod((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PAYMENT_METHOD:
        return getPaymentMethod();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PAYMENT_METHOD:
        return isSetPaymentMethod();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof savePaymentMethod_args)
        return this.equals((savePaymentMethod_args)that);
      return false;
    }

    public boolean equals(savePaymentMethod_args that) {
      if (that == null)
        return false;

      boolean this_present_paymentMethod = true && this.isSetPaymentMethod();
      boolean that_present_paymentMethod = true && that.isSetPaymentMethod();
      if (this_present_paymentMethod || that_present_paymentMethod) {
        if (!(this_present_paymentMethod && that_present_paymentMethod))
          return false;
        if (!this.paymentMethod.equals(that.paymentMethod))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_paymentMethod = true && (isSetPaymentMethod());
      list.add(present_paymentMethod);
      if (present_paymentMethod)
        list.add(paymentMethod);

      return list.hashCode();
    }

    @Override
    public int compareTo(savePaymentMethod_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPaymentMethod()).compareTo(other.isSetPaymentMethod());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPaymentMethod()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paymentMethod, other.paymentMethod);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("savePaymentMethod_args(");
      boolean first = true;

      sb.append("paymentMethod:");
      if (this.paymentMethod == null) {
        sb.append("null");
      } else {
        sb.append(this.paymentMethod);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class savePaymentMethod_argsStandardSchemeFactory implements SchemeFactory {
      public savePaymentMethod_argsStandardScheme getScheme() {
        return new savePaymentMethod_argsStandardScheme();
      }
    }

    private static class savePaymentMethod_argsStandardScheme extends StandardScheme<savePaymentMethod_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, savePaymentMethod_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PAYMENT_METHOD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.paymentMethod = iprot.readString();
                struct.setPaymentMethodIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, savePaymentMethod_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.paymentMethod != null) {
          oprot.writeFieldBegin(PAYMENT_METHOD_FIELD_DESC);
          oprot.writeString(struct.paymentMethod);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class savePaymentMethod_argsTupleSchemeFactory implements SchemeFactory {
      public savePaymentMethod_argsTupleScheme getScheme() {
        return new savePaymentMethod_argsTupleScheme();
      }
    }

    private static class savePaymentMethod_argsTupleScheme extends TupleScheme<savePaymentMethod_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, savePaymentMethod_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPaymentMethod()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetPaymentMethod()) {
          oprot.writeString(struct.paymentMethod);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, savePaymentMethod_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.paymentMethod = iprot.readString();
          struct.setPaymentMethodIsSet(true);
        }
      }
    }

  }

  public static class savePaymentMethod_result implements org.apache.thrift.TBase<savePaymentMethod_result, savePaymentMethod_result._Fields>, java.io.Serializable, Cloneable, Comparable<savePaymentMethod_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("savePaymentMethod_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new savePaymentMethod_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new savePaymentMethod_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(savePaymentMethod_result.class, metaDataMap);
    }

    public savePaymentMethod_result() {
    }

    public savePaymentMethod_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public savePaymentMethod_result(savePaymentMethod_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public savePaymentMethod_result deepCopy() {
      return new savePaymentMethod_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public savePaymentMethod_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof savePaymentMethod_result)
        return this.equals((savePaymentMethod_result)that);
      return false;
    }

    public boolean equals(savePaymentMethod_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(savePaymentMethod_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("savePaymentMethod_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class savePaymentMethod_resultStandardSchemeFactory implements SchemeFactory {
      public savePaymentMethod_resultStandardScheme getScheme() {
        return new savePaymentMethod_resultStandardScheme();
      }
    }

    private static class savePaymentMethod_resultStandardScheme extends StandardScheme<savePaymentMethod_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, savePaymentMethod_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, savePaymentMethod_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class savePaymentMethod_resultTupleSchemeFactory implements SchemeFactory {
      public savePaymentMethod_resultTupleScheme getScheme() {
        return new savePaymentMethod_resultTupleScheme();
      }
    }

    private static class savePaymentMethod_resultTupleScheme extends TupleScheme<savePaymentMethod_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, savePaymentMethod_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, savePaymentMethod_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updatePaymentMethod_args implements org.apache.thrift.TBase<updatePaymentMethod_args, updatePaymentMethod_args._Fields>, java.io.Serializable, Cloneable, Comparable<updatePaymentMethod_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updatePaymentMethod_args");

    private static final org.apache.thrift.protocol.TField PAYMENT_METHOD_FIELD_DESC = new org.apache.thrift.protocol.TField("paymentMethod", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updatePaymentMethod_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updatePaymentMethod_argsTupleSchemeFactory());
    }

    public String paymentMethod; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PAYMENT_METHOD((short)1, "paymentMethod");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PAYMENT_METHOD
            return PAYMENT_METHOD;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PAYMENT_METHOD, new org.apache.thrift.meta_data.FieldMetaData("paymentMethod", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updatePaymentMethod_args.class, metaDataMap);
    }

    public updatePaymentMethod_args() {
    }

    public updatePaymentMethod_args(
      String paymentMethod)
    {
      this();
      this.paymentMethod = paymentMethod;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updatePaymentMethod_args(updatePaymentMethod_args other) {
      if (other.isSetPaymentMethod()) {
        this.paymentMethod = other.paymentMethod;
      }
    }

    public updatePaymentMethod_args deepCopy() {
      return new updatePaymentMethod_args(this);
    }

    @Override
    public void clear() {
      this.paymentMethod = null;
    }

    public String getPaymentMethod() {
      return this.paymentMethod;
    }

    public updatePaymentMethod_args setPaymentMethod(String paymentMethod) {
      this.paymentMethod = paymentMethod;
      return this;
    }

    public void unsetPaymentMethod() {
      this.paymentMethod = null;
    }

    /** Returns true if field paymentMethod is set (has been assigned a value) and false otherwise */
    public boolean isSetPaymentMethod() {
      return this.paymentMethod != null;
    }

    public void setPaymentMethodIsSet(boolean value) {
      if (!value) {
        this.paymentMethod = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PAYMENT_METHOD:
        if (value == null) {
          unsetPaymentMethod();
        } else {
          setPaymentMethod((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PAYMENT_METHOD:
        return getPaymentMethod();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PAYMENT_METHOD:
        return isSetPaymentMethod();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updatePaymentMethod_args)
        return this.equals((updatePaymentMethod_args)that);
      return false;
    }

    public boolean equals(updatePaymentMethod_args that) {
      if (that == null)
        return false;

      boolean this_present_paymentMethod = true && this.isSetPaymentMethod();
      boolean that_present_paymentMethod = true && that.isSetPaymentMethod();
      if (this_present_paymentMethod || that_present_paymentMethod) {
        if (!(this_present_paymentMethod && that_present_paymentMethod))
          return false;
        if (!this.paymentMethod.equals(that.paymentMethod))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_paymentMethod = true && (isSetPaymentMethod());
      list.add(present_paymentMethod);
      if (present_paymentMethod)
        list.add(paymentMethod);

      return list.hashCode();
    }

    @Override
    public int compareTo(updatePaymentMethod_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPaymentMethod()).compareTo(other.isSetPaymentMethod());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPaymentMethod()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paymentMethod, other.paymentMethod);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updatePaymentMethod_args(");
      boolean first = true;

      sb.append("paymentMethod:");
      if (this.paymentMethod == null) {
        sb.append("null");
      } else {
        sb.append(this.paymentMethod);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updatePaymentMethod_argsStandardSchemeFactory implements SchemeFactory {
      public updatePaymentMethod_argsStandardScheme getScheme() {
        return new updatePaymentMethod_argsStandardScheme();
      }
    }

    private static class updatePaymentMethod_argsStandardScheme extends StandardScheme<updatePaymentMethod_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updatePaymentMethod_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PAYMENT_METHOD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.paymentMethod = iprot.readString();
                struct.setPaymentMethodIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updatePaymentMethod_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.paymentMethod != null) {
          oprot.writeFieldBegin(PAYMENT_METHOD_FIELD_DESC);
          oprot.writeString(struct.paymentMethod);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updatePaymentMethod_argsTupleSchemeFactory implements SchemeFactory {
      public updatePaymentMethod_argsTupleScheme getScheme() {
        return new updatePaymentMethod_argsTupleScheme();
      }
    }

    private static class updatePaymentMethod_argsTupleScheme extends TupleScheme<updatePaymentMethod_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updatePaymentMethod_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPaymentMethod()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetPaymentMethod()) {
          oprot.writeString(struct.paymentMethod);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updatePaymentMethod_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.paymentMethod = iprot.readString();
          struct.setPaymentMethodIsSet(true);
        }
      }
    }

  }

  public static class updatePaymentMethod_result implements org.apache.thrift.TBase<updatePaymentMethod_result, updatePaymentMethod_result._Fields>, java.io.Serializable, Cloneable, Comparable<updatePaymentMethod_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updatePaymentMethod_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updatePaymentMethod_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updatePaymentMethod_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updatePaymentMethod_result.class, metaDataMap);
    }

    public updatePaymentMethod_result() {
    }

    public updatePaymentMethod_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updatePaymentMethod_result(updatePaymentMethod_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public updatePaymentMethod_result deepCopy() {
      return new updatePaymentMethod_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public updatePaymentMethod_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updatePaymentMethod_result)
        return this.equals((updatePaymentMethod_result)that);
      return false;
    }

    public boolean equals(updatePaymentMethod_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(updatePaymentMethod_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updatePaymentMethod_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updatePaymentMethod_resultStandardSchemeFactory implements SchemeFactory {
      public updatePaymentMethod_resultStandardScheme getScheme() {
        return new updatePaymentMethod_resultStandardScheme();
      }
    }

    private static class updatePaymentMethod_resultStandardScheme extends StandardScheme<updatePaymentMethod_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updatePaymentMethod_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updatePaymentMethod_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updatePaymentMethod_resultTupleSchemeFactory implements SchemeFactory {
      public updatePaymentMethod_resultTupleScheme getScheme() {
        return new updatePaymentMethod_resultTupleScheme();
      }
    }

    private static class updatePaymentMethod_resultTupleScheme extends TupleScheme<updatePaymentMethod_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updatePaymentMethod_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updatePaymentMethod_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class enablePaymentMethod_args implements org.apache.thrift.TBase<enablePaymentMethod_args, enablePaymentMethod_args._Fields>, java.io.Serializable, Cloneable, Comparable<enablePaymentMethod_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("enablePaymentMethod_args");

    private static final org.apache.thrift.protocol.TField PAYMENT_METHOD_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("paymentMethodId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new enablePaymentMethod_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new enablePaymentMethod_argsTupleSchemeFactory());
    }

    public String paymentMethodId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PAYMENT_METHOD_ID((short)1, "paymentMethodId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PAYMENT_METHOD_ID
            return PAYMENT_METHOD_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PAYMENT_METHOD_ID, new org.apache.thrift.meta_data.FieldMetaData("paymentMethodId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(enablePaymentMethod_args.class, metaDataMap);
    }

    public enablePaymentMethod_args() {
    }

    public enablePaymentMethod_args(
      String paymentMethodId)
    {
      this();
      this.paymentMethodId = paymentMethodId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public enablePaymentMethod_args(enablePaymentMethod_args other) {
      if (other.isSetPaymentMethodId()) {
        this.paymentMethodId = other.paymentMethodId;
      }
    }

    public enablePaymentMethod_args deepCopy() {
      return new enablePaymentMethod_args(this);
    }

    @Override
    public void clear() {
      this.paymentMethodId = null;
    }

    public String getPaymentMethodId() {
      return this.paymentMethodId;
    }

    public enablePaymentMethod_args setPaymentMethodId(String paymentMethodId) {
      this.paymentMethodId = paymentMethodId;
      return this;
    }

    public void unsetPaymentMethodId() {
      this.paymentMethodId = null;
    }

    /** Returns true if field paymentMethodId is set (has been assigned a value) and false otherwise */
    public boolean isSetPaymentMethodId() {
      return this.paymentMethodId != null;
    }

    public void setPaymentMethodIdIsSet(boolean value) {
      if (!value) {
        this.paymentMethodId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PAYMENT_METHOD_ID:
        if (value == null) {
          unsetPaymentMethodId();
        } else {
          setPaymentMethodId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PAYMENT_METHOD_ID:
        return getPaymentMethodId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PAYMENT_METHOD_ID:
        return isSetPaymentMethodId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof enablePaymentMethod_args)
        return this.equals((enablePaymentMethod_args)that);
      return false;
    }

    public boolean equals(enablePaymentMethod_args that) {
      if (that == null)
        return false;

      boolean this_present_paymentMethodId = true && this.isSetPaymentMethodId();
      boolean that_present_paymentMethodId = true && that.isSetPaymentMethodId();
      if (this_present_paymentMethodId || that_present_paymentMethodId) {
        if (!(this_present_paymentMethodId && that_present_paymentMethodId))
          return false;
        if (!this.paymentMethodId.equals(that.paymentMethodId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_paymentMethodId = true && (isSetPaymentMethodId());
      list.add(present_paymentMethodId);
      if (present_paymentMethodId)
        list.add(paymentMethodId);

      return list.hashCode();
    }

    @Override
    public int compareTo(enablePaymentMethod_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPaymentMethodId()).compareTo(other.isSetPaymentMethodId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPaymentMethodId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paymentMethodId, other.paymentMethodId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("enablePaymentMethod_args(");
      boolean first = true;

      sb.append("paymentMethodId:");
      if (this.paymentMethodId == null) {
        sb.append("null");
      } else {
        sb.append(this.paymentMethodId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class enablePaymentMethod_argsStandardSchemeFactory implements SchemeFactory {
      public enablePaymentMethod_argsStandardScheme getScheme() {
        return new enablePaymentMethod_argsStandardScheme();
      }
    }

    private static class enablePaymentMethod_argsStandardScheme extends StandardScheme<enablePaymentMethod_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, enablePaymentMethod_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PAYMENT_METHOD_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.paymentMethodId = iprot.readString();
                struct.setPaymentMethodIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, enablePaymentMethod_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.paymentMethodId != null) {
          oprot.writeFieldBegin(PAYMENT_METHOD_ID_FIELD_DESC);
          oprot.writeString(struct.paymentMethodId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class enablePaymentMethod_argsTupleSchemeFactory implements SchemeFactory {
      public enablePaymentMethod_argsTupleScheme getScheme() {
        return new enablePaymentMethod_argsTupleScheme();
      }
    }

    private static class enablePaymentMethod_argsTupleScheme extends TupleScheme<enablePaymentMethod_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, enablePaymentMethod_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPaymentMethodId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetPaymentMethodId()) {
          oprot.writeString(struct.paymentMethodId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, enablePaymentMethod_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.paymentMethodId = iprot.readString();
          struct.setPaymentMethodIdIsSet(true);
        }
      }
    }

  }

  public static class enablePaymentMethod_result implements org.apache.thrift.TBase<enablePaymentMethod_result, enablePaymentMethod_result._Fields>, java.io.Serializable, Cloneable, Comparable<enablePaymentMethod_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("enablePaymentMethod_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new enablePaymentMethod_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new enablePaymentMethod_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(enablePaymentMethod_result.class, metaDataMap);
    }

    public enablePaymentMethod_result() {
    }

    public enablePaymentMethod_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public enablePaymentMethod_result(enablePaymentMethod_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public enablePaymentMethod_result deepCopy() {
      return new enablePaymentMethod_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public enablePaymentMethod_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof enablePaymentMethod_result)
        return this.equals((enablePaymentMethod_result)that);
      return false;
    }

    public boolean equals(enablePaymentMethod_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(enablePaymentMethod_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("enablePaymentMethod_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class enablePaymentMethod_resultStandardSchemeFactory implements SchemeFactory {
      public enablePaymentMethod_resultStandardScheme getScheme() {
        return new enablePaymentMethod_resultStandardScheme();
      }
    }

    private static class enablePaymentMethod_resultStandardScheme extends StandardScheme<enablePaymentMethod_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, enablePaymentMethod_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, enablePaymentMethod_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class enablePaymentMethod_resultTupleSchemeFactory implements SchemeFactory {
      public enablePaymentMethod_resultTupleScheme getScheme() {
        return new enablePaymentMethod_resultTupleScheme();
      }
    }

    private static class enablePaymentMethod_resultTupleScheme extends TupleScheme<enablePaymentMethod_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, enablePaymentMethod_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, enablePaymentMethod_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class disablePaymentMethod_args implements org.apache.thrift.TBase<disablePaymentMethod_args, disablePaymentMethod_args._Fields>, java.io.Serializable, Cloneable, Comparable<disablePaymentMethod_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("disablePaymentMethod_args");

    private static final org.apache.thrift.protocol.TField PAYMENT_METHOD_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("paymentMethodId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new disablePaymentMethod_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new disablePaymentMethod_argsTupleSchemeFactory());
    }

    public String paymentMethodId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PAYMENT_METHOD_ID((short)1, "paymentMethodId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PAYMENT_METHOD_ID
            return PAYMENT_METHOD_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PAYMENT_METHOD_ID, new org.apache.thrift.meta_data.FieldMetaData("paymentMethodId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(disablePaymentMethod_args.class, metaDataMap);
    }

    public disablePaymentMethod_args() {
    }

    public disablePaymentMethod_args(
      String paymentMethodId)
    {
      this();
      this.paymentMethodId = paymentMethodId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public disablePaymentMethod_args(disablePaymentMethod_args other) {
      if (other.isSetPaymentMethodId()) {
        this.paymentMethodId = other.paymentMethodId;
      }
    }

    public disablePaymentMethod_args deepCopy() {
      return new disablePaymentMethod_args(this);
    }

    @Override
    public void clear() {
      this.paymentMethodId = null;
    }

    public String getPaymentMethodId() {
      return this.paymentMethodId;
    }

    public disablePaymentMethod_args setPaymentMethodId(String paymentMethodId) {
      this.paymentMethodId = paymentMethodId;
      return this;
    }

    public void unsetPaymentMethodId() {
      this.paymentMethodId = null;
    }

    /** Returns true if field paymentMethodId is set (has been assigned a value) and false otherwise */
    public boolean isSetPaymentMethodId() {
      return this.paymentMethodId != null;
    }

    public void setPaymentMethodIdIsSet(boolean value) {
      if (!value) {
        this.paymentMethodId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PAYMENT_METHOD_ID:
        if (value == null) {
          unsetPaymentMethodId();
        } else {
          setPaymentMethodId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PAYMENT_METHOD_ID:
        return getPaymentMethodId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PAYMENT_METHOD_ID:
        return isSetPaymentMethodId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof disablePaymentMethod_args)
        return this.equals((disablePaymentMethod_args)that);
      return false;
    }

    public boolean equals(disablePaymentMethod_args that) {
      if (that == null)
        return false;

      boolean this_present_paymentMethodId = true && this.isSetPaymentMethodId();
      boolean that_present_paymentMethodId = true && that.isSetPaymentMethodId();
      if (this_present_paymentMethodId || that_present_paymentMethodId) {
        if (!(this_present_paymentMethodId && that_present_paymentMethodId))
          return false;
        if (!this.paymentMethodId.equals(that.paymentMethodId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_paymentMethodId = true && (isSetPaymentMethodId());
      list.add(present_paymentMethodId);
      if (present_paymentMethodId)
        list.add(paymentMethodId);

      return list.hashCode();
    }

    @Override
    public int compareTo(disablePaymentMethod_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPaymentMethodId()).compareTo(other.isSetPaymentMethodId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPaymentMethodId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paymentMethodId, other.paymentMethodId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("disablePaymentMethod_args(");
      boolean first = true;

      sb.append("paymentMethodId:");
      if (this.paymentMethodId == null) {
        sb.append("null");
      } else {
        sb.append(this.paymentMethodId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class disablePaymentMethod_argsStandardSchemeFactory implements SchemeFactory {
      public disablePaymentMethod_argsStandardScheme getScheme() {
        return new disablePaymentMethod_argsStandardScheme();
      }
    }

    private static class disablePaymentMethod_argsStandardScheme extends StandardScheme<disablePaymentMethod_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, disablePaymentMethod_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PAYMENT_METHOD_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.paymentMethodId = iprot.readString();
                struct.setPaymentMethodIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, disablePaymentMethod_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.paymentMethodId != null) {
          oprot.writeFieldBegin(PAYMENT_METHOD_ID_FIELD_DESC);
          oprot.writeString(struct.paymentMethodId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class disablePaymentMethod_argsTupleSchemeFactory implements SchemeFactory {
      public disablePaymentMethod_argsTupleScheme getScheme() {
        return new disablePaymentMethod_argsTupleScheme();
      }
    }

    private static class disablePaymentMethod_argsTupleScheme extends TupleScheme<disablePaymentMethod_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, disablePaymentMethod_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPaymentMethodId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetPaymentMethodId()) {
          oprot.writeString(struct.paymentMethodId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, disablePaymentMethod_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.paymentMethodId = iprot.readString();
          struct.setPaymentMethodIdIsSet(true);
        }
      }
    }

  }

  public static class disablePaymentMethod_result implements org.apache.thrift.TBase<disablePaymentMethod_result, disablePaymentMethod_result._Fields>, java.io.Serializable, Cloneable, Comparable<disablePaymentMethod_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("disablePaymentMethod_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new disablePaymentMethod_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new disablePaymentMethod_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(disablePaymentMethod_result.class, metaDataMap);
    }

    public disablePaymentMethod_result() {
    }

    public disablePaymentMethod_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public disablePaymentMethod_result(disablePaymentMethod_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public disablePaymentMethod_result deepCopy() {
      return new disablePaymentMethod_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public disablePaymentMethod_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof disablePaymentMethod_result)
        return this.equals((disablePaymentMethod_result)that);
      return false;
    }

    public boolean equals(disablePaymentMethod_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(disablePaymentMethod_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("disablePaymentMethod_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class disablePaymentMethod_resultStandardSchemeFactory implements SchemeFactory {
      public disablePaymentMethod_resultStandardScheme getScheme() {
        return new disablePaymentMethod_resultStandardScheme();
      }
    }

    private static class disablePaymentMethod_resultStandardScheme extends StandardScheme<disablePaymentMethod_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, disablePaymentMethod_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, disablePaymentMethod_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class disablePaymentMethod_resultTupleSchemeFactory implements SchemeFactory {
      public disablePaymentMethod_resultTupleScheme getScheme() {
        return new disablePaymentMethod_resultTupleScheme();
      }
    }

    private static class disablePaymentMethod_resultTupleScheme extends TupleScheme<disablePaymentMethod_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, disablePaymentMethod_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, disablePaymentMethod_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class deletePaymentMethod_args implements org.apache.thrift.TBase<deletePaymentMethod_args, deletePaymentMethod_args._Fields>, java.io.Serializable, Cloneable, Comparable<deletePaymentMethod_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deletePaymentMethod_args");

    private static final org.apache.thrift.protocol.TField PAYMENT_METHOD_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("paymentMethodId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deletePaymentMethod_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deletePaymentMethod_argsTupleSchemeFactory());
    }

    public String paymentMethodId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PAYMENT_METHOD_ID((short)1, "paymentMethodId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PAYMENT_METHOD_ID
            return PAYMENT_METHOD_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PAYMENT_METHOD_ID, new org.apache.thrift.meta_data.FieldMetaData("paymentMethodId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deletePaymentMethod_args.class, metaDataMap);
    }

    public deletePaymentMethod_args() {
    }

    public deletePaymentMethod_args(
      String paymentMethodId)
    {
      this();
      this.paymentMethodId = paymentMethodId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deletePaymentMethod_args(deletePaymentMethod_args other) {
      if (other.isSetPaymentMethodId()) {
        this.paymentMethodId = other.paymentMethodId;
      }
    }

    public deletePaymentMethod_args deepCopy() {
      return new deletePaymentMethod_args(this);
    }

    @Override
    public void clear() {
      this.paymentMethodId = null;
    }

    public String getPaymentMethodId() {
      return this.paymentMethodId;
    }

    public deletePaymentMethod_args setPaymentMethodId(String paymentMethodId) {
      this.paymentMethodId = paymentMethodId;
      return this;
    }

    public void unsetPaymentMethodId() {
      this.paymentMethodId = null;
    }

    /** Returns true if field paymentMethodId is set (has been assigned a value) and false otherwise */
    public boolean isSetPaymentMethodId() {
      return this.paymentMethodId != null;
    }

    public void setPaymentMethodIdIsSet(boolean value) {
      if (!value) {
        this.paymentMethodId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PAYMENT_METHOD_ID:
        if (value == null) {
          unsetPaymentMethodId();
        } else {
          setPaymentMethodId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PAYMENT_METHOD_ID:
        return getPaymentMethodId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PAYMENT_METHOD_ID:
        return isSetPaymentMethodId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deletePaymentMethod_args)
        return this.equals((deletePaymentMethod_args)that);
      return false;
    }

    public boolean equals(deletePaymentMethod_args that) {
      if (that == null)
        return false;

      boolean this_present_paymentMethodId = true && this.isSetPaymentMethodId();
      boolean that_present_paymentMethodId = true && that.isSetPaymentMethodId();
      if (this_present_paymentMethodId || that_present_paymentMethodId) {
        if (!(this_present_paymentMethodId && that_present_paymentMethodId))
          return false;
        if (!this.paymentMethodId.equals(that.paymentMethodId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_paymentMethodId = true && (isSetPaymentMethodId());
      list.add(present_paymentMethodId);
      if (present_paymentMethodId)
        list.add(paymentMethodId);

      return list.hashCode();
    }

    @Override
    public int compareTo(deletePaymentMethod_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPaymentMethodId()).compareTo(other.isSetPaymentMethodId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPaymentMethodId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paymentMethodId, other.paymentMethodId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deletePaymentMethod_args(");
      boolean first = true;

      sb.append("paymentMethodId:");
      if (this.paymentMethodId == null) {
        sb.append("null");
      } else {
        sb.append(this.paymentMethodId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deletePaymentMethod_argsStandardSchemeFactory implements SchemeFactory {
      public deletePaymentMethod_argsStandardScheme getScheme() {
        return new deletePaymentMethod_argsStandardScheme();
      }
    }

    private static class deletePaymentMethod_argsStandardScheme extends StandardScheme<deletePaymentMethod_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deletePaymentMethod_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PAYMENT_METHOD_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.paymentMethodId = iprot.readString();
                struct.setPaymentMethodIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deletePaymentMethod_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.paymentMethodId != null) {
          oprot.writeFieldBegin(PAYMENT_METHOD_ID_FIELD_DESC);
          oprot.writeString(struct.paymentMethodId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deletePaymentMethod_argsTupleSchemeFactory implements SchemeFactory {
      public deletePaymentMethod_argsTupleScheme getScheme() {
        return new deletePaymentMethod_argsTupleScheme();
      }
    }

    private static class deletePaymentMethod_argsTupleScheme extends TupleScheme<deletePaymentMethod_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deletePaymentMethod_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPaymentMethodId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetPaymentMethodId()) {
          oprot.writeString(struct.paymentMethodId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deletePaymentMethod_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.paymentMethodId = iprot.readString();
          struct.setPaymentMethodIdIsSet(true);
        }
      }
    }

  }

  public static class deletePaymentMethod_result implements org.apache.thrift.TBase<deletePaymentMethod_result, deletePaymentMethod_result._Fields>, java.io.Serializable, Cloneable, Comparable<deletePaymentMethod_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deletePaymentMethod_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deletePaymentMethod_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deletePaymentMethod_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deletePaymentMethod_result.class, metaDataMap);
    }

    public deletePaymentMethod_result() {
    }

    public deletePaymentMethod_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deletePaymentMethod_result(deletePaymentMethod_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public deletePaymentMethod_result deepCopy() {
      return new deletePaymentMethod_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public deletePaymentMethod_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deletePaymentMethod_result)
        return this.equals((deletePaymentMethod_result)that);
      return false;
    }

    public boolean equals(deletePaymentMethod_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(deletePaymentMethod_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deletePaymentMethod_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deletePaymentMethod_resultStandardSchemeFactory implements SchemeFactory {
      public deletePaymentMethod_resultStandardScheme getScheme() {
        return new deletePaymentMethod_resultStandardScheme();
      }
    }

    private static class deletePaymentMethod_resultStandardScheme extends StandardScheme<deletePaymentMethod_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deletePaymentMethod_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deletePaymentMethod_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deletePaymentMethod_resultTupleSchemeFactory implements SchemeFactory {
      public deletePaymentMethod_resultTupleScheme getScheme() {
        return new deletePaymentMethod_resultTupleScheme();
      }
    }

    private static class deletePaymentMethod_resultTupleScheme extends TupleScheme<deletePaymentMethod_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deletePaymentMethod_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deletePaymentMethod_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class confirm_args implements org.apache.thrift.TBase<confirm_args, confirm_args._Fields>, java.io.Serializable, Cloneable, Comparable<confirm_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("confirm_args");

    private static final org.apache.thrift.protocol.TField ORDERID_FIELD_DESC = new org.apache.thrift.protocol.TField("orderid", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new confirm_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new confirm_argsTupleSchemeFactory());
    }

    public String orderid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORDERID((short)1, "orderid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORDERID
            return ORDERID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORDERID, new org.apache.thrift.meta_data.FieldMetaData("orderid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(confirm_args.class, metaDataMap);
    }

    public confirm_args() {
    }

    public confirm_args(
      String orderid)
    {
      this();
      this.orderid = orderid;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public confirm_args(confirm_args other) {
      if (other.isSetOrderid()) {
        this.orderid = other.orderid;
      }
    }

    public confirm_args deepCopy() {
      return new confirm_args(this);
    }

    @Override
    public void clear() {
      this.orderid = null;
    }

    public String getOrderid() {
      return this.orderid;
    }

    public confirm_args setOrderid(String orderid) {
      this.orderid = orderid;
      return this;
    }

    public void unsetOrderid() {
      this.orderid = null;
    }

    /** Returns true if field orderid is set (has been assigned a value) and false otherwise */
    public boolean isSetOrderid() {
      return this.orderid != null;
    }

    public void setOrderidIsSet(boolean value) {
      if (!value) {
        this.orderid = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORDERID:
        if (value == null) {
          unsetOrderid();
        } else {
          setOrderid((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORDERID:
        return getOrderid();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORDERID:
        return isSetOrderid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof confirm_args)
        return this.equals((confirm_args)that);
      return false;
    }

    public boolean equals(confirm_args that) {
      if (that == null)
        return false;

      boolean this_present_orderid = true && this.isSetOrderid();
      boolean that_present_orderid = true && that.isSetOrderid();
      if (this_present_orderid || that_present_orderid) {
        if (!(this_present_orderid && that_present_orderid))
          return false;
        if (!this.orderid.equals(that.orderid))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_orderid = true && (isSetOrderid());
      list.add(present_orderid);
      if (present_orderid)
        list.add(orderid);

      return list.hashCode();
    }

    @Override
    public int compareTo(confirm_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOrderid()).compareTo(other.isSetOrderid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOrderid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderid, other.orderid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("confirm_args(");
      boolean first = true;

      sb.append("orderid:");
      if (this.orderid == null) {
        sb.append("null");
      } else {
        sb.append(this.orderid);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class confirm_argsStandardSchemeFactory implements SchemeFactory {
      public confirm_argsStandardScheme getScheme() {
        return new confirm_argsStandardScheme();
      }
    }

    private static class confirm_argsStandardScheme extends StandardScheme<confirm_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, confirm_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORDERID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.orderid = iprot.readString();
                struct.setOrderidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, confirm_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.orderid != null) {
          oprot.writeFieldBegin(ORDERID_FIELD_DESC);
          oprot.writeString(struct.orderid);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class confirm_argsTupleSchemeFactory implements SchemeFactory {
      public confirm_argsTupleScheme getScheme() {
        return new confirm_argsTupleScheme();
      }
    }

    private static class confirm_argsTupleScheme extends TupleScheme<confirm_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, confirm_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOrderid()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetOrderid()) {
          oprot.writeString(struct.orderid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, confirm_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.orderid = iprot.readString();
          struct.setOrderidIsSet(true);
        }
      }
    }

  }

  public static class confirm_result implements org.apache.thrift.TBase<confirm_result, confirm_result._Fields>, java.io.Serializable, Cloneable, Comparable<confirm_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("confirm_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new confirm_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new confirm_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(confirm_result.class, metaDataMap);
    }

    public confirm_result() {
    }

    public confirm_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public confirm_result(confirm_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public confirm_result deepCopy() {
      return new confirm_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public confirm_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof confirm_result)
        return this.equals((confirm_result)that);
      return false;
    }

    public boolean equals(confirm_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(confirm_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("confirm_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class confirm_resultStandardSchemeFactory implements SchemeFactory {
      public confirm_resultStandardScheme getScheme() {
        return new confirm_resultStandardScheme();
      }
    }

    private static class confirm_resultStandardScheme extends StandardScheme<confirm_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, confirm_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, confirm_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class confirm_resultTupleSchemeFactory implements SchemeFactory {
      public confirm_resultTupleScheme getScheme() {
        return new confirm_resultTupleScheme();
      }
    }

    private static class confirm_resultTupleScheme extends TupleScheme<confirm_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, confirm_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, confirm_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class checkout_args implements org.apache.thrift.TBase<checkout_args, checkout_args._Fields>, java.io.Serializable, Cloneable, Comparable<checkout_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("checkout_args");

    private static final org.apache.thrift.protocol.TField PAYMENT_SUBJECT_FIELD_DESC = new org.apache.thrift.protocol.TField("paymentSubject", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PAYMENT_METHOD_FIELD_DESC = new org.apache.thrift.protocol.TField("paymentMethod", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField FEE_FIELD_DESC = new org.apache.thrift.protocol.TField("fee", org.apache.thrift.protocol.TType.STRING, (short)5);
    private static final org.apache.thrift.protocol.TField __REMOTE_ADDR_FIELD_DESC = new org.apache.thrift.protocol.TField("__remoteAddr", org.apache.thrift.protocol.TType.STRING, (short)6);
    private static final org.apache.thrift.protocol.TField SUBJECT_FIELD_DESC = new org.apache.thrift.protocol.TField("subject", org.apache.thrift.protocol.TType.STRING, (short)7);
    private static final org.apache.thrift.protocol.TField BODY_FIELD_DESC = new org.apache.thrift.protocol.TField("body", org.apache.thrift.protocol.TType.STRING, (short)8);
    private static final org.apache.thrift.protocol.TField DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("description", org.apache.thrift.protocol.TType.STRING, (short)9);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new checkout_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new checkout_argsTupleSchemeFactory());
    }

    public String paymentSubject; // required
    public String paymentMethod; // required
    public int type; // required
    public String token; // required
    public String fee; // required
    public String __remoteAddr; // required
    public String subject; // required
    public String body; // required
    public String description; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PAYMENT_SUBJECT((short)1, "paymentSubject"),
      PAYMENT_METHOD((short)2, "paymentMethod"),
      TYPE((short)3, "type"),
      TOKEN((short)4, "token"),
      FEE((short)5, "fee"),
      __REMOTE_ADDR((short)6, "__remoteAddr"),
      SUBJECT((short)7, "subject"),
      BODY((short)8, "body"),
      DESCRIPTION((short)9, "description");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PAYMENT_SUBJECT
            return PAYMENT_SUBJECT;
          case 2: // PAYMENT_METHOD
            return PAYMENT_METHOD;
          case 3: // TYPE
            return TYPE;
          case 4: // TOKEN
            return TOKEN;
          case 5: // FEE
            return FEE;
          case 6: // __REMOTE_ADDR
            return __REMOTE_ADDR;
          case 7: // SUBJECT
            return SUBJECT;
          case 8: // BODY
            return BODY;
          case 9: // DESCRIPTION
            return DESCRIPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TYPE_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PAYMENT_SUBJECT, new org.apache.thrift.meta_data.FieldMetaData("paymentSubject", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PAYMENT_METHOD, new org.apache.thrift.meta_data.FieldMetaData("paymentMethod", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.FEE, new org.apache.thrift.meta_data.FieldMetaData("fee", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.__REMOTE_ADDR, new org.apache.thrift.meta_data.FieldMetaData("__remoteAddr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SUBJECT, new org.apache.thrift.meta_data.FieldMetaData("subject", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.BODY, new org.apache.thrift.meta_data.FieldMetaData("body", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("description", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(checkout_args.class, metaDataMap);
    }

    public checkout_args() {
    }

    public checkout_args(
      String paymentSubject,
      String paymentMethod,
      int type,
      String token,
      String fee,
      String __remoteAddr,
      String subject,
      String body,
      String description)
    {
      this();
      this.paymentSubject = paymentSubject;
      this.paymentMethod = paymentMethod;
      this.type = type;
      setTypeIsSet(true);
      this.token = token;
      this.fee = fee;
      this.__remoteAddr = __remoteAddr;
      this.subject = subject;
      this.body = body;
      this.description = description;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public checkout_args(checkout_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetPaymentSubject()) {
        this.paymentSubject = other.paymentSubject;
      }
      if (other.isSetPaymentMethod()) {
        this.paymentMethod = other.paymentMethod;
      }
      this.type = other.type;
      if (other.isSetToken()) {
        this.token = other.token;
      }
      if (other.isSetFee()) {
        this.fee = other.fee;
      }
      if (other.isSet__remoteAddr()) {
        this.__remoteAddr = other.__remoteAddr;
      }
      if (other.isSetSubject()) {
        this.subject = other.subject;
      }
      if (other.isSetBody()) {
        this.body = other.body;
      }
      if (other.isSetDescription()) {
        this.description = other.description;
      }
    }

    public checkout_args deepCopy() {
      return new checkout_args(this);
    }

    @Override
    public void clear() {
      this.paymentSubject = null;
      this.paymentMethod = null;
      setTypeIsSet(false);
      this.type = 0;
      this.token = null;
      this.fee = null;
      this.__remoteAddr = null;
      this.subject = null;
      this.body = null;
      this.description = null;
    }

    public String getPaymentSubject() {
      return this.paymentSubject;
    }

    public checkout_args setPaymentSubject(String paymentSubject) {
      this.paymentSubject = paymentSubject;
      return this;
    }

    public void unsetPaymentSubject() {
      this.paymentSubject = null;
    }

    /** Returns true if field paymentSubject is set (has been assigned a value) and false otherwise */
    public boolean isSetPaymentSubject() {
      return this.paymentSubject != null;
    }

    public void setPaymentSubjectIsSet(boolean value) {
      if (!value) {
        this.paymentSubject = null;
      }
    }

    public String getPaymentMethod() {
      return this.paymentMethod;
    }

    public checkout_args setPaymentMethod(String paymentMethod) {
      this.paymentMethod = paymentMethod;
      return this;
    }

    public void unsetPaymentMethod() {
      this.paymentMethod = null;
    }

    /** Returns true if field paymentMethod is set (has been assigned a value) and false otherwise */
    public boolean isSetPaymentMethod() {
      return this.paymentMethod != null;
    }

    public void setPaymentMethodIsSet(boolean value) {
      if (!value) {
        this.paymentMethod = null;
      }
    }

    public int getType() {
      return this.type;
    }

    public checkout_args setType(int type) {
      this.type = type;
      setTypeIsSet(true);
      return this;
    }

    public void unsetType() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TYPE_ISSET_ID);
    }

    /** Returns true if field type is set (has been assigned a value) and false otherwise */
    public boolean isSetType() {
      return EncodingUtils.testBit(__isset_bitfield, __TYPE_ISSET_ID);
    }

    public void setTypeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TYPE_ISSET_ID, value);
    }

    public String getToken() {
      return this.token;
    }

    public checkout_args setToken(String token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been assigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public String getFee() {
      return this.fee;
    }

    public checkout_args setFee(String fee) {
      this.fee = fee;
      return this;
    }

    public void unsetFee() {
      this.fee = null;
    }

    /** Returns true if field fee is set (has been assigned a value) and false otherwise */
    public boolean isSetFee() {
      return this.fee != null;
    }

    public void setFeeIsSet(boolean value) {
      if (!value) {
        this.fee = null;
      }
    }

    public String get__remoteAddr() {
      return this.__remoteAddr;
    }

    public checkout_args set__remoteAddr(String __remoteAddr) {
      this.__remoteAddr = __remoteAddr;
      return this;
    }

    public void unset__remoteAddr() {
      this.__remoteAddr = null;
    }

    /** Returns true if field __remoteAddr is set (has been assigned a value) and false otherwise */
    public boolean isSet__remoteAddr() {
      return this.__remoteAddr != null;
    }

    public void set__remoteAddrIsSet(boolean value) {
      if (!value) {
        this.__remoteAddr = null;
      }
    }

    public String getSubject() {
      return this.subject;
    }

    public checkout_args setSubject(String subject) {
      this.subject = subject;
      return this;
    }

    public void unsetSubject() {
      this.subject = null;
    }

    /** Returns true if field subject is set (has been assigned a value) and false otherwise */
    public boolean isSetSubject() {
      return this.subject != null;
    }

    public void setSubjectIsSet(boolean value) {
      if (!value) {
        this.subject = null;
      }
    }

    public String getBody() {
      return this.body;
    }

    public checkout_args setBody(String body) {
      this.body = body;
      return this;
    }

    public void unsetBody() {
      this.body = null;
    }

    /** Returns true if field body is set (has been assigned a value) and false otherwise */
    public boolean isSetBody() {
      return this.body != null;
    }

    public void setBodyIsSet(boolean value) {
      if (!value) {
        this.body = null;
      }
    }

    public String getDescription() {
      return this.description;
    }

    public checkout_args setDescription(String description) {
      this.description = description;
      return this;
    }

    public void unsetDescription() {
      this.description = null;
    }

    /** Returns true if field description is set (has been assigned a value) and false otherwise */
    public boolean isSetDescription() {
      return this.description != null;
    }

    public void setDescriptionIsSet(boolean value) {
      if (!value) {
        this.description = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PAYMENT_SUBJECT:
        if (value == null) {
          unsetPaymentSubject();
        } else {
          setPaymentSubject((String)value);
        }
        break;

      case PAYMENT_METHOD:
        if (value == null) {
          unsetPaymentMethod();
        } else {
          setPaymentMethod((String)value);
        }
        break;

      case TYPE:
        if (value == null) {
          unsetType();
        } else {
          setType((Integer)value);
        }
        break;

      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((String)value);
        }
        break;

      case FEE:
        if (value == null) {
          unsetFee();
        } else {
          setFee((String)value);
        }
        break;

      case __REMOTE_ADDR:
        if (value == null) {
          unset__remoteAddr();
        } else {
          set__remoteAddr((String)value);
        }
        break;

      case SUBJECT:
        if (value == null) {
          unsetSubject();
        } else {
          setSubject((String)value);
        }
        break;

      case BODY:
        if (value == null) {
          unsetBody();
        } else {
          setBody((String)value);
        }
        break;

      case DESCRIPTION:
        if (value == null) {
          unsetDescription();
        } else {
          setDescription((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PAYMENT_SUBJECT:
        return getPaymentSubject();

      case PAYMENT_METHOD:
        return getPaymentMethod();

      case TYPE:
        return getType();

      case TOKEN:
        return getToken();

      case FEE:
        return getFee();

      case __REMOTE_ADDR:
        return get__remoteAddr();

      case SUBJECT:
        return getSubject();

      case BODY:
        return getBody();

      case DESCRIPTION:
        return getDescription();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PAYMENT_SUBJECT:
        return isSetPaymentSubject();
      case PAYMENT_METHOD:
        return isSetPaymentMethod();
      case TYPE:
        return isSetType();
      case TOKEN:
        return isSetToken();
      case FEE:
        return isSetFee();
      case __REMOTE_ADDR:
        return isSet__remoteAddr();
      case SUBJECT:
        return isSetSubject();
      case BODY:
        return isSetBody();
      case DESCRIPTION:
        return isSetDescription();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof checkout_args)
        return this.equals((checkout_args)that);
      return false;
    }

    public boolean equals(checkout_args that) {
      if (that == null)
        return false;

      boolean this_present_paymentSubject = true && this.isSetPaymentSubject();
      boolean that_present_paymentSubject = true && that.isSetPaymentSubject();
      if (this_present_paymentSubject || that_present_paymentSubject) {
        if (!(this_present_paymentSubject && that_present_paymentSubject))
          return false;
        if (!this.paymentSubject.equals(that.paymentSubject))
          return false;
      }

      boolean this_present_paymentMethod = true && this.isSetPaymentMethod();
      boolean that_present_paymentMethod = true && that.isSetPaymentMethod();
      if (this_present_paymentMethod || that_present_paymentMethod) {
        if (!(this_present_paymentMethod && that_present_paymentMethod))
          return false;
        if (!this.paymentMethod.equals(that.paymentMethod))
          return false;
      }

      boolean this_present_type = true;
      boolean that_present_type = true;
      if (this_present_type || that_present_type) {
        if (!(this_present_type && that_present_type))
          return false;
        if (this.type != that.type)
          return false;
      }

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      boolean this_present_fee = true && this.isSetFee();
      boolean that_present_fee = true && that.isSetFee();
      if (this_present_fee || that_present_fee) {
        if (!(this_present_fee && that_present_fee))
          return false;
        if (!this.fee.equals(that.fee))
          return false;
      }

      boolean this_present___remoteAddr = true && this.isSet__remoteAddr();
      boolean that_present___remoteAddr = true && that.isSet__remoteAddr();
      if (this_present___remoteAddr || that_present___remoteAddr) {
        if (!(this_present___remoteAddr && that_present___remoteAddr))
          return false;
        if (!this.__remoteAddr.equals(that.__remoteAddr))
          return false;
      }

      boolean this_present_subject = true && this.isSetSubject();
      boolean that_present_subject = true && that.isSetSubject();
      if (this_present_subject || that_present_subject) {
        if (!(this_present_subject && that_present_subject))
          return false;
        if (!this.subject.equals(that.subject))
          return false;
      }

      boolean this_present_body = true && this.isSetBody();
      boolean that_present_body = true && that.isSetBody();
      if (this_present_body || that_present_body) {
        if (!(this_present_body && that_present_body))
          return false;
        if (!this.body.equals(that.body))
          return false;
      }

      boolean this_present_description = true && this.isSetDescription();
      boolean that_present_description = true && that.isSetDescription();
      if (this_present_description || that_present_description) {
        if (!(this_present_description && that_present_description))
          return false;
        if (!this.description.equals(that.description))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_paymentSubject = true && (isSetPaymentSubject());
      list.add(present_paymentSubject);
      if (present_paymentSubject)
        list.add(paymentSubject);

      boolean present_paymentMethod = true && (isSetPaymentMethod());
      list.add(present_paymentMethod);
      if (present_paymentMethod)
        list.add(paymentMethod);

      boolean present_type = true;
      list.add(present_type);
      if (present_type)
        list.add(type);

      boolean present_token = true && (isSetToken());
      list.add(present_token);
      if (present_token)
        list.add(token);

      boolean present_fee = true && (isSetFee());
      list.add(present_fee);
      if (present_fee)
        list.add(fee);

      boolean present___remoteAddr = true && (isSet__remoteAddr());
      list.add(present___remoteAddr);
      if (present___remoteAddr)
        list.add(__remoteAddr);

      boolean present_subject = true && (isSetSubject());
      list.add(present_subject);
      if (present_subject)
        list.add(subject);

      boolean present_body = true && (isSetBody());
      list.add(present_body);
      if (present_body)
        list.add(body);

      boolean present_description = true && (isSetDescription());
      list.add(present_description);
      if (present_description)
        list.add(description);

      return list.hashCode();
    }

    @Override
    public int compareTo(checkout_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPaymentSubject()).compareTo(other.isSetPaymentSubject());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPaymentSubject()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paymentSubject, other.paymentSubject);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPaymentMethod()).compareTo(other.isSetPaymentMethod());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPaymentMethod()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paymentMethod, other.paymentMethod);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetToken()).compareTo(other.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, other.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFee()).compareTo(other.isSetFee());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFee()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fee, other.fee);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSet__remoteAddr()).compareTo(other.isSet__remoteAddr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet__remoteAddr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.__remoteAddr, other.__remoteAddr);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSubject()).compareTo(other.isSetSubject());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSubject()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subject, other.subject);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBody()).compareTo(other.isSetBody());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBody()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.body, other.body);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDescription()).compareTo(other.isSetDescription());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDescription()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.description, other.description);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("checkout_args(");
      boolean first = true;

      sb.append("paymentSubject:");
      if (this.paymentSubject == null) {
        sb.append("null");
      } else {
        sb.append(this.paymentSubject);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("paymentMethod:");
      if (this.paymentMethod == null) {
        sb.append("null");
      } else {
        sb.append(this.paymentMethod);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("type:");
      sb.append(this.type);
      first = false;
      if (!first) sb.append(", ");
      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("fee:");
      if (this.fee == null) {
        sb.append("null");
      } else {
        sb.append(this.fee);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("__remoteAddr:");
      if (this.__remoteAddr == null) {
        sb.append("null");
      } else {
        sb.append(this.__remoteAddr);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("subject:");
      if (this.subject == null) {
        sb.append("null");
      } else {
        sb.append(this.subject);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("body:");
      if (this.body == null) {
        sb.append("null");
      } else {
        sb.append(this.body);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("description:");
      if (this.description == null) {
        sb.append("null");
      } else {
        sb.append(this.description);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class checkout_argsStandardSchemeFactory implements SchemeFactory {
      public checkout_argsStandardScheme getScheme() {
        return new checkout_argsStandardScheme();
      }
    }

    private static class checkout_argsStandardScheme extends StandardScheme<checkout_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, checkout_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PAYMENT_SUBJECT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.paymentSubject = iprot.readString();
                struct.setPaymentSubjectIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PAYMENT_METHOD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.paymentMethod = iprot.readString();
                struct.setPaymentMethodIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.type = iprot.readI32();
                struct.setTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.token = iprot.readString();
                struct.setTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // FEE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.fee = iprot.readString();
                struct.setFeeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // __REMOTE_ADDR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.__remoteAddr = iprot.readString();
                struct.set__remoteAddrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // SUBJECT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.subject = iprot.readString();
                struct.setSubjectIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 8: // BODY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.body = iprot.readString();
                struct.setBodyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 9: // DESCRIPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.description = iprot.readString();
                struct.setDescriptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, checkout_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.paymentSubject != null) {
          oprot.writeFieldBegin(PAYMENT_SUBJECT_FIELD_DESC);
          oprot.writeString(struct.paymentSubject);
          oprot.writeFieldEnd();
        }
        if (struct.paymentMethod != null) {
          oprot.writeFieldBegin(PAYMENT_METHOD_FIELD_DESC);
          oprot.writeString(struct.paymentMethod);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeI32(struct.type);
        oprot.writeFieldEnd();
        if (struct.token != null) {
          oprot.writeFieldBegin(TOKEN_FIELD_DESC);
          oprot.writeString(struct.token);
          oprot.writeFieldEnd();
        }
        if (struct.fee != null) {
          oprot.writeFieldBegin(FEE_FIELD_DESC);
          oprot.writeString(struct.fee);
          oprot.writeFieldEnd();
        }
        if (struct.__remoteAddr != null) {
          oprot.writeFieldBegin(__REMOTE_ADDR_FIELD_DESC);
          oprot.writeString(struct.__remoteAddr);
          oprot.writeFieldEnd();
        }
        if (struct.subject != null) {
          oprot.writeFieldBegin(SUBJECT_FIELD_DESC);
          oprot.writeString(struct.subject);
          oprot.writeFieldEnd();
        }
        if (struct.body != null) {
          oprot.writeFieldBegin(BODY_FIELD_DESC);
          oprot.writeString(struct.body);
          oprot.writeFieldEnd();
        }
        if (struct.description != null) {
          oprot.writeFieldBegin(DESCRIPTION_FIELD_DESC);
          oprot.writeString(struct.description);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class checkout_argsTupleSchemeFactory implements SchemeFactory {
      public checkout_argsTupleScheme getScheme() {
        return new checkout_argsTupleScheme();
      }
    }

    private static class checkout_argsTupleScheme extends TupleScheme<checkout_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, checkout_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPaymentSubject()) {
          optionals.set(0);
        }
        if (struct.isSetPaymentMethod()) {
          optionals.set(1);
        }
        if (struct.isSetType()) {
          optionals.set(2);
        }
        if (struct.isSetToken()) {
          optionals.set(3);
        }
        if (struct.isSetFee()) {
          optionals.set(4);
        }
        if (struct.isSet__remoteAddr()) {
          optionals.set(5);
        }
        if (struct.isSetSubject()) {
          optionals.set(6);
        }
        if (struct.isSetBody()) {
          optionals.set(7);
        }
        if (struct.isSetDescription()) {
          optionals.set(8);
        }
        oprot.writeBitSet(optionals, 9);
        if (struct.isSetPaymentSubject()) {
          oprot.writeString(struct.paymentSubject);
        }
        if (struct.isSetPaymentMethod()) {
          oprot.writeString(struct.paymentMethod);
        }
        if (struct.isSetType()) {
          oprot.writeI32(struct.type);
        }
        if (struct.isSetToken()) {
          oprot.writeString(struct.token);
        }
        if (struct.isSetFee()) {
          oprot.writeString(struct.fee);
        }
        if (struct.isSet__remoteAddr()) {
          oprot.writeString(struct.__remoteAddr);
        }
        if (struct.isSetSubject()) {
          oprot.writeString(struct.subject);
        }
        if (struct.isSetBody()) {
          oprot.writeString(struct.body);
        }
        if (struct.isSetDescription()) {
          oprot.writeString(struct.description);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, checkout_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(9);
        if (incoming.get(0)) {
          struct.paymentSubject = iprot.readString();
          struct.setPaymentSubjectIsSet(true);
        }
        if (incoming.get(1)) {
          struct.paymentMethod = iprot.readString();
          struct.setPaymentMethodIsSet(true);
        }
        if (incoming.get(2)) {
          struct.type = iprot.readI32();
          struct.setTypeIsSet(true);
        }
        if (incoming.get(3)) {
          struct.token = iprot.readString();
          struct.setTokenIsSet(true);
        }
        if (incoming.get(4)) {
          struct.fee = iprot.readString();
          struct.setFeeIsSet(true);
        }
        if (incoming.get(5)) {
          struct.__remoteAddr = iprot.readString();
          struct.set__remoteAddrIsSet(true);
        }
        if (incoming.get(6)) {
          struct.subject = iprot.readString();
          struct.setSubjectIsSet(true);
        }
        if (incoming.get(7)) {
          struct.body = iprot.readString();
          struct.setBodyIsSet(true);
        }
        if (incoming.get(8)) {
          struct.description = iprot.readString();
          struct.setDescriptionIsSet(true);
        }
      }
    }

  }

  public static class checkout_result implements org.apache.thrift.TBase<checkout_result, checkout_result._Fields>, java.io.Serializable, Cloneable, Comparable<checkout_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("checkout_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new checkout_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new checkout_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(checkout_result.class, metaDataMap);
    }

    public checkout_result() {
    }

    public checkout_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public checkout_result(checkout_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public checkout_result deepCopy() {
      return new checkout_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public checkout_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof checkout_result)
        return this.equals((checkout_result)that);
      return false;
    }

    public boolean equals(checkout_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(checkout_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("checkout_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class checkout_resultStandardSchemeFactory implements SchemeFactory {
      public checkout_resultStandardScheme getScheme() {
        return new checkout_resultStandardScheme();
      }
    }

    private static class checkout_resultStandardScheme extends StandardScheme<checkout_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, checkout_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, checkout_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class checkout_resultTupleSchemeFactory implements SchemeFactory {
      public checkout_resultTupleScheme getScheme() {
        return new checkout_resultTupleScheme();
      }
    }

    private static class checkout_resultTupleScheme extends TupleScheme<checkout_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, checkout_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, checkout_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class directPay_args implements org.apache.thrift.TBase<directPay_args, directPay_args._Fields>, java.io.Serializable, Cloneable, Comparable<directPay_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("directPay_args");

    private static final org.apache.thrift.protocol.TField CHARGE_FIELD_DESC = new org.apache.thrift.protocol.TField("charge", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("password", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new directPay_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new directPay_argsTupleSchemeFactory());
    }

    public String charge; // required
    public String password; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CHARGE((short)1, "charge"),
      PASSWORD((short)2, "password");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CHARGE
            return CHARGE;
          case 2: // PASSWORD
            return PASSWORD;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CHARGE, new org.apache.thrift.meta_data.FieldMetaData("charge", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("password", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(directPay_args.class, metaDataMap);
    }

    public directPay_args() {
    }

    public directPay_args(
      String charge,
      String password)
    {
      this();
      this.charge = charge;
      this.password = password;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public directPay_args(directPay_args other) {
      if (other.isSetCharge()) {
        this.charge = other.charge;
      }
      if (other.isSetPassword()) {
        this.password = other.password;
      }
    }

    public directPay_args deepCopy() {
      return new directPay_args(this);
    }

    @Override
    public void clear() {
      this.charge = null;
      this.password = null;
    }

    public String getCharge() {
      return this.charge;
    }

    public directPay_args setCharge(String charge) {
      this.charge = charge;
      return this;
    }

    public void unsetCharge() {
      this.charge = null;
    }

    /** Returns true if field charge is set (has been assigned a value) and false otherwise */
    public boolean isSetCharge() {
      return this.charge != null;
    }

    public void setChargeIsSet(boolean value) {
      if (!value) {
        this.charge = null;
      }
    }

    public String getPassword() {
      return this.password;
    }

    public directPay_args setPassword(String password) {
      this.password = password;
      return this;
    }

    public void unsetPassword() {
      this.password = null;
    }

    /** Returns true if field password is set (has been assigned a value) and false otherwise */
    public boolean isSetPassword() {
      return this.password != null;
    }

    public void setPasswordIsSet(boolean value) {
      if (!value) {
        this.password = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CHARGE:
        if (value == null) {
          unsetCharge();
        } else {
          setCharge((String)value);
        }
        break;

      case PASSWORD:
        if (value == null) {
          unsetPassword();
        } else {
          setPassword((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CHARGE:
        return getCharge();

      case PASSWORD:
        return getPassword();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CHARGE:
        return isSetCharge();
      case PASSWORD:
        return isSetPassword();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof directPay_args)
        return this.equals((directPay_args)that);
      return false;
    }

    public boolean equals(directPay_args that) {
      if (that == null)
        return false;

      boolean this_present_charge = true && this.isSetCharge();
      boolean that_present_charge = true && that.isSetCharge();
      if (this_present_charge || that_present_charge) {
        if (!(this_present_charge && that_present_charge))
          return false;
        if (!this.charge.equals(that.charge))
          return false;
      }

      boolean this_present_password = true && this.isSetPassword();
      boolean that_present_password = true && that.isSetPassword();
      if (this_present_password || that_present_password) {
        if (!(this_present_password && that_present_password))
          return false;
        if (!this.password.equals(that.password))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_charge = true && (isSetCharge());
      list.add(present_charge);
      if (present_charge)
        list.add(charge);

      boolean present_password = true && (isSetPassword());
      list.add(present_password);
      if (present_password)
        list.add(password);

      return list.hashCode();
    }

    @Override
    public int compareTo(directPay_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCharge()).compareTo(other.isSetCharge());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCharge()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.charge, other.charge);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPassword()).compareTo(other.isSetPassword());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPassword()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.password, other.password);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("directPay_args(");
      boolean first = true;

      sb.append("charge:");
      if (this.charge == null) {
        sb.append("null");
      } else {
        sb.append(this.charge);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("password:");
      if (this.password == null) {
        sb.append("null");
      } else {
        sb.append(this.password);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class directPay_argsStandardSchemeFactory implements SchemeFactory {
      public directPay_argsStandardScheme getScheme() {
        return new directPay_argsStandardScheme();
      }
    }

    private static class directPay_argsStandardScheme extends StandardScheme<directPay_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, directPay_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CHARGE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.charge = iprot.readString();
                struct.setChargeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PASSWORD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.password = iprot.readString();
                struct.setPasswordIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, directPay_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.charge != null) {
          oprot.writeFieldBegin(CHARGE_FIELD_DESC);
          oprot.writeString(struct.charge);
          oprot.writeFieldEnd();
        }
        if (struct.password != null) {
          oprot.writeFieldBegin(PASSWORD_FIELD_DESC);
          oprot.writeString(struct.password);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class directPay_argsTupleSchemeFactory implements SchemeFactory {
      public directPay_argsTupleScheme getScheme() {
        return new directPay_argsTupleScheme();
      }
    }

    private static class directPay_argsTupleScheme extends TupleScheme<directPay_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, directPay_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCharge()) {
          optionals.set(0);
        }
        if (struct.isSetPassword()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetCharge()) {
          oprot.writeString(struct.charge);
        }
        if (struct.isSetPassword()) {
          oprot.writeString(struct.password);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, directPay_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.charge = iprot.readString();
          struct.setChargeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.password = iprot.readString();
          struct.setPasswordIsSet(true);
        }
      }
    }

  }

  public static class directPay_result implements org.apache.thrift.TBase<directPay_result, directPay_result._Fields>, java.io.Serializable, Cloneable, Comparable<directPay_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("directPay_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new directPay_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new directPay_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(directPay_result.class, metaDataMap);
    }

    public directPay_result() {
    }

    public directPay_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public directPay_result(directPay_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public directPay_result deepCopy() {
      return new directPay_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public directPay_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof directPay_result)
        return this.equals((directPay_result)that);
      return false;
    }

    public boolean equals(directPay_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(directPay_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("directPay_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class directPay_resultStandardSchemeFactory implements SchemeFactory {
      public directPay_resultStandardScheme getScheme() {
        return new directPay_resultStandardScheme();
      }
    }

    private static class directPay_resultStandardScheme extends StandardScheme<directPay_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, directPay_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, directPay_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class directPay_resultTupleSchemeFactory implements SchemeFactory {
      public directPay_resultTupleScheme getScheme() {
        return new directPay_resultTupleScheme();
      }
    }

    private static class directPay_resultTupleScheme extends TupleScheme<directPay_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, directPay_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, directPay_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class finishPayment_args implements org.apache.thrift.TBase<finishPayment_args, finishPayment_args._Fields>, java.io.Serializable, Cloneable, Comparable<finishPayment_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("finishPayment_args");

    private static final org.apache.thrift.protocol.TField PAYMENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("paymentId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new finishPayment_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new finishPayment_argsTupleSchemeFactory());
    }

    public String paymentId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PAYMENT_ID((short)1, "paymentId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PAYMENT_ID
            return PAYMENT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PAYMENT_ID, new org.apache.thrift.meta_data.FieldMetaData("paymentId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(finishPayment_args.class, metaDataMap);
    }

    public finishPayment_args() {
    }

    public finishPayment_args(
      String paymentId)
    {
      this();
      this.paymentId = paymentId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public finishPayment_args(finishPayment_args other) {
      if (other.isSetPaymentId()) {
        this.paymentId = other.paymentId;
      }
    }

    public finishPayment_args deepCopy() {
      return new finishPayment_args(this);
    }

    @Override
    public void clear() {
      this.paymentId = null;
    }

    public String getPaymentId() {
      return this.paymentId;
    }

    public finishPayment_args setPaymentId(String paymentId) {
      this.paymentId = paymentId;
      return this;
    }

    public void unsetPaymentId() {
      this.paymentId = null;
    }

    /** Returns true if field paymentId is set (has been assigned a value) and false otherwise */
    public boolean isSetPaymentId() {
      return this.paymentId != null;
    }

    public void setPaymentIdIsSet(boolean value) {
      if (!value) {
        this.paymentId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PAYMENT_ID:
        if (value == null) {
          unsetPaymentId();
        } else {
          setPaymentId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PAYMENT_ID:
        return getPaymentId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PAYMENT_ID:
        return isSetPaymentId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof finishPayment_args)
        return this.equals((finishPayment_args)that);
      return false;
    }

    public boolean equals(finishPayment_args that) {
      if (that == null)
        return false;

      boolean this_present_paymentId = true && this.isSetPaymentId();
      boolean that_present_paymentId = true && that.isSetPaymentId();
      if (this_present_paymentId || that_present_paymentId) {
        if (!(this_present_paymentId && that_present_paymentId))
          return false;
        if (!this.paymentId.equals(that.paymentId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_paymentId = true && (isSetPaymentId());
      list.add(present_paymentId);
      if (present_paymentId)
        list.add(paymentId);

      return list.hashCode();
    }

    @Override
    public int compareTo(finishPayment_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPaymentId()).compareTo(other.isSetPaymentId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPaymentId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paymentId, other.paymentId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("finishPayment_args(");
      boolean first = true;

      sb.append("paymentId:");
      if (this.paymentId == null) {
        sb.append("null");
      } else {
        sb.append(this.paymentId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class finishPayment_argsStandardSchemeFactory implements SchemeFactory {
      public finishPayment_argsStandardScheme getScheme() {
        return new finishPayment_argsStandardScheme();
      }
    }

    private static class finishPayment_argsStandardScheme extends StandardScheme<finishPayment_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, finishPayment_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PAYMENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.paymentId = iprot.readString();
                struct.setPaymentIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, finishPayment_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.paymentId != null) {
          oprot.writeFieldBegin(PAYMENT_ID_FIELD_DESC);
          oprot.writeString(struct.paymentId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class finishPayment_argsTupleSchemeFactory implements SchemeFactory {
      public finishPayment_argsTupleScheme getScheme() {
        return new finishPayment_argsTupleScheme();
      }
    }

    private static class finishPayment_argsTupleScheme extends TupleScheme<finishPayment_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, finishPayment_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPaymentId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetPaymentId()) {
          oprot.writeString(struct.paymentId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, finishPayment_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.paymentId = iprot.readString();
          struct.setPaymentIdIsSet(true);
        }
      }
    }

  }

  public static class finishPayment_result implements org.apache.thrift.TBase<finishPayment_result, finishPayment_result._Fields>, java.io.Serializable, Cloneable, Comparable<finishPayment_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("finishPayment_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new finishPayment_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new finishPayment_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(finishPayment_result.class, metaDataMap);
    }

    public finishPayment_result() {
    }

    public finishPayment_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public finishPayment_result(finishPayment_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public finishPayment_result deepCopy() {
      return new finishPayment_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public finishPayment_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof finishPayment_result)
        return this.equals((finishPayment_result)that);
      return false;
    }

    public boolean equals(finishPayment_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(finishPayment_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("finishPayment_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class finishPayment_resultStandardSchemeFactory implements SchemeFactory {
      public finishPayment_resultStandardScheme getScheme() {
        return new finishPayment_resultStandardScheme();
      }
    }

    private static class finishPayment_resultStandardScheme extends StandardScheme<finishPayment_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, finishPayment_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, finishPayment_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class finishPayment_resultTupleSchemeFactory implements SchemeFactory {
      public finishPayment_resultTupleScheme getScheme() {
        return new finishPayment_resultTupleScheme();
      }
    }

    private static class finishPayment_resultTupleScheme extends TupleScheme<finishPayment_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, finishPayment_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, finishPayment_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class cancelPayment_args implements org.apache.thrift.TBase<cancelPayment_args, cancelPayment_args._Fields>, java.io.Serializable, Cloneable, Comparable<cancelPayment_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("cancelPayment_args");

    private static final org.apache.thrift.protocol.TField PAYMENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("paymentId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new cancelPayment_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new cancelPayment_argsTupleSchemeFactory());
    }

    public String paymentId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PAYMENT_ID((short)1, "paymentId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PAYMENT_ID
            return PAYMENT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PAYMENT_ID, new org.apache.thrift.meta_data.FieldMetaData("paymentId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(cancelPayment_args.class, metaDataMap);
    }

    public cancelPayment_args() {
    }

    public cancelPayment_args(
      String paymentId)
    {
      this();
      this.paymentId = paymentId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public cancelPayment_args(cancelPayment_args other) {
      if (other.isSetPaymentId()) {
        this.paymentId = other.paymentId;
      }
    }

    public cancelPayment_args deepCopy() {
      return new cancelPayment_args(this);
    }

    @Override
    public void clear() {
      this.paymentId = null;
    }

    public String getPaymentId() {
      return this.paymentId;
    }

    public cancelPayment_args setPaymentId(String paymentId) {
      this.paymentId = paymentId;
      return this;
    }

    public void unsetPaymentId() {
      this.paymentId = null;
    }

    /** Returns true if field paymentId is set (has been assigned a value) and false otherwise */
    public boolean isSetPaymentId() {
      return this.paymentId != null;
    }

    public void setPaymentIdIsSet(boolean value) {
      if (!value) {
        this.paymentId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PAYMENT_ID:
        if (value == null) {
          unsetPaymentId();
        } else {
          setPaymentId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PAYMENT_ID:
        return getPaymentId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PAYMENT_ID:
        return isSetPaymentId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof cancelPayment_args)
        return this.equals((cancelPayment_args)that);
      return false;
    }

    public boolean equals(cancelPayment_args that) {
      if (that == null)
        return false;

      boolean this_present_paymentId = true && this.isSetPaymentId();
      boolean that_present_paymentId = true && that.isSetPaymentId();
      if (this_present_paymentId || that_present_paymentId) {
        if (!(this_present_paymentId && that_present_paymentId))
          return false;
        if (!this.paymentId.equals(that.paymentId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_paymentId = true && (isSetPaymentId());
      list.add(present_paymentId);
      if (present_paymentId)
        list.add(paymentId);

      return list.hashCode();
    }

    @Override
    public int compareTo(cancelPayment_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPaymentId()).compareTo(other.isSetPaymentId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPaymentId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paymentId, other.paymentId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("cancelPayment_args(");
      boolean first = true;

      sb.append("paymentId:");
      if (this.paymentId == null) {
        sb.append("null");
      } else {
        sb.append(this.paymentId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class cancelPayment_argsStandardSchemeFactory implements SchemeFactory {
      public cancelPayment_argsStandardScheme getScheme() {
        return new cancelPayment_argsStandardScheme();
      }
    }

    private static class cancelPayment_argsStandardScheme extends StandardScheme<cancelPayment_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, cancelPayment_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PAYMENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.paymentId = iprot.readString();
                struct.setPaymentIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, cancelPayment_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.paymentId != null) {
          oprot.writeFieldBegin(PAYMENT_ID_FIELD_DESC);
          oprot.writeString(struct.paymentId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class cancelPayment_argsTupleSchemeFactory implements SchemeFactory {
      public cancelPayment_argsTupleScheme getScheme() {
        return new cancelPayment_argsTupleScheme();
      }
    }

    private static class cancelPayment_argsTupleScheme extends TupleScheme<cancelPayment_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, cancelPayment_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPaymentId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetPaymentId()) {
          oprot.writeString(struct.paymentId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, cancelPayment_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.paymentId = iprot.readString();
          struct.setPaymentIdIsSet(true);
        }
      }
    }

  }

  public static class cancelPayment_result implements org.apache.thrift.TBase<cancelPayment_result, cancelPayment_result._Fields>, java.io.Serializable, Cloneable, Comparable<cancelPayment_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("cancelPayment_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new cancelPayment_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new cancelPayment_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(cancelPayment_result.class, metaDataMap);
    }

    public cancelPayment_result() {
    }

    public cancelPayment_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public cancelPayment_result(cancelPayment_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public cancelPayment_result deepCopy() {
      return new cancelPayment_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public cancelPayment_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof cancelPayment_result)
        return this.equals((cancelPayment_result)that);
      return false;
    }

    public boolean equals(cancelPayment_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(cancelPayment_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("cancelPayment_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class cancelPayment_resultStandardSchemeFactory implements SchemeFactory {
      public cancelPayment_resultStandardScheme getScheme() {
        return new cancelPayment_resultStandardScheme();
      }
    }

    private static class cancelPayment_resultStandardScheme extends StandardScheme<cancelPayment_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, cancelPayment_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, cancelPayment_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class cancelPayment_resultTupleSchemeFactory implements SchemeFactory {
      public cancelPayment_resultTupleScheme getScheme() {
        return new cancelPayment_resultTupleScheme();
      }
    }

    private static class cancelPayment_resultTupleScheme extends TupleScheme<cancelPayment_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, cancelPayment_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, cancelPayment_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
