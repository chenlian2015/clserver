/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cnd.greencube.server.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-03-25")
public class OpportunitySpaceService {

  /**
   * 工作空间
   * @author 董亚莉
   */
  public interface Iface {

    /**
     * 取得所有工作空间分类
     * @return json数组
     */
    public String loadOpportunitySpaceCategorys() throws org.apache.thrift.TException;

    /**
     * 取得推荐的所有工作空间分类
     * @return json数组
     */
    public String loadRecommendCategorys() throws org.apache.thrift.TException;

    /**
     * 根据id取得一个工作空间分类
     * @param id -- 分类id
     * @return 分类json对象
     * 
     * @param id
     */
    public String getOpportunitySpaceCategory(String id) throws org.apache.thrift.TException;

    /**
     * 创建一个分类
     * @param parentId --父分类id
     * @param categoryJson -- json对象
     * @return 成功与否标志
     * 
     * @param parentId
     * @param categoryJson
     */
    public String createOpportunitySpaceCategory(String parentId, String categoryJson) throws org.apache.thrift.TException;

    /**
     * 更新修改分类
     * @param categoryJson --  json对象
     * @return 成功与否标志
     * 
     * @param categoryJson
     */
    public String updateOpportunitySpaceCategory(String categoryJson) throws org.apache.thrift.TException;

    /**
     * 删除一个分类
     * @param categoryId -- 分类id
     * @return 成功与否标志
     * 
     * @param categoryId
     */
    public String deleteOpportunitySpaceCategory(String categoryId) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void loadOpportunitySpaceCategorys(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void loadRecommendCategorys(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getOpportunitySpaceCategory(String id, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void createOpportunitySpaceCategory(String parentId, String categoryJson, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateOpportunitySpaceCategory(String categoryJson, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void deleteOpportunitySpaceCategory(String categoryId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public String loadOpportunitySpaceCategorys() throws org.apache.thrift.TException
    {
      send_loadOpportunitySpaceCategorys();
      return recv_loadOpportunitySpaceCategorys();
    }

    public void send_loadOpportunitySpaceCategorys() throws org.apache.thrift.TException
    {
      loadOpportunitySpaceCategorys_args args = new loadOpportunitySpaceCategorys_args();
      sendBase("loadOpportunitySpaceCategorys", args);
    }

    public String recv_loadOpportunitySpaceCategorys() throws org.apache.thrift.TException
    {
      loadOpportunitySpaceCategorys_result result = new loadOpportunitySpaceCategorys_result();
      receiveBase(result, "loadOpportunitySpaceCategorys");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "loadOpportunitySpaceCategorys failed: unknown result");
    }

    public String loadRecommendCategorys() throws org.apache.thrift.TException
    {
      send_loadRecommendCategorys();
      return recv_loadRecommendCategorys();
    }

    public void send_loadRecommendCategorys() throws org.apache.thrift.TException
    {
      loadRecommendCategorys_args args = new loadRecommendCategorys_args();
      sendBase("loadRecommendCategorys", args);
    }

    public String recv_loadRecommendCategorys() throws org.apache.thrift.TException
    {
      loadRecommendCategorys_result result = new loadRecommendCategorys_result();
      receiveBase(result, "loadRecommendCategorys");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "loadRecommendCategorys failed: unknown result");
    }

    public String getOpportunitySpaceCategory(String id) throws org.apache.thrift.TException
    {
      send_getOpportunitySpaceCategory(id);
      return recv_getOpportunitySpaceCategory();
    }

    public void send_getOpportunitySpaceCategory(String id) throws org.apache.thrift.TException
    {
      getOpportunitySpaceCategory_args args = new getOpportunitySpaceCategory_args();
      args.setId(id);
      sendBase("getOpportunitySpaceCategory", args);
    }

    public String recv_getOpportunitySpaceCategory() throws org.apache.thrift.TException
    {
      getOpportunitySpaceCategory_result result = new getOpportunitySpaceCategory_result();
      receiveBase(result, "getOpportunitySpaceCategory");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getOpportunitySpaceCategory failed: unknown result");
    }

    public String createOpportunitySpaceCategory(String parentId, String categoryJson) throws org.apache.thrift.TException
    {
      send_createOpportunitySpaceCategory(parentId, categoryJson);
      return recv_createOpportunitySpaceCategory();
    }

    public void send_createOpportunitySpaceCategory(String parentId, String categoryJson) throws org.apache.thrift.TException
    {
      createOpportunitySpaceCategory_args args = new createOpportunitySpaceCategory_args();
      args.setParentId(parentId);
      args.setCategoryJson(categoryJson);
      sendBase("createOpportunitySpaceCategory", args);
    }

    public String recv_createOpportunitySpaceCategory() throws org.apache.thrift.TException
    {
      createOpportunitySpaceCategory_result result = new createOpportunitySpaceCategory_result();
      receiveBase(result, "createOpportunitySpaceCategory");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "createOpportunitySpaceCategory failed: unknown result");
    }

    public String updateOpportunitySpaceCategory(String categoryJson) throws org.apache.thrift.TException
    {
      send_updateOpportunitySpaceCategory(categoryJson);
      return recv_updateOpportunitySpaceCategory();
    }

    public void send_updateOpportunitySpaceCategory(String categoryJson) throws org.apache.thrift.TException
    {
      updateOpportunitySpaceCategory_args args = new updateOpportunitySpaceCategory_args();
      args.setCategoryJson(categoryJson);
      sendBase("updateOpportunitySpaceCategory", args);
    }

    public String recv_updateOpportunitySpaceCategory() throws org.apache.thrift.TException
    {
      updateOpportunitySpaceCategory_result result = new updateOpportunitySpaceCategory_result();
      receiveBase(result, "updateOpportunitySpaceCategory");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateOpportunitySpaceCategory failed: unknown result");
    }

    public String deleteOpportunitySpaceCategory(String categoryId) throws org.apache.thrift.TException
    {
      send_deleteOpportunitySpaceCategory(categoryId);
      return recv_deleteOpportunitySpaceCategory();
    }

    public void send_deleteOpportunitySpaceCategory(String categoryId) throws org.apache.thrift.TException
    {
      deleteOpportunitySpaceCategory_args args = new deleteOpportunitySpaceCategory_args();
      args.setCategoryId(categoryId);
      sendBase("deleteOpportunitySpaceCategory", args);
    }

    public String recv_deleteOpportunitySpaceCategory() throws org.apache.thrift.TException
    {
      deleteOpportunitySpaceCategory_result result = new deleteOpportunitySpaceCategory_result();
      receiveBase(result, "deleteOpportunitySpaceCategory");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deleteOpportunitySpaceCategory failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void loadOpportunitySpaceCategorys(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      loadOpportunitySpaceCategorys_call method_call = new loadOpportunitySpaceCategorys_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class loadOpportunitySpaceCategorys_call extends org.apache.thrift.async.TAsyncMethodCall {
      public loadOpportunitySpaceCategorys_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("loadOpportunitySpaceCategorys", org.apache.thrift.protocol.TMessageType.CALL, 0));
        loadOpportunitySpaceCategorys_args args = new loadOpportunitySpaceCategorys_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_loadOpportunitySpaceCategorys();
      }
    }

    public void loadRecommendCategorys(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      loadRecommendCategorys_call method_call = new loadRecommendCategorys_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class loadRecommendCategorys_call extends org.apache.thrift.async.TAsyncMethodCall {
      public loadRecommendCategorys_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("loadRecommendCategorys", org.apache.thrift.protocol.TMessageType.CALL, 0));
        loadRecommendCategorys_args args = new loadRecommendCategorys_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_loadRecommendCategorys();
      }
    }

    public void getOpportunitySpaceCategory(String id, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getOpportunitySpaceCategory_call method_call = new getOpportunitySpaceCategory_call(id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getOpportunitySpaceCategory_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String id;
      public getOpportunitySpaceCategory_call(String id, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.id = id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getOpportunitySpaceCategory", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getOpportunitySpaceCategory_args args = new getOpportunitySpaceCategory_args();
        args.setId(id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getOpportunitySpaceCategory();
      }
    }

    public void createOpportunitySpaceCategory(String parentId, String categoryJson, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      createOpportunitySpaceCategory_call method_call = new createOpportunitySpaceCategory_call(parentId, categoryJson, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class createOpportunitySpaceCategory_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String parentId;
      private String categoryJson;
      public createOpportunitySpaceCategory_call(String parentId, String categoryJson, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.parentId = parentId;
        this.categoryJson = categoryJson;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createOpportunitySpaceCategory", org.apache.thrift.protocol.TMessageType.CALL, 0));
        createOpportunitySpaceCategory_args args = new createOpportunitySpaceCategory_args();
        args.setParentId(parentId);
        args.setCategoryJson(categoryJson);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_createOpportunitySpaceCategory();
      }
    }

    public void updateOpportunitySpaceCategory(String categoryJson, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateOpportunitySpaceCategory_call method_call = new updateOpportunitySpaceCategory_call(categoryJson, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateOpportunitySpaceCategory_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String categoryJson;
      public updateOpportunitySpaceCategory_call(String categoryJson, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.categoryJson = categoryJson;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateOpportunitySpaceCategory", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateOpportunitySpaceCategory_args args = new updateOpportunitySpaceCategory_args();
        args.setCategoryJson(categoryJson);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateOpportunitySpaceCategory();
      }
    }

    public void deleteOpportunitySpaceCategory(String categoryId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteOpportunitySpaceCategory_call method_call = new deleteOpportunitySpaceCategory_call(categoryId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteOpportunitySpaceCategory_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String categoryId;
      public deleteOpportunitySpaceCategory_call(String categoryId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.categoryId = categoryId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteOpportunitySpaceCategory", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteOpportunitySpaceCategory_args args = new deleteOpportunitySpaceCategory_args();
        args.setCategoryId(categoryId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_deleteOpportunitySpaceCategory();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("loadOpportunitySpaceCategorys", new loadOpportunitySpaceCategorys());
      processMap.put("loadRecommendCategorys", new loadRecommendCategorys());
      processMap.put("getOpportunitySpaceCategory", new getOpportunitySpaceCategory());
      processMap.put("createOpportunitySpaceCategory", new createOpportunitySpaceCategory());
      processMap.put("updateOpportunitySpaceCategory", new updateOpportunitySpaceCategory());
      processMap.put("deleteOpportunitySpaceCategory", new deleteOpportunitySpaceCategory());
      return processMap;
    }

    public static class loadOpportunitySpaceCategorys<I extends Iface> extends org.apache.thrift.ProcessFunction<I, loadOpportunitySpaceCategorys_args> {
      public loadOpportunitySpaceCategorys() {
        super("loadOpportunitySpaceCategorys");
      }

      public loadOpportunitySpaceCategorys_args getEmptyArgsInstance() {
        return new loadOpportunitySpaceCategorys_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public loadOpportunitySpaceCategorys_result getResult(I iface, loadOpportunitySpaceCategorys_args args) throws org.apache.thrift.TException {
        loadOpportunitySpaceCategorys_result result = new loadOpportunitySpaceCategorys_result();
        result.success = iface.loadOpportunitySpaceCategorys();
        return result;
      }
    }

    public static class loadRecommendCategorys<I extends Iface> extends org.apache.thrift.ProcessFunction<I, loadRecommendCategorys_args> {
      public loadRecommendCategorys() {
        super("loadRecommendCategorys");
      }

      public loadRecommendCategorys_args getEmptyArgsInstance() {
        return new loadRecommendCategorys_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public loadRecommendCategorys_result getResult(I iface, loadRecommendCategorys_args args) throws org.apache.thrift.TException {
        loadRecommendCategorys_result result = new loadRecommendCategorys_result();
        result.success = iface.loadRecommendCategorys();
        return result;
      }
    }

    public static class getOpportunitySpaceCategory<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getOpportunitySpaceCategory_args> {
      public getOpportunitySpaceCategory() {
        super("getOpportunitySpaceCategory");
      }

      public getOpportunitySpaceCategory_args getEmptyArgsInstance() {
        return new getOpportunitySpaceCategory_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getOpportunitySpaceCategory_result getResult(I iface, getOpportunitySpaceCategory_args args) throws org.apache.thrift.TException {
        getOpportunitySpaceCategory_result result = new getOpportunitySpaceCategory_result();
        result.success = iface.getOpportunitySpaceCategory(args.id);
        return result;
      }
    }

    public static class createOpportunitySpaceCategory<I extends Iface> extends org.apache.thrift.ProcessFunction<I, createOpportunitySpaceCategory_args> {
      public createOpportunitySpaceCategory() {
        super("createOpportunitySpaceCategory");
      }

      public createOpportunitySpaceCategory_args getEmptyArgsInstance() {
        return new createOpportunitySpaceCategory_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public createOpportunitySpaceCategory_result getResult(I iface, createOpportunitySpaceCategory_args args) throws org.apache.thrift.TException {
        createOpportunitySpaceCategory_result result = new createOpportunitySpaceCategory_result();
        result.success = iface.createOpportunitySpaceCategory(args.parentId, args.categoryJson);
        return result;
      }
    }

    public static class updateOpportunitySpaceCategory<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateOpportunitySpaceCategory_args> {
      public updateOpportunitySpaceCategory() {
        super("updateOpportunitySpaceCategory");
      }

      public updateOpportunitySpaceCategory_args getEmptyArgsInstance() {
        return new updateOpportunitySpaceCategory_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateOpportunitySpaceCategory_result getResult(I iface, updateOpportunitySpaceCategory_args args) throws org.apache.thrift.TException {
        updateOpportunitySpaceCategory_result result = new updateOpportunitySpaceCategory_result();
        result.success = iface.updateOpportunitySpaceCategory(args.categoryJson);
        return result;
      }
    }

    public static class deleteOpportunitySpaceCategory<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteOpportunitySpaceCategory_args> {
      public deleteOpportunitySpaceCategory() {
        super("deleteOpportunitySpaceCategory");
      }

      public deleteOpportunitySpaceCategory_args getEmptyArgsInstance() {
        return new deleteOpportunitySpaceCategory_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteOpportunitySpaceCategory_result getResult(I iface, deleteOpportunitySpaceCategory_args args) throws org.apache.thrift.TException {
        deleteOpportunitySpaceCategory_result result = new deleteOpportunitySpaceCategory_result();
        result.success = iface.deleteOpportunitySpaceCategory(args.categoryId);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("loadOpportunitySpaceCategorys", new loadOpportunitySpaceCategorys());
      processMap.put("loadRecommendCategorys", new loadRecommendCategorys());
      processMap.put("getOpportunitySpaceCategory", new getOpportunitySpaceCategory());
      processMap.put("createOpportunitySpaceCategory", new createOpportunitySpaceCategory());
      processMap.put("updateOpportunitySpaceCategory", new updateOpportunitySpaceCategory());
      processMap.put("deleteOpportunitySpaceCategory", new deleteOpportunitySpaceCategory());
      return processMap;
    }

    public static class loadOpportunitySpaceCategorys<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, loadOpportunitySpaceCategorys_args, String> {
      public loadOpportunitySpaceCategorys() {
        super("loadOpportunitySpaceCategorys");
      }

      public loadOpportunitySpaceCategorys_args getEmptyArgsInstance() {
        return new loadOpportunitySpaceCategorys_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            loadOpportunitySpaceCategorys_result result = new loadOpportunitySpaceCategorys_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            loadOpportunitySpaceCategorys_result result = new loadOpportunitySpaceCategorys_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, loadOpportunitySpaceCategorys_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.loadOpportunitySpaceCategorys(resultHandler);
      }
    }

    public static class loadRecommendCategorys<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, loadRecommendCategorys_args, String> {
      public loadRecommendCategorys() {
        super("loadRecommendCategorys");
      }

      public loadRecommendCategorys_args getEmptyArgsInstance() {
        return new loadRecommendCategorys_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            loadRecommendCategorys_result result = new loadRecommendCategorys_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            loadRecommendCategorys_result result = new loadRecommendCategorys_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, loadRecommendCategorys_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.loadRecommendCategorys(resultHandler);
      }
    }

    public static class getOpportunitySpaceCategory<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getOpportunitySpaceCategory_args, String> {
      public getOpportunitySpaceCategory() {
        super("getOpportunitySpaceCategory");
      }

      public getOpportunitySpaceCategory_args getEmptyArgsInstance() {
        return new getOpportunitySpaceCategory_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            getOpportunitySpaceCategory_result result = new getOpportunitySpaceCategory_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getOpportunitySpaceCategory_result result = new getOpportunitySpaceCategory_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getOpportunitySpaceCategory_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.getOpportunitySpaceCategory(args.id,resultHandler);
      }
    }

    public static class createOpportunitySpaceCategory<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, createOpportunitySpaceCategory_args, String> {
      public createOpportunitySpaceCategory() {
        super("createOpportunitySpaceCategory");
      }

      public createOpportunitySpaceCategory_args getEmptyArgsInstance() {
        return new createOpportunitySpaceCategory_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            createOpportunitySpaceCategory_result result = new createOpportunitySpaceCategory_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            createOpportunitySpaceCategory_result result = new createOpportunitySpaceCategory_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, createOpportunitySpaceCategory_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.createOpportunitySpaceCategory(args.parentId, args.categoryJson,resultHandler);
      }
    }

    public static class updateOpportunitySpaceCategory<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateOpportunitySpaceCategory_args, String> {
      public updateOpportunitySpaceCategory() {
        super("updateOpportunitySpaceCategory");
      }

      public updateOpportunitySpaceCategory_args getEmptyArgsInstance() {
        return new updateOpportunitySpaceCategory_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            updateOpportunitySpaceCategory_result result = new updateOpportunitySpaceCategory_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateOpportunitySpaceCategory_result result = new updateOpportunitySpaceCategory_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateOpportunitySpaceCategory_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.updateOpportunitySpaceCategory(args.categoryJson,resultHandler);
      }
    }

    public static class deleteOpportunitySpaceCategory<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteOpportunitySpaceCategory_args, String> {
      public deleteOpportunitySpaceCategory() {
        super("deleteOpportunitySpaceCategory");
      }

      public deleteOpportunitySpaceCategory_args getEmptyArgsInstance() {
        return new deleteOpportunitySpaceCategory_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            deleteOpportunitySpaceCategory_result result = new deleteOpportunitySpaceCategory_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            deleteOpportunitySpaceCategory_result result = new deleteOpportunitySpaceCategory_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteOpportunitySpaceCategory_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.deleteOpportunitySpaceCategory(args.categoryId,resultHandler);
      }
    }

  }

  public static class loadOpportunitySpaceCategorys_args implements org.apache.thrift.TBase<loadOpportunitySpaceCategorys_args, loadOpportunitySpaceCategorys_args._Fields>, java.io.Serializable, Cloneable, Comparable<loadOpportunitySpaceCategorys_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("loadOpportunitySpaceCategorys_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new loadOpportunitySpaceCategorys_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new loadOpportunitySpaceCategorys_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(loadOpportunitySpaceCategorys_args.class, metaDataMap);
    }

    public loadOpportunitySpaceCategorys_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public loadOpportunitySpaceCategorys_args(loadOpportunitySpaceCategorys_args other) {
    }

    public loadOpportunitySpaceCategorys_args deepCopy() {
      return new loadOpportunitySpaceCategorys_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof loadOpportunitySpaceCategorys_args)
        return this.equals((loadOpportunitySpaceCategorys_args)that);
      return false;
    }

    public boolean equals(loadOpportunitySpaceCategorys_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(loadOpportunitySpaceCategorys_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("loadOpportunitySpaceCategorys_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class loadOpportunitySpaceCategorys_argsStandardSchemeFactory implements SchemeFactory {
      public loadOpportunitySpaceCategorys_argsStandardScheme getScheme() {
        return new loadOpportunitySpaceCategorys_argsStandardScheme();
      }
    }

    private static class loadOpportunitySpaceCategorys_argsStandardScheme extends StandardScheme<loadOpportunitySpaceCategorys_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, loadOpportunitySpaceCategorys_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, loadOpportunitySpaceCategorys_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class loadOpportunitySpaceCategorys_argsTupleSchemeFactory implements SchemeFactory {
      public loadOpportunitySpaceCategorys_argsTupleScheme getScheme() {
        return new loadOpportunitySpaceCategorys_argsTupleScheme();
      }
    }

    private static class loadOpportunitySpaceCategorys_argsTupleScheme extends TupleScheme<loadOpportunitySpaceCategorys_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, loadOpportunitySpaceCategorys_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, loadOpportunitySpaceCategorys_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class loadOpportunitySpaceCategorys_result implements org.apache.thrift.TBase<loadOpportunitySpaceCategorys_result, loadOpportunitySpaceCategorys_result._Fields>, java.io.Serializable, Cloneable, Comparable<loadOpportunitySpaceCategorys_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("loadOpportunitySpaceCategorys_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new loadOpportunitySpaceCategorys_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new loadOpportunitySpaceCategorys_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(loadOpportunitySpaceCategorys_result.class, metaDataMap);
    }

    public loadOpportunitySpaceCategorys_result() {
    }

    public loadOpportunitySpaceCategorys_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public loadOpportunitySpaceCategorys_result(loadOpportunitySpaceCategorys_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public loadOpportunitySpaceCategorys_result deepCopy() {
      return new loadOpportunitySpaceCategorys_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public loadOpportunitySpaceCategorys_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof loadOpportunitySpaceCategorys_result)
        return this.equals((loadOpportunitySpaceCategorys_result)that);
      return false;
    }

    public boolean equals(loadOpportunitySpaceCategorys_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(loadOpportunitySpaceCategorys_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("loadOpportunitySpaceCategorys_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class loadOpportunitySpaceCategorys_resultStandardSchemeFactory implements SchemeFactory {
      public loadOpportunitySpaceCategorys_resultStandardScheme getScheme() {
        return new loadOpportunitySpaceCategorys_resultStandardScheme();
      }
    }

    private static class loadOpportunitySpaceCategorys_resultStandardScheme extends StandardScheme<loadOpportunitySpaceCategorys_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, loadOpportunitySpaceCategorys_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, loadOpportunitySpaceCategorys_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class loadOpportunitySpaceCategorys_resultTupleSchemeFactory implements SchemeFactory {
      public loadOpportunitySpaceCategorys_resultTupleScheme getScheme() {
        return new loadOpportunitySpaceCategorys_resultTupleScheme();
      }
    }

    private static class loadOpportunitySpaceCategorys_resultTupleScheme extends TupleScheme<loadOpportunitySpaceCategorys_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, loadOpportunitySpaceCategorys_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, loadOpportunitySpaceCategorys_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class loadRecommendCategorys_args implements org.apache.thrift.TBase<loadRecommendCategorys_args, loadRecommendCategorys_args._Fields>, java.io.Serializable, Cloneable, Comparable<loadRecommendCategorys_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("loadRecommendCategorys_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new loadRecommendCategorys_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new loadRecommendCategorys_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(loadRecommendCategorys_args.class, metaDataMap);
    }

    public loadRecommendCategorys_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public loadRecommendCategorys_args(loadRecommendCategorys_args other) {
    }

    public loadRecommendCategorys_args deepCopy() {
      return new loadRecommendCategorys_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof loadRecommendCategorys_args)
        return this.equals((loadRecommendCategorys_args)that);
      return false;
    }

    public boolean equals(loadRecommendCategorys_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(loadRecommendCategorys_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("loadRecommendCategorys_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class loadRecommendCategorys_argsStandardSchemeFactory implements SchemeFactory {
      public loadRecommendCategorys_argsStandardScheme getScheme() {
        return new loadRecommendCategorys_argsStandardScheme();
      }
    }

    private static class loadRecommendCategorys_argsStandardScheme extends StandardScheme<loadRecommendCategorys_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, loadRecommendCategorys_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, loadRecommendCategorys_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class loadRecommendCategorys_argsTupleSchemeFactory implements SchemeFactory {
      public loadRecommendCategorys_argsTupleScheme getScheme() {
        return new loadRecommendCategorys_argsTupleScheme();
      }
    }

    private static class loadRecommendCategorys_argsTupleScheme extends TupleScheme<loadRecommendCategorys_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, loadRecommendCategorys_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, loadRecommendCategorys_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class loadRecommendCategorys_result implements org.apache.thrift.TBase<loadRecommendCategorys_result, loadRecommendCategorys_result._Fields>, java.io.Serializable, Cloneable, Comparable<loadRecommendCategorys_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("loadRecommendCategorys_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new loadRecommendCategorys_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new loadRecommendCategorys_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(loadRecommendCategorys_result.class, metaDataMap);
    }

    public loadRecommendCategorys_result() {
    }

    public loadRecommendCategorys_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public loadRecommendCategorys_result(loadRecommendCategorys_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public loadRecommendCategorys_result deepCopy() {
      return new loadRecommendCategorys_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public loadRecommendCategorys_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof loadRecommendCategorys_result)
        return this.equals((loadRecommendCategorys_result)that);
      return false;
    }

    public boolean equals(loadRecommendCategorys_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(loadRecommendCategorys_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("loadRecommendCategorys_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class loadRecommendCategorys_resultStandardSchemeFactory implements SchemeFactory {
      public loadRecommendCategorys_resultStandardScheme getScheme() {
        return new loadRecommendCategorys_resultStandardScheme();
      }
    }

    private static class loadRecommendCategorys_resultStandardScheme extends StandardScheme<loadRecommendCategorys_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, loadRecommendCategorys_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, loadRecommendCategorys_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class loadRecommendCategorys_resultTupleSchemeFactory implements SchemeFactory {
      public loadRecommendCategorys_resultTupleScheme getScheme() {
        return new loadRecommendCategorys_resultTupleScheme();
      }
    }

    private static class loadRecommendCategorys_resultTupleScheme extends TupleScheme<loadRecommendCategorys_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, loadRecommendCategorys_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, loadRecommendCategorys_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getOpportunitySpaceCategory_args implements org.apache.thrift.TBase<getOpportunitySpaceCategory_args, getOpportunitySpaceCategory_args._Fields>, java.io.Serializable, Cloneable, Comparable<getOpportunitySpaceCategory_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getOpportunitySpaceCategory_args");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getOpportunitySpaceCategory_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getOpportunitySpaceCategory_argsTupleSchemeFactory());
    }

    public String id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID((short)1, "id");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID
            return ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOpportunitySpaceCategory_args.class, metaDataMap);
    }

    public getOpportunitySpaceCategory_args() {
    }

    public getOpportunitySpaceCategory_args(
      String id)
    {
      this();
      this.id = id;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getOpportunitySpaceCategory_args(getOpportunitySpaceCategory_args other) {
      if (other.isSetId()) {
        this.id = other.id;
      }
    }

    public getOpportunitySpaceCategory_args deepCopy() {
      return new getOpportunitySpaceCategory_args(this);
    }

    @Override
    public void clear() {
      this.id = null;
    }

    public String getId() {
      return this.id;
    }

    public getOpportunitySpaceCategory_args setId(String id) {
      this.id = id;
      return this;
    }

    public void unsetId() {
      this.id = null;
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return this.id != null;
    }

    public void setIdIsSet(boolean value) {
      if (!value) {
        this.id = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ID:
        return getId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ID:
        return isSetId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getOpportunitySpaceCategory_args)
        return this.equals((getOpportunitySpaceCategory_args)that);
      return false;
    }

    public boolean equals(getOpportunitySpaceCategory_args that) {
      if (that == null)
        return false;

      boolean this_present_id = true && this.isSetId();
      boolean that_present_id = true && that.isSetId();
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (!this.id.equals(that.id))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_id = true && (isSetId());
      list.add(present_id);
      if (present_id)
        list.add(id);

      return list.hashCode();
    }

    @Override
    public int compareTo(getOpportunitySpaceCategory_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getOpportunitySpaceCategory_args(");
      boolean first = true;

      sb.append("id:");
      if (this.id == null) {
        sb.append("null");
      } else {
        sb.append(this.id);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getOpportunitySpaceCategory_argsStandardSchemeFactory implements SchemeFactory {
      public getOpportunitySpaceCategory_argsStandardScheme getScheme() {
        return new getOpportunitySpaceCategory_argsStandardScheme();
      }
    }

    private static class getOpportunitySpaceCategory_argsStandardScheme extends StandardScheme<getOpportunitySpaceCategory_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getOpportunitySpaceCategory_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.id = iprot.readString();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getOpportunitySpaceCategory_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.id != null) {
          oprot.writeFieldBegin(ID_FIELD_DESC);
          oprot.writeString(struct.id);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getOpportunitySpaceCategory_argsTupleSchemeFactory implements SchemeFactory {
      public getOpportunitySpaceCategory_argsTupleScheme getScheme() {
        return new getOpportunitySpaceCategory_argsTupleScheme();
      }
    }

    private static class getOpportunitySpaceCategory_argsTupleScheme extends TupleScheme<getOpportunitySpaceCategory_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getOpportunitySpaceCategory_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetId()) {
          oprot.writeString(struct.id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getOpportunitySpaceCategory_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.id = iprot.readString();
          struct.setIdIsSet(true);
        }
      }
    }

  }

  public static class getOpportunitySpaceCategory_result implements org.apache.thrift.TBase<getOpportunitySpaceCategory_result, getOpportunitySpaceCategory_result._Fields>, java.io.Serializable, Cloneable, Comparable<getOpportunitySpaceCategory_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getOpportunitySpaceCategory_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getOpportunitySpaceCategory_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getOpportunitySpaceCategory_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOpportunitySpaceCategory_result.class, metaDataMap);
    }

    public getOpportunitySpaceCategory_result() {
    }

    public getOpportunitySpaceCategory_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getOpportunitySpaceCategory_result(getOpportunitySpaceCategory_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public getOpportunitySpaceCategory_result deepCopy() {
      return new getOpportunitySpaceCategory_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public getOpportunitySpaceCategory_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getOpportunitySpaceCategory_result)
        return this.equals((getOpportunitySpaceCategory_result)that);
      return false;
    }

    public boolean equals(getOpportunitySpaceCategory_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getOpportunitySpaceCategory_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getOpportunitySpaceCategory_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getOpportunitySpaceCategory_resultStandardSchemeFactory implements SchemeFactory {
      public getOpportunitySpaceCategory_resultStandardScheme getScheme() {
        return new getOpportunitySpaceCategory_resultStandardScheme();
      }
    }

    private static class getOpportunitySpaceCategory_resultStandardScheme extends StandardScheme<getOpportunitySpaceCategory_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getOpportunitySpaceCategory_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getOpportunitySpaceCategory_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getOpportunitySpaceCategory_resultTupleSchemeFactory implements SchemeFactory {
      public getOpportunitySpaceCategory_resultTupleScheme getScheme() {
        return new getOpportunitySpaceCategory_resultTupleScheme();
      }
    }

    private static class getOpportunitySpaceCategory_resultTupleScheme extends TupleScheme<getOpportunitySpaceCategory_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getOpportunitySpaceCategory_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getOpportunitySpaceCategory_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class createOpportunitySpaceCategory_args implements org.apache.thrift.TBase<createOpportunitySpaceCategory_args, createOpportunitySpaceCategory_args._Fields>, java.io.Serializable, Cloneable, Comparable<createOpportunitySpaceCategory_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createOpportunitySpaceCategory_args");

    private static final org.apache.thrift.protocol.TField PARENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("parentId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField CATEGORY_JSON_FIELD_DESC = new org.apache.thrift.protocol.TField("categoryJson", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createOpportunitySpaceCategory_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createOpportunitySpaceCategory_argsTupleSchemeFactory());
    }

    public String parentId; // required
    public String categoryJson; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PARENT_ID((short)1, "parentId"),
      CATEGORY_JSON((short)2, "categoryJson");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PARENT_ID
            return PARENT_ID;
          case 2: // CATEGORY_JSON
            return CATEGORY_JSON;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PARENT_ID, new org.apache.thrift.meta_data.FieldMetaData("parentId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CATEGORY_JSON, new org.apache.thrift.meta_data.FieldMetaData("categoryJson", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createOpportunitySpaceCategory_args.class, metaDataMap);
    }

    public createOpportunitySpaceCategory_args() {
    }

    public createOpportunitySpaceCategory_args(
      String parentId,
      String categoryJson)
    {
      this();
      this.parentId = parentId;
      this.categoryJson = categoryJson;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createOpportunitySpaceCategory_args(createOpportunitySpaceCategory_args other) {
      if (other.isSetParentId()) {
        this.parentId = other.parentId;
      }
      if (other.isSetCategoryJson()) {
        this.categoryJson = other.categoryJson;
      }
    }

    public createOpportunitySpaceCategory_args deepCopy() {
      return new createOpportunitySpaceCategory_args(this);
    }

    @Override
    public void clear() {
      this.parentId = null;
      this.categoryJson = null;
    }

    public String getParentId() {
      return this.parentId;
    }

    public createOpportunitySpaceCategory_args setParentId(String parentId) {
      this.parentId = parentId;
      return this;
    }

    public void unsetParentId() {
      this.parentId = null;
    }

    /** Returns true if field parentId is set (has been assigned a value) and false otherwise */
    public boolean isSetParentId() {
      return this.parentId != null;
    }

    public void setParentIdIsSet(boolean value) {
      if (!value) {
        this.parentId = null;
      }
    }

    public String getCategoryJson() {
      return this.categoryJson;
    }

    public createOpportunitySpaceCategory_args setCategoryJson(String categoryJson) {
      this.categoryJson = categoryJson;
      return this;
    }

    public void unsetCategoryJson() {
      this.categoryJson = null;
    }

    /** Returns true if field categoryJson is set (has been assigned a value) and false otherwise */
    public boolean isSetCategoryJson() {
      return this.categoryJson != null;
    }

    public void setCategoryJsonIsSet(boolean value) {
      if (!value) {
        this.categoryJson = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PARENT_ID:
        if (value == null) {
          unsetParentId();
        } else {
          setParentId((String)value);
        }
        break;

      case CATEGORY_JSON:
        if (value == null) {
          unsetCategoryJson();
        } else {
          setCategoryJson((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PARENT_ID:
        return getParentId();

      case CATEGORY_JSON:
        return getCategoryJson();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PARENT_ID:
        return isSetParentId();
      case CATEGORY_JSON:
        return isSetCategoryJson();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createOpportunitySpaceCategory_args)
        return this.equals((createOpportunitySpaceCategory_args)that);
      return false;
    }

    public boolean equals(createOpportunitySpaceCategory_args that) {
      if (that == null)
        return false;

      boolean this_present_parentId = true && this.isSetParentId();
      boolean that_present_parentId = true && that.isSetParentId();
      if (this_present_parentId || that_present_parentId) {
        if (!(this_present_parentId && that_present_parentId))
          return false;
        if (!this.parentId.equals(that.parentId))
          return false;
      }

      boolean this_present_categoryJson = true && this.isSetCategoryJson();
      boolean that_present_categoryJson = true && that.isSetCategoryJson();
      if (this_present_categoryJson || that_present_categoryJson) {
        if (!(this_present_categoryJson && that_present_categoryJson))
          return false;
        if (!this.categoryJson.equals(that.categoryJson))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_parentId = true && (isSetParentId());
      list.add(present_parentId);
      if (present_parentId)
        list.add(parentId);

      boolean present_categoryJson = true && (isSetCategoryJson());
      list.add(present_categoryJson);
      if (present_categoryJson)
        list.add(categoryJson);

      return list.hashCode();
    }

    @Override
    public int compareTo(createOpportunitySpaceCategory_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetParentId()).compareTo(other.isSetParentId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParentId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parentId, other.parentId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCategoryJson()).compareTo(other.isSetCategoryJson());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCategoryJson()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.categoryJson, other.categoryJson);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createOpportunitySpaceCategory_args(");
      boolean first = true;

      sb.append("parentId:");
      if (this.parentId == null) {
        sb.append("null");
      } else {
        sb.append(this.parentId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("categoryJson:");
      if (this.categoryJson == null) {
        sb.append("null");
      } else {
        sb.append(this.categoryJson);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createOpportunitySpaceCategory_argsStandardSchemeFactory implements SchemeFactory {
      public createOpportunitySpaceCategory_argsStandardScheme getScheme() {
        return new createOpportunitySpaceCategory_argsStandardScheme();
      }
    }

    private static class createOpportunitySpaceCategory_argsStandardScheme extends StandardScheme<createOpportunitySpaceCategory_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createOpportunitySpaceCategory_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PARENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.parentId = iprot.readString();
                struct.setParentIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CATEGORY_JSON
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.categoryJson = iprot.readString();
                struct.setCategoryJsonIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createOpportunitySpaceCategory_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.parentId != null) {
          oprot.writeFieldBegin(PARENT_ID_FIELD_DESC);
          oprot.writeString(struct.parentId);
          oprot.writeFieldEnd();
        }
        if (struct.categoryJson != null) {
          oprot.writeFieldBegin(CATEGORY_JSON_FIELD_DESC);
          oprot.writeString(struct.categoryJson);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createOpportunitySpaceCategory_argsTupleSchemeFactory implements SchemeFactory {
      public createOpportunitySpaceCategory_argsTupleScheme getScheme() {
        return new createOpportunitySpaceCategory_argsTupleScheme();
      }
    }

    private static class createOpportunitySpaceCategory_argsTupleScheme extends TupleScheme<createOpportunitySpaceCategory_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createOpportunitySpaceCategory_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetParentId()) {
          optionals.set(0);
        }
        if (struct.isSetCategoryJson()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetParentId()) {
          oprot.writeString(struct.parentId);
        }
        if (struct.isSetCategoryJson()) {
          oprot.writeString(struct.categoryJson);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createOpportunitySpaceCategory_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.parentId = iprot.readString();
          struct.setParentIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.categoryJson = iprot.readString();
          struct.setCategoryJsonIsSet(true);
        }
      }
    }

  }

  public static class createOpportunitySpaceCategory_result implements org.apache.thrift.TBase<createOpportunitySpaceCategory_result, createOpportunitySpaceCategory_result._Fields>, java.io.Serializable, Cloneable, Comparable<createOpportunitySpaceCategory_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createOpportunitySpaceCategory_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createOpportunitySpaceCategory_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createOpportunitySpaceCategory_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createOpportunitySpaceCategory_result.class, metaDataMap);
    }

    public createOpportunitySpaceCategory_result() {
    }

    public createOpportunitySpaceCategory_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createOpportunitySpaceCategory_result(createOpportunitySpaceCategory_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public createOpportunitySpaceCategory_result deepCopy() {
      return new createOpportunitySpaceCategory_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public createOpportunitySpaceCategory_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createOpportunitySpaceCategory_result)
        return this.equals((createOpportunitySpaceCategory_result)that);
      return false;
    }

    public boolean equals(createOpportunitySpaceCategory_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(createOpportunitySpaceCategory_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createOpportunitySpaceCategory_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createOpportunitySpaceCategory_resultStandardSchemeFactory implements SchemeFactory {
      public createOpportunitySpaceCategory_resultStandardScheme getScheme() {
        return new createOpportunitySpaceCategory_resultStandardScheme();
      }
    }

    private static class createOpportunitySpaceCategory_resultStandardScheme extends StandardScheme<createOpportunitySpaceCategory_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createOpportunitySpaceCategory_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createOpportunitySpaceCategory_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createOpportunitySpaceCategory_resultTupleSchemeFactory implements SchemeFactory {
      public createOpportunitySpaceCategory_resultTupleScheme getScheme() {
        return new createOpportunitySpaceCategory_resultTupleScheme();
      }
    }

    private static class createOpportunitySpaceCategory_resultTupleScheme extends TupleScheme<createOpportunitySpaceCategory_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createOpportunitySpaceCategory_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createOpportunitySpaceCategory_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updateOpportunitySpaceCategory_args implements org.apache.thrift.TBase<updateOpportunitySpaceCategory_args, updateOpportunitySpaceCategory_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateOpportunitySpaceCategory_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateOpportunitySpaceCategory_args");

    private static final org.apache.thrift.protocol.TField CATEGORY_JSON_FIELD_DESC = new org.apache.thrift.protocol.TField("categoryJson", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateOpportunitySpaceCategory_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateOpportunitySpaceCategory_argsTupleSchemeFactory());
    }

    public String categoryJson; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CATEGORY_JSON((short)1, "categoryJson");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CATEGORY_JSON
            return CATEGORY_JSON;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CATEGORY_JSON, new org.apache.thrift.meta_data.FieldMetaData("categoryJson", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateOpportunitySpaceCategory_args.class, metaDataMap);
    }

    public updateOpportunitySpaceCategory_args() {
    }

    public updateOpportunitySpaceCategory_args(
      String categoryJson)
    {
      this();
      this.categoryJson = categoryJson;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateOpportunitySpaceCategory_args(updateOpportunitySpaceCategory_args other) {
      if (other.isSetCategoryJson()) {
        this.categoryJson = other.categoryJson;
      }
    }

    public updateOpportunitySpaceCategory_args deepCopy() {
      return new updateOpportunitySpaceCategory_args(this);
    }

    @Override
    public void clear() {
      this.categoryJson = null;
    }

    public String getCategoryJson() {
      return this.categoryJson;
    }

    public updateOpportunitySpaceCategory_args setCategoryJson(String categoryJson) {
      this.categoryJson = categoryJson;
      return this;
    }

    public void unsetCategoryJson() {
      this.categoryJson = null;
    }

    /** Returns true if field categoryJson is set (has been assigned a value) and false otherwise */
    public boolean isSetCategoryJson() {
      return this.categoryJson != null;
    }

    public void setCategoryJsonIsSet(boolean value) {
      if (!value) {
        this.categoryJson = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CATEGORY_JSON:
        if (value == null) {
          unsetCategoryJson();
        } else {
          setCategoryJson((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CATEGORY_JSON:
        return getCategoryJson();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CATEGORY_JSON:
        return isSetCategoryJson();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateOpportunitySpaceCategory_args)
        return this.equals((updateOpportunitySpaceCategory_args)that);
      return false;
    }

    public boolean equals(updateOpportunitySpaceCategory_args that) {
      if (that == null)
        return false;

      boolean this_present_categoryJson = true && this.isSetCategoryJson();
      boolean that_present_categoryJson = true && that.isSetCategoryJson();
      if (this_present_categoryJson || that_present_categoryJson) {
        if (!(this_present_categoryJson && that_present_categoryJson))
          return false;
        if (!this.categoryJson.equals(that.categoryJson))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_categoryJson = true && (isSetCategoryJson());
      list.add(present_categoryJson);
      if (present_categoryJson)
        list.add(categoryJson);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateOpportunitySpaceCategory_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCategoryJson()).compareTo(other.isSetCategoryJson());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCategoryJson()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.categoryJson, other.categoryJson);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateOpportunitySpaceCategory_args(");
      boolean first = true;

      sb.append("categoryJson:");
      if (this.categoryJson == null) {
        sb.append("null");
      } else {
        sb.append(this.categoryJson);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateOpportunitySpaceCategory_argsStandardSchemeFactory implements SchemeFactory {
      public updateOpportunitySpaceCategory_argsStandardScheme getScheme() {
        return new updateOpportunitySpaceCategory_argsStandardScheme();
      }
    }

    private static class updateOpportunitySpaceCategory_argsStandardScheme extends StandardScheme<updateOpportunitySpaceCategory_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateOpportunitySpaceCategory_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CATEGORY_JSON
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.categoryJson = iprot.readString();
                struct.setCategoryJsonIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateOpportunitySpaceCategory_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.categoryJson != null) {
          oprot.writeFieldBegin(CATEGORY_JSON_FIELD_DESC);
          oprot.writeString(struct.categoryJson);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateOpportunitySpaceCategory_argsTupleSchemeFactory implements SchemeFactory {
      public updateOpportunitySpaceCategory_argsTupleScheme getScheme() {
        return new updateOpportunitySpaceCategory_argsTupleScheme();
      }
    }

    private static class updateOpportunitySpaceCategory_argsTupleScheme extends TupleScheme<updateOpportunitySpaceCategory_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateOpportunitySpaceCategory_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCategoryJson()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCategoryJson()) {
          oprot.writeString(struct.categoryJson);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateOpportunitySpaceCategory_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.categoryJson = iprot.readString();
          struct.setCategoryJsonIsSet(true);
        }
      }
    }

  }

  public static class updateOpportunitySpaceCategory_result implements org.apache.thrift.TBase<updateOpportunitySpaceCategory_result, updateOpportunitySpaceCategory_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateOpportunitySpaceCategory_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateOpportunitySpaceCategory_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateOpportunitySpaceCategory_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateOpportunitySpaceCategory_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateOpportunitySpaceCategory_result.class, metaDataMap);
    }

    public updateOpportunitySpaceCategory_result() {
    }

    public updateOpportunitySpaceCategory_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateOpportunitySpaceCategory_result(updateOpportunitySpaceCategory_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public updateOpportunitySpaceCategory_result deepCopy() {
      return new updateOpportunitySpaceCategory_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public updateOpportunitySpaceCategory_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateOpportunitySpaceCategory_result)
        return this.equals((updateOpportunitySpaceCategory_result)that);
      return false;
    }

    public boolean equals(updateOpportunitySpaceCategory_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateOpportunitySpaceCategory_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateOpportunitySpaceCategory_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateOpportunitySpaceCategory_resultStandardSchemeFactory implements SchemeFactory {
      public updateOpportunitySpaceCategory_resultStandardScheme getScheme() {
        return new updateOpportunitySpaceCategory_resultStandardScheme();
      }
    }

    private static class updateOpportunitySpaceCategory_resultStandardScheme extends StandardScheme<updateOpportunitySpaceCategory_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateOpportunitySpaceCategory_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateOpportunitySpaceCategory_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateOpportunitySpaceCategory_resultTupleSchemeFactory implements SchemeFactory {
      public updateOpportunitySpaceCategory_resultTupleScheme getScheme() {
        return new updateOpportunitySpaceCategory_resultTupleScheme();
      }
    }

    private static class updateOpportunitySpaceCategory_resultTupleScheme extends TupleScheme<updateOpportunitySpaceCategory_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateOpportunitySpaceCategory_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateOpportunitySpaceCategory_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class deleteOpportunitySpaceCategory_args implements org.apache.thrift.TBase<deleteOpportunitySpaceCategory_args, deleteOpportunitySpaceCategory_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteOpportunitySpaceCategory_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteOpportunitySpaceCategory_args");

    private static final org.apache.thrift.protocol.TField CATEGORY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("categoryId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteOpportunitySpaceCategory_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteOpportunitySpaceCategory_argsTupleSchemeFactory());
    }

    public String categoryId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CATEGORY_ID((short)1, "categoryId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CATEGORY_ID
            return CATEGORY_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CATEGORY_ID, new org.apache.thrift.meta_data.FieldMetaData("categoryId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteOpportunitySpaceCategory_args.class, metaDataMap);
    }

    public deleteOpportunitySpaceCategory_args() {
    }

    public deleteOpportunitySpaceCategory_args(
      String categoryId)
    {
      this();
      this.categoryId = categoryId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteOpportunitySpaceCategory_args(deleteOpportunitySpaceCategory_args other) {
      if (other.isSetCategoryId()) {
        this.categoryId = other.categoryId;
      }
    }

    public deleteOpportunitySpaceCategory_args deepCopy() {
      return new deleteOpportunitySpaceCategory_args(this);
    }

    @Override
    public void clear() {
      this.categoryId = null;
    }

    public String getCategoryId() {
      return this.categoryId;
    }

    public deleteOpportunitySpaceCategory_args setCategoryId(String categoryId) {
      this.categoryId = categoryId;
      return this;
    }

    public void unsetCategoryId() {
      this.categoryId = null;
    }

    /** Returns true if field categoryId is set (has been assigned a value) and false otherwise */
    public boolean isSetCategoryId() {
      return this.categoryId != null;
    }

    public void setCategoryIdIsSet(boolean value) {
      if (!value) {
        this.categoryId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CATEGORY_ID:
        if (value == null) {
          unsetCategoryId();
        } else {
          setCategoryId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CATEGORY_ID:
        return getCategoryId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CATEGORY_ID:
        return isSetCategoryId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteOpportunitySpaceCategory_args)
        return this.equals((deleteOpportunitySpaceCategory_args)that);
      return false;
    }

    public boolean equals(deleteOpportunitySpaceCategory_args that) {
      if (that == null)
        return false;

      boolean this_present_categoryId = true && this.isSetCategoryId();
      boolean that_present_categoryId = true && that.isSetCategoryId();
      if (this_present_categoryId || that_present_categoryId) {
        if (!(this_present_categoryId && that_present_categoryId))
          return false;
        if (!this.categoryId.equals(that.categoryId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_categoryId = true && (isSetCategoryId());
      list.add(present_categoryId);
      if (present_categoryId)
        list.add(categoryId);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteOpportunitySpaceCategory_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCategoryId()).compareTo(other.isSetCategoryId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCategoryId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.categoryId, other.categoryId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteOpportunitySpaceCategory_args(");
      boolean first = true;

      sb.append("categoryId:");
      if (this.categoryId == null) {
        sb.append("null");
      } else {
        sb.append(this.categoryId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteOpportunitySpaceCategory_argsStandardSchemeFactory implements SchemeFactory {
      public deleteOpportunitySpaceCategory_argsStandardScheme getScheme() {
        return new deleteOpportunitySpaceCategory_argsStandardScheme();
      }
    }

    private static class deleteOpportunitySpaceCategory_argsStandardScheme extends StandardScheme<deleteOpportunitySpaceCategory_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteOpportunitySpaceCategory_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CATEGORY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.categoryId = iprot.readString();
                struct.setCategoryIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteOpportunitySpaceCategory_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.categoryId != null) {
          oprot.writeFieldBegin(CATEGORY_ID_FIELD_DESC);
          oprot.writeString(struct.categoryId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteOpportunitySpaceCategory_argsTupleSchemeFactory implements SchemeFactory {
      public deleteOpportunitySpaceCategory_argsTupleScheme getScheme() {
        return new deleteOpportunitySpaceCategory_argsTupleScheme();
      }
    }

    private static class deleteOpportunitySpaceCategory_argsTupleScheme extends TupleScheme<deleteOpportunitySpaceCategory_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteOpportunitySpaceCategory_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCategoryId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCategoryId()) {
          oprot.writeString(struct.categoryId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteOpportunitySpaceCategory_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.categoryId = iprot.readString();
          struct.setCategoryIdIsSet(true);
        }
      }
    }

  }

  public static class deleteOpportunitySpaceCategory_result implements org.apache.thrift.TBase<deleteOpportunitySpaceCategory_result, deleteOpportunitySpaceCategory_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteOpportunitySpaceCategory_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteOpportunitySpaceCategory_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteOpportunitySpaceCategory_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteOpportunitySpaceCategory_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteOpportunitySpaceCategory_result.class, metaDataMap);
    }

    public deleteOpportunitySpaceCategory_result() {
    }

    public deleteOpportunitySpaceCategory_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteOpportunitySpaceCategory_result(deleteOpportunitySpaceCategory_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public deleteOpportunitySpaceCategory_result deepCopy() {
      return new deleteOpportunitySpaceCategory_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public deleteOpportunitySpaceCategory_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteOpportunitySpaceCategory_result)
        return this.equals((deleteOpportunitySpaceCategory_result)that);
      return false;
    }

    public boolean equals(deleteOpportunitySpaceCategory_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteOpportunitySpaceCategory_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteOpportunitySpaceCategory_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteOpportunitySpaceCategory_resultStandardSchemeFactory implements SchemeFactory {
      public deleteOpportunitySpaceCategory_resultStandardScheme getScheme() {
        return new deleteOpportunitySpaceCategory_resultStandardScheme();
      }
    }

    private static class deleteOpportunitySpaceCategory_resultStandardScheme extends StandardScheme<deleteOpportunitySpaceCategory_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteOpportunitySpaceCategory_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteOpportunitySpaceCategory_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteOpportunitySpaceCategory_resultTupleSchemeFactory implements SchemeFactory {
      public deleteOpportunitySpaceCategory_resultTupleScheme getScheme() {
        return new deleteOpportunitySpaceCategory_resultTupleScheme();
      }
    }

    private static class deleteOpportunitySpaceCategory_resultTupleScheme extends TupleScheme<deleteOpportunitySpaceCategory_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteOpportunitySpaceCategory_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteOpportunitySpaceCategory_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
