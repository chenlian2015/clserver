/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cnd.greencube.server.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-03-25")
public class OrderService {

  /**
   * 用户订单服务类
   * @author 胡晓光
   */
  public interface Iface {

    /**
     * 取得我的订单
     * @param userid -- 用户id
     * @param filter -- 订单类型
     * @param pageNum -- 页数
     * 
     * @param userid
     * @param filter
     * @param pageNum
     */
    public String loadBuierOrders(String userid, String filter, int pageNum) throws org.apache.thrift.TException;

    /**
     * 取得一个订单的详细信息
     * @param orderid -- 订单id
     * @return 订单的json数据
     * 
     * @param orderid
     */
    public String getBuierOrder(String orderid) throws org.apache.thrift.TException;

    /**
     * 删除订单
     * @param -- 订单id
     * @return 成功与否标志
     * 
     * @param orderid
     */
    public String deleteBuierOrder(String orderid) throws org.apache.thrift.TException;

    /**
     * 结账操作
     * @param userid -- 用户id
     * @param shoppingItemsJson -- 购物车中的订单项json数据
     * @param needInvoice -- 是否需要发票
     * @return -- 成功与否标志
     * 
     * @param userid
     * @param shoppingItemsJson
     * @param couponId
     * @param receiverId
     */
    public String createOrder(String userid, String shoppingItemsJson, String couponId, String receiverId) throws org.apache.thrift.TException;

    /**
     * 提交发票申请
     * @param orderid -- 订单id
     * @param invoiceJson -- 订单json数据
     * @return -- 成功与否标志
     * 
     * @param orderid
     * @param invoiceJson
     */
    public String submitOrderInvoiceApply(String orderid, String invoiceJson) throws org.apache.thrift.TException;

    /**
     * 审核发票申请信息
     * @param invoiceId -- 发票id
     * @return -- 成功与否标志
     * 
     * @param invoiceId
     * @param auditorId
     */
    public String auditOrderInvoice(String invoiceId, String auditorId) throws org.apache.thrift.TException;

    /**
     * 审核发票申请信息
     * @param invoiceId -- 发票id
     * @return -- 成功与否标志
     * 
     * @param invoiceId
     * @param auditorId
     */
    public String unAuditOrderInvoice(String invoiceId, String auditorId) throws org.apache.thrift.TException;

    /**
     * 发布发票
     * @param invoiceId -- 发票id
     * @param publisherId -- 操作人
     * @return -- 成功与否标志
     * 
     * @param invoiceId
     * @param publisherId
     */
    public String publishOrderInvoice(String invoiceId, String publisherId) throws org.apache.thrift.TException;

    /**
     * 取消发布发票
     * @param invoiceId -- 发票id
     * @param publisherId -- 操作人
     * @return 成功与否标志
     * 
     * @param invoiceId
     * @param publisherId
     */
    public String unPublishOrderInvoice(String invoiceId, String publisherId) throws org.apache.thrift.TException;

    /**
     * 取得订单的发票信息
     * @param orderid -- 订单id
     * @return 订单发票json数据
     * 
     * @param orderid
     */
    public String getOrderInvoice(String orderid) throws org.apache.thrift.TException;

    /**
     * 返回已申请的发票列表
     * @param pageNum -- 页数
     * @return 订单发票json数组
     * 
     * @param pageNum
     */
    public String loadApplyOrderInvoice(int pageNum) throws org.apache.thrift.TException;

    /**
     * 返回已完结的发票
     * @param pageNum -- 页数
     * @return 订单发票json数组
     * 
     * @param pageNum
     */
    public String loadPublishedOrderInvoice(int pageNum) throws org.apache.thrift.TException;

    /**
     * 修改订单发票信息
     * @param orderid -- 订单id
     * @param invoiceJson -- 发票json数据
     * @return 成功与否标志
     * 
     * @param orderid
     * @param invoiceJson
     */
    public String updateOrderInvoice(String orderid, String invoiceJson) throws org.apache.thrift.TException;

    /**
     * 取得一个订单的快递信息
     * @param orderid -- 订单id
     * @return 返回订单的快递信息json数据
     * 
     * @param orderid
     */
    public String getOrderMailing(String orderid) throws org.apache.thrift.TException;

    /**
     * 取得店铺订单
     * @param shopid -- 店铺id
     * @param pageNum -- 页数
     * @return 返回店铺订单列表
     * 
     * @param shopid
     * @param pageNum
     */
    public String loadShopOrdersForPagelit(String shopid, int pageNum) throws org.apache.thrift.TException;

    /**
     * 取得店铺订单
     * @param shopOrderId
     * @return 返回店铺订单json对象
     * 
     * @param shopOrdeId
     */
    public String getShopOrder(String shopOrdeId) throws org.apache.thrift.TException;

    /**
     * 删除订单
     * @param shopOrderId -- 店铺订单id
     * @return 返回成功标志
     * 
     * @param shopOrderId
     */
    public String deleteShopOrder(String shopOrderId) throws org.apache.thrift.TException;

    /**
     * 取得供应商订单列表
     * @param userId -- 供应商id
     * @param pageNum -- 页数
     * @return 返回供应商订单json数组
     * 
     * @param userId
     * @param pageNum
     */
    public String loadProductOrdersForPagelit(String userId, int pageNum) throws org.apache.thrift.TException;

    /**
     * 取得供应商订单
     * @param userId -- 供应商id	/**
     * @return 返回供应商订单json对象
     * 
     * @param productOrderId
     */
    public String getProductOrder(String productOrderId) throws org.apache.thrift.TException;

    /**
     * 删除供应商订单
     * @param productOrderId -- 供应商订单id
     * @return 返回成功与否标志
     * 
     * @param productOrderId
     */
    public String deleteProductOrder(String productOrderId) throws org.apache.thrift.TException;

    /**
     * 取得我的订单(依据订单号)
     * @param orderNum -- 订单单号
     * @param pageNum -- 页数
     * 
     * @param orderNum
     * @param pageNum
     */
    public String searchOrdersByOrderNum(String orderNum, int pageNum) throws org.apache.thrift.TException;

    /**
     * 取得我的订单条目(依据订单号)
     * @param orderId -- 订单id
     * 
     * @param orderId
     */
    public String loadOrderItemsByOrderId(String orderId) throws org.apache.thrift.TException;

    /**
     * * 分页取得我的订单条目(依据订单号)
     * * @param orderId -- 订单id
     * * @param pageNum -- 页数
     *  @param status -- 订单状态
     * 
     * @param orderId
     * @param pageNum
     */
    public String loadOrderItemsByOrderIdForPageLit(String orderId, int pageNum) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void loadBuierOrders(String userid, String filter, int pageNum, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getBuierOrder(String orderid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void deleteBuierOrder(String orderid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void createOrder(String userid, String shoppingItemsJson, String couponId, String receiverId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void submitOrderInvoiceApply(String orderid, String invoiceJson, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void auditOrderInvoice(String invoiceId, String auditorId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void unAuditOrderInvoice(String invoiceId, String auditorId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void publishOrderInvoice(String invoiceId, String publisherId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void unPublishOrderInvoice(String invoiceId, String publisherId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getOrderInvoice(String orderid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void loadApplyOrderInvoice(int pageNum, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void loadPublishedOrderInvoice(int pageNum, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateOrderInvoice(String orderid, String invoiceJson, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getOrderMailing(String orderid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void loadShopOrdersForPagelit(String shopid, int pageNum, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getShopOrder(String shopOrdeId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void deleteShopOrder(String shopOrderId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void loadProductOrdersForPagelit(String userId, int pageNum, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getProductOrder(String productOrderId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void deleteProductOrder(String productOrderId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void searchOrdersByOrderNum(String orderNum, int pageNum, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void loadOrderItemsByOrderId(String orderId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void loadOrderItemsByOrderIdForPageLit(String orderId, int pageNum, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public String loadBuierOrders(String userid, String filter, int pageNum) throws org.apache.thrift.TException
    {
      send_loadBuierOrders(userid, filter, pageNum);
      return recv_loadBuierOrders();
    }

    public void send_loadBuierOrders(String userid, String filter, int pageNum) throws org.apache.thrift.TException
    {
      loadBuierOrders_args args = new loadBuierOrders_args();
      args.setUserid(userid);
      args.setFilter(filter);
      args.setPageNum(pageNum);
      sendBase("loadBuierOrders", args);
    }

    public String recv_loadBuierOrders() throws org.apache.thrift.TException
    {
      loadBuierOrders_result result = new loadBuierOrders_result();
      receiveBase(result, "loadBuierOrders");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "loadBuierOrders failed: unknown result");
    }

    public String getBuierOrder(String orderid) throws org.apache.thrift.TException
    {
      send_getBuierOrder(orderid);
      return recv_getBuierOrder();
    }

    public void send_getBuierOrder(String orderid) throws org.apache.thrift.TException
    {
      getBuierOrder_args args = new getBuierOrder_args();
      args.setOrderid(orderid);
      sendBase("getBuierOrder", args);
    }

    public String recv_getBuierOrder() throws org.apache.thrift.TException
    {
      getBuierOrder_result result = new getBuierOrder_result();
      receiveBase(result, "getBuierOrder");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getBuierOrder failed: unknown result");
    }

    public String deleteBuierOrder(String orderid) throws org.apache.thrift.TException
    {
      send_deleteBuierOrder(orderid);
      return recv_deleteBuierOrder();
    }

    public void send_deleteBuierOrder(String orderid) throws org.apache.thrift.TException
    {
      deleteBuierOrder_args args = new deleteBuierOrder_args();
      args.setOrderid(orderid);
      sendBase("deleteBuierOrder", args);
    }

    public String recv_deleteBuierOrder() throws org.apache.thrift.TException
    {
      deleteBuierOrder_result result = new deleteBuierOrder_result();
      receiveBase(result, "deleteBuierOrder");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deleteBuierOrder failed: unknown result");
    }

    public String createOrder(String userid, String shoppingItemsJson, String couponId, String receiverId) throws org.apache.thrift.TException
    {
      send_createOrder(userid, shoppingItemsJson, couponId, receiverId);
      return recv_createOrder();
    }

    public void send_createOrder(String userid, String shoppingItemsJson, String couponId, String receiverId) throws org.apache.thrift.TException
    {
      createOrder_args args = new createOrder_args();
      args.setUserid(userid);
      args.setShoppingItemsJson(shoppingItemsJson);
      args.setCouponId(couponId);
      args.setReceiverId(receiverId);
      sendBase("createOrder", args);
    }

    public String recv_createOrder() throws org.apache.thrift.TException
    {
      createOrder_result result = new createOrder_result();
      receiveBase(result, "createOrder");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "createOrder failed: unknown result");
    }

    public String submitOrderInvoiceApply(String orderid, String invoiceJson) throws org.apache.thrift.TException
    {
      send_submitOrderInvoiceApply(orderid, invoiceJson);
      return recv_submitOrderInvoiceApply();
    }

    public void send_submitOrderInvoiceApply(String orderid, String invoiceJson) throws org.apache.thrift.TException
    {
      submitOrderInvoiceApply_args args = new submitOrderInvoiceApply_args();
      args.setOrderid(orderid);
      args.setInvoiceJson(invoiceJson);
      sendBase("submitOrderInvoiceApply", args);
    }

    public String recv_submitOrderInvoiceApply() throws org.apache.thrift.TException
    {
      submitOrderInvoiceApply_result result = new submitOrderInvoiceApply_result();
      receiveBase(result, "submitOrderInvoiceApply");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "submitOrderInvoiceApply failed: unknown result");
    }

    public String auditOrderInvoice(String invoiceId, String auditorId) throws org.apache.thrift.TException
    {
      send_auditOrderInvoice(invoiceId, auditorId);
      return recv_auditOrderInvoice();
    }

    public void send_auditOrderInvoice(String invoiceId, String auditorId) throws org.apache.thrift.TException
    {
      auditOrderInvoice_args args = new auditOrderInvoice_args();
      args.setInvoiceId(invoiceId);
      args.setAuditorId(auditorId);
      sendBase("auditOrderInvoice", args);
    }

    public String recv_auditOrderInvoice() throws org.apache.thrift.TException
    {
      auditOrderInvoice_result result = new auditOrderInvoice_result();
      receiveBase(result, "auditOrderInvoice");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "auditOrderInvoice failed: unknown result");
    }

    public String unAuditOrderInvoice(String invoiceId, String auditorId) throws org.apache.thrift.TException
    {
      send_unAuditOrderInvoice(invoiceId, auditorId);
      return recv_unAuditOrderInvoice();
    }

    public void send_unAuditOrderInvoice(String invoiceId, String auditorId) throws org.apache.thrift.TException
    {
      unAuditOrderInvoice_args args = new unAuditOrderInvoice_args();
      args.setInvoiceId(invoiceId);
      args.setAuditorId(auditorId);
      sendBase("unAuditOrderInvoice", args);
    }

    public String recv_unAuditOrderInvoice() throws org.apache.thrift.TException
    {
      unAuditOrderInvoice_result result = new unAuditOrderInvoice_result();
      receiveBase(result, "unAuditOrderInvoice");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "unAuditOrderInvoice failed: unknown result");
    }

    public String publishOrderInvoice(String invoiceId, String publisherId) throws org.apache.thrift.TException
    {
      send_publishOrderInvoice(invoiceId, publisherId);
      return recv_publishOrderInvoice();
    }

    public void send_publishOrderInvoice(String invoiceId, String publisherId) throws org.apache.thrift.TException
    {
      publishOrderInvoice_args args = new publishOrderInvoice_args();
      args.setInvoiceId(invoiceId);
      args.setPublisherId(publisherId);
      sendBase("publishOrderInvoice", args);
    }

    public String recv_publishOrderInvoice() throws org.apache.thrift.TException
    {
      publishOrderInvoice_result result = new publishOrderInvoice_result();
      receiveBase(result, "publishOrderInvoice");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "publishOrderInvoice failed: unknown result");
    }

    public String unPublishOrderInvoice(String invoiceId, String publisherId) throws org.apache.thrift.TException
    {
      send_unPublishOrderInvoice(invoiceId, publisherId);
      return recv_unPublishOrderInvoice();
    }

    public void send_unPublishOrderInvoice(String invoiceId, String publisherId) throws org.apache.thrift.TException
    {
      unPublishOrderInvoice_args args = new unPublishOrderInvoice_args();
      args.setInvoiceId(invoiceId);
      args.setPublisherId(publisherId);
      sendBase("unPublishOrderInvoice", args);
    }

    public String recv_unPublishOrderInvoice() throws org.apache.thrift.TException
    {
      unPublishOrderInvoice_result result = new unPublishOrderInvoice_result();
      receiveBase(result, "unPublishOrderInvoice");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "unPublishOrderInvoice failed: unknown result");
    }

    public String getOrderInvoice(String orderid) throws org.apache.thrift.TException
    {
      send_getOrderInvoice(orderid);
      return recv_getOrderInvoice();
    }

    public void send_getOrderInvoice(String orderid) throws org.apache.thrift.TException
    {
      getOrderInvoice_args args = new getOrderInvoice_args();
      args.setOrderid(orderid);
      sendBase("getOrderInvoice", args);
    }

    public String recv_getOrderInvoice() throws org.apache.thrift.TException
    {
      getOrderInvoice_result result = new getOrderInvoice_result();
      receiveBase(result, "getOrderInvoice");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getOrderInvoice failed: unknown result");
    }

    public String loadApplyOrderInvoice(int pageNum) throws org.apache.thrift.TException
    {
      send_loadApplyOrderInvoice(pageNum);
      return recv_loadApplyOrderInvoice();
    }

    public void send_loadApplyOrderInvoice(int pageNum) throws org.apache.thrift.TException
    {
      loadApplyOrderInvoice_args args = new loadApplyOrderInvoice_args();
      args.setPageNum(pageNum);
      sendBase("loadApplyOrderInvoice", args);
    }

    public String recv_loadApplyOrderInvoice() throws org.apache.thrift.TException
    {
      loadApplyOrderInvoice_result result = new loadApplyOrderInvoice_result();
      receiveBase(result, "loadApplyOrderInvoice");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "loadApplyOrderInvoice failed: unknown result");
    }

    public String loadPublishedOrderInvoice(int pageNum) throws org.apache.thrift.TException
    {
      send_loadPublishedOrderInvoice(pageNum);
      return recv_loadPublishedOrderInvoice();
    }

    public void send_loadPublishedOrderInvoice(int pageNum) throws org.apache.thrift.TException
    {
      loadPublishedOrderInvoice_args args = new loadPublishedOrderInvoice_args();
      args.setPageNum(pageNum);
      sendBase("loadPublishedOrderInvoice", args);
    }

    public String recv_loadPublishedOrderInvoice() throws org.apache.thrift.TException
    {
      loadPublishedOrderInvoice_result result = new loadPublishedOrderInvoice_result();
      receiveBase(result, "loadPublishedOrderInvoice");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "loadPublishedOrderInvoice failed: unknown result");
    }

    public String updateOrderInvoice(String orderid, String invoiceJson) throws org.apache.thrift.TException
    {
      send_updateOrderInvoice(orderid, invoiceJson);
      return recv_updateOrderInvoice();
    }

    public void send_updateOrderInvoice(String orderid, String invoiceJson) throws org.apache.thrift.TException
    {
      updateOrderInvoice_args args = new updateOrderInvoice_args();
      args.setOrderid(orderid);
      args.setInvoiceJson(invoiceJson);
      sendBase("updateOrderInvoice", args);
    }

    public String recv_updateOrderInvoice() throws org.apache.thrift.TException
    {
      updateOrderInvoice_result result = new updateOrderInvoice_result();
      receiveBase(result, "updateOrderInvoice");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateOrderInvoice failed: unknown result");
    }

    public String getOrderMailing(String orderid) throws org.apache.thrift.TException
    {
      send_getOrderMailing(orderid);
      return recv_getOrderMailing();
    }

    public void send_getOrderMailing(String orderid) throws org.apache.thrift.TException
    {
      getOrderMailing_args args = new getOrderMailing_args();
      args.setOrderid(orderid);
      sendBase("getOrderMailing", args);
    }

    public String recv_getOrderMailing() throws org.apache.thrift.TException
    {
      getOrderMailing_result result = new getOrderMailing_result();
      receiveBase(result, "getOrderMailing");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getOrderMailing failed: unknown result");
    }

    public String loadShopOrdersForPagelit(String shopid, int pageNum) throws org.apache.thrift.TException
    {
      send_loadShopOrdersForPagelit(shopid, pageNum);
      return recv_loadShopOrdersForPagelit();
    }

    public void send_loadShopOrdersForPagelit(String shopid, int pageNum) throws org.apache.thrift.TException
    {
      loadShopOrdersForPagelit_args args = new loadShopOrdersForPagelit_args();
      args.setShopid(shopid);
      args.setPageNum(pageNum);
      sendBase("loadShopOrdersForPagelit", args);
    }

    public String recv_loadShopOrdersForPagelit() throws org.apache.thrift.TException
    {
      loadShopOrdersForPagelit_result result = new loadShopOrdersForPagelit_result();
      receiveBase(result, "loadShopOrdersForPagelit");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "loadShopOrdersForPagelit failed: unknown result");
    }

    public String getShopOrder(String shopOrdeId) throws org.apache.thrift.TException
    {
      send_getShopOrder(shopOrdeId);
      return recv_getShopOrder();
    }

    public void send_getShopOrder(String shopOrdeId) throws org.apache.thrift.TException
    {
      getShopOrder_args args = new getShopOrder_args();
      args.setShopOrdeId(shopOrdeId);
      sendBase("getShopOrder", args);
    }

    public String recv_getShopOrder() throws org.apache.thrift.TException
    {
      getShopOrder_result result = new getShopOrder_result();
      receiveBase(result, "getShopOrder");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getShopOrder failed: unknown result");
    }

    public String deleteShopOrder(String shopOrderId) throws org.apache.thrift.TException
    {
      send_deleteShopOrder(shopOrderId);
      return recv_deleteShopOrder();
    }

    public void send_deleteShopOrder(String shopOrderId) throws org.apache.thrift.TException
    {
      deleteShopOrder_args args = new deleteShopOrder_args();
      args.setShopOrderId(shopOrderId);
      sendBase("deleteShopOrder", args);
    }

    public String recv_deleteShopOrder() throws org.apache.thrift.TException
    {
      deleteShopOrder_result result = new deleteShopOrder_result();
      receiveBase(result, "deleteShopOrder");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deleteShopOrder failed: unknown result");
    }

    public String loadProductOrdersForPagelit(String userId, int pageNum) throws org.apache.thrift.TException
    {
      send_loadProductOrdersForPagelit(userId, pageNum);
      return recv_loadProductOrdersForPagelit();
    }

    public void send_loadProductOrdersForPagelit(String userId, int pageNum) throws org.apache.thrift.TException
    {
      loadProductOrdersForPagelit_args args = new loadProductOrdersForPagelit_args();
      args.setUserId(userId);
      args.setPageNum(pageNum);
      sendBase("loadProductOrdersForPagelit", args);
    }

    public String recv_loadProductOrdersForPagelit() throws org.apache.thrift.TException
    {
      loadProductOrdersForPagelit_result result = new loadProductOrdersForPagelit_result();
      receiveBase(result, "loadProductOrdersForPagelit");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "loadProductOrdersForPagelit failed: unknown result");
    }

    public String getProductOrder(String productOrderId) throws org.apache.thrift.TException
    {
      send_getProductOrder(productOrderId);
      return recv_getProductOrder();
    }

    public void send_getProductOrder(String productOrderId) throws org.apache.thrift.TException
    {
      getProductOrder_args args = new getProductOrder_args();
      args.setProductOrderId(productOrderId);
      sendBase("getProductOrder", args);
    }

    public String recv_getProductOrder() throws org.apache.thrift.TException
    {
      getProductOrder_result result = new getProductOrder_result();
      receiveBase(result, "getProductOrder");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getProductOrder failed: unknown result");
    }

    public String deleteProductOrder(String productOrderId) throws org.apache.thrift.TException
    {
      send_deleteProductOrder(productOrderId);
      return recv_deleteProductOrder();
    }

    public void send_deleteProductOrder(String productOrderId) throws org.apache.thrift.TException
    {
      deleteProductOrder_args args = new deleteProductOrder_args();
      args.setProductOrderId(productOrderId);
      sendBase("deleteProductOrder", args);
    }

    public String recv_deleteProductOrder() throws org.apache.thrift.TException
    {
      deleteProductOrder_result result = new deleteProductOrder_result();
      receiveBase(result, "deleteProductOrder");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deleteProductOrder failed: unknown result");
    }

    public String searchOrdersByOrderNum(String orderNum, int pageNum) throws org.apache.thrift.TException
    {
      send_searchOrdersByOrderNum(orderNum, pageNum);
      return recv_searchOrdersByOrderNum();
    }

    public void send_searchOrdersByOrderNum(String orderNum, int pageNum) throws org.apache.thrift.TException
    {
      searchOrdersByOrderNum_args args = new searchOrdersByOrderNum_args();
      args.setOrderNum(orderNum);
      args.setPageNum(pageNum);
      sendBase("searchOrdersByOrderNum", args);
    }

    public String recv_searchOrdersByOrderNum() throws org.apache.thrift.TException
    {
      searchOrdersByOrderNum_result result = new searchOrdersByOrderNum_result();
      receiveBase(result, "searchOrdersByOrderNum");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "searchOrdersByOrderNum failed: unknown result");
    }

    public String loadOrderItemsByOrderId(String orderId) throws org.apache.thrift.TException
    {
      send_loadOrderItemsByOrderId(orderId);
      return recv_loadOrderItemsByOrderId();
    }

    public void send_loadOrderItemsByOrderId(String orderId) throws org.apache.thrift.TException
    {
      loadOrderItemsByOrderId_args args = new loadOrderItemsByOrderId_args();
      args.setOrderId(orderId);
      sendBase("loadOrderItemsByOrderId", args);
    }

    public String recv_loadOrderItemsByOrderId() throws org.apache.thrift.TException
    {
      loadOrderItemsByOrderId_result result = new loadOrderItemsByOrderId_result();
      receiveBase(result, "loadOrderItemsByOrderId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "loadOrderItemsByOrderId failed: unknown result");
    }

    public String loadOrderItemsByOrderIdForPageLit(String orderId, int pageNum) throws org.apache.thrift.TException
    {
      send_loadOrderItemsByOrderIdForPageLit(orderId, pageNum);
      return recv_loadOrderItemsByOrderIdForPageLit();
    }

    public void send_loadOrderItemsByOrderIdForPageLit(String orderId, int pageNum) throws org.apache.thrift.TException
    {
      loadOrderItemsByOrderIdForPageLit_args args = new loadOrderItemsByOrderIdForPageLit_args();
      args.setOrderId(orderId);
      args.setPageNum(pageNum);
      sendBase("loadOrderItemsByOrderIdForPageLit", args);
    }

    public String recv_loadOrderItemsByOrderIdForPageLit() throws org.apache.thrift.TException
    {
      loadOrderItemsByOrderIdForPageLit_result result = new loadOrderItemsByOrderIdForPageLit_result();
      receiveBase(result, "loadOrderItemsByOrderIdForPageLit");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "loadOrderItemsByOrderIdForPageLit failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void loadBuierOrders(String userid, String filter, int pageNum, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      loadBuierOrders_call method_call = new loadBuierOrders_call(userid, filter, pageNum, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class loadBuierOrders_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String userid;
      private String filter;
      private int pageNum;
      public loadBuierOrders_call(String userid, String filter, int pageNum, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userid = userid;
        this.filter = filter;
        this.pageNum = pageNum;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("loadBuierOrders", org.apache.thrift.protocol.TMessageType.CALL, 0));
        loadBuierOrders_args args = new loadBuierOrders_args();
        args.setUserid(userid);
        args.setFilter(filter);
        args.setPageNum(pageNum);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_loadBuierOrders();
      }
    }

    public void getBuierOrder(String orderid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getBuierOrder_call method_call = new getBuierOrder_call(orderid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getBuierOrder_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String orderid;
      public getBuierOrder_call(String orderid, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.orderid = orderid;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getBuierOrder", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getBuierOrder_args args = new getBuierOrder_args();
        args.setOrderid(orderid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getBuierOrder();
      }
    }

    public void deleteBuierOrder(String orderid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteBuierOrder_call method_call = new deleteBuierOrder_call(orderid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteBuierOrder_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String orderid;
      public deleteBuierOrder_call(String orderid, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.orderid = orderid;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteBuierOrder", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteBuierOrder_args args = new deleteBuierOrder_args();
        args.setOrderid(orderid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_deleteBuierOrder();
      }
    }

    public void createOrder(String userid, String shoppingItemsJson, String couponId, String receiverId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      createOrder_call method_call = new createOrder_call(userid, shoppingItemsJson, couponId, receiverId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class createOrder_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String userid;
      private String shoppingItemsJson;
      private String couponId;
      private String receiverId;
      public createOrder_call(String userid, String shoppingItemsJson, String couponId, String receiverId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userid = userid;
        this.shoppingItemsJson = shoppingItemsJson;
        this.couponId = couponId;
        this.receiverId = receiverId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createOrder", org.apache.thrift.protocol.TMessageType.CALL, 0));
        createOrder_args args = new createOrder_args();
        args.setUserid(userid);
        args.setShoppingItemsJson(shoppingItemsJson);
        args.setCouponId(couponId);
        args.setReceiverId(receiverId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_createOrder();
      }
    }

    public void submitOrderInvoiceApply(String orderid, String invoiceJson, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      submitOrderInvoiceApply_call method_call = new submitOrderInvoiceApply_call(orderid, invoiceJson, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class submitOrderInvoiceApply_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String orderid;
      private String invoiceJson;
      public submitOrderInvoiceApply_call(String orderid, String invoiceJson, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.orderid = orderid;
        this.invoiceJson = invoiceJson;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("submitOrderInvoiceApply", org.apache.thrift.protocol.TMessageType.CALL, 0));
        submitOrderInvoiceApply_args args = new submitOrderInvoiceApply_args();
        args.setOrderid(orderid);
        args.setInvoiceJson(invoiceJson);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_submitOrderInvoiceApply();
      }
    }

    public void auditOrderInvoice(String invoiceId, String auditorId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      auditOrderInvoice_call method_call = new auditOrderInvoice_call(invoiceId, auditorId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class auditOrderInvoice_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String invoiceId;
      private String auditorId;
      public auditOrderInvoice_call(String invoiceId, String auditorId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.invoiceId = invoiceId;
        this.auditorId = auditorId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("auditOrderInvoice", org.apache.thrift.protocol.TMessageType.CALL, 0));
        auditOrderInvoice_args args = new auditOrderInvoice_args();
        args.setInvoiceId(invoiceId);
        args.setAuditorId(auditorId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_auditOrderInvoice();
      }
    }

    public void unAuditOrderInvoice(String invoiceId, String auditorId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      unAuditOrderInvoice_call method_call = new unAuditOrderInvoice_call(invoiceId, auditorId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class unAuditOrderInvoice_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String invoiceId;
      private String auditorId;
      public unAuditOrderInvoice_call(String invoiceId, String auditorId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.invoiceId = invoiceId;
        this.auditorId = auditorId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("unAuditOrderInvoice", org.apache.thrift.protocol.TMessageType.CALL, 0));
        unAuditOrderInvoice_args args = new unAuditOrderInvoice_args();
        args.setInvoiceId(invoiceId);
        args.setAuditorId(auditorId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_unAuditOrderInvoice();
      }
    }

    public void publishOrderInvoice(String invoiceId, String publisherId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      publishOrderInvoice_call method_call = new publishOrderInvoice_call(invoiceId, publisherId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class publishOrderInvoice_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String invoiceId;
      private String publisherId;
      public publishOrderInvoice_call(String invoiceId, String publisherId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.invoiceId = invoiceId;
        this.publisherId = publisherId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("publishOrderInvoice", org.apache.thrift.protocol.TMessageType.CALL, 0));
        publishOrderInvoice_args args = new publishOrderInvoice_args();
        args.setInvoiceId(invoiceId);
        args.setPublisherId(publisherId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_publishOrderInvoice();
      }
    }

    public void unPublishOrderInvoice(String invoiceId, String publisherId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      unPublishOrderInvoice_call method_call = new unPublishOrderInvoice_call(invoiceId, publisherId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class unPublishOrderInvoice_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String invoiceId;
      private String publisherId;
      public unPublishOrderInvoice_call(String invoiceId, String publisherId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.invoiceId = invoiceId;
        this.publisherId = publisherId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("unPublishOrderInvoice", org.apache.thrift.protocol.TMessageType.CALL, 0));
        unPublishOrderInvoice_args args = new unPublishOrderInvoice_args();
        args.setInvoiceId(invoiceId);
        args.setPublisherId(publisherId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_unPublishOrderInvoice();
      }
    }

    public void getOrderInvoice(String orderid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getOrderInvoice_call method_call = new getOrderInvoice_call(orderid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getOrderInvoice_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String orderid;
      public getOrderInvoice_call(String orderid, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.orderid = orderid;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getOrderInvoice", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getOrderInvoice_args args = new getOrderInvoice_args();
        args.setOrderid(orderid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getOrderInvoice();
      }
    }

    public void loadApplyOrderInvoice(int pageNum, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      loadApplyOrderInvoice_call method_call = new loadApplyOrderInvoice_call(pageNum, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class loadApplyOrderInvoice_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int pageNum;
      public loadApplyOrderInvoice_call(int pageNum, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pageNum = pageNum;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("loadApplyOrderInvoice", org.apache.thrift.protocol.TMessageType.CALL, 0));
        loadApplyOrderInvoice_args args = new loadApplyOrderInvoice_args();
        args.setPageNum(pageNum);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_loadApplyOrderInvoice();
      }
    }

    public void loadPublishedOrderInvoice(int pageNum, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      loadPublishedOrderInvoice_call method_call = new loadPublishedOrderInvoice_call(pageNum, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class loadPublishedOrderInvoice_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int pageNum;
      public loadPublishedOrderInvoice_call(int pageNum, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pageNum = pageNum;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("loadPublishedOrderInvoice", org.apache.thrift.protocol.TMessageType.CALL, 0));
        loadPublishedOrderInvoice_args args = new loadPublishedOrderInvoice_args();
        args.setPageNum(pageNum);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_loadPublishedOrderInvoice();
      }
    }

    public void updateOrderInvoice(String orderid, String invoiceJson, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateOrderInvoice_call method_call = new updateOrderInvoice_call(orderid, invoiceJson, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateOrderInvoice_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String orderid;
      private String invoiceJson;
      public updateOrderInvoice_call(String orderid, String invoiceJson, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.orderid = orderid;
        this.invoiceJson = invoiceJson;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateOrderInvoice", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateOrderInvoice_args args = new updateOrderInvoice_args();
        args.setOrderid(orderid);
        args.setInvoiceJson(invoiceJson);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateOrderInvoice();
      }
    }

    public void getOrderMailing(String orderid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getOrderMailing_call method_call = new getOrderMailing_call(orderid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getOrderMailing_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String orderid;
      public getOrderMailing_call(String orderid, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.orderid = orderid;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getOrderMailing", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getOrderMailing_args args = new getOrderMailing_args();
        args.setOrderid(orderid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getOrderMailing();
      }
    }

    public void loadShopOrdersForPagelit(String shopid, int pageNum, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      loadShopOrdersForPagelit_call method_call = new loadShopOrdersForPagelit_call(shopid, pageNum, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class loadShopOrdersForPagelit_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String shopid;
      private int pageNum;
      public loadShopOrdersForPagelit_call(String shopid, int pageNum, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.shopid = shopid;
        this.pageNum = pageNum;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("loadShopOrdersForPagelit", org.apache.thrift.protocol.TMessageType.CALL, 0));
        loadShopOrdersForPagelit_args args = new loadShopOrdersForPagelit_args();
        args.setShopid(shopid);
        args.setPageNum(pageNum);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_loadShopOrdersForPagelit();
      }
    }

    public void getShopOrder(String shopOrdeId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getShopOrder_call method_call = new getShopOrder_call(shopOrdeId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getShopOrder_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String shopOrdeId;
      public getShopOrder_call(String shopOrdeId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.shopOrdeId = shopOrdeId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getShopOrder", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getShopOrder_args args = new getShopOrder_args();
        args.setShopOrdeId(shopOrdeId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getShopOrder();
      }
    }

    public void deleteShopOrder(String shopOrderId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteShopOrder_call method_call = new deleteShopOrder_call(shopOrderId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteShopOrder_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String shopOrderId;
      public deleteShopOrder_call(String shopOrderId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.shopOrderId = shopOrderId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteShopOrder", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteShopOrder_args args = new deleteShopOrder_args();
        args.setShopOrderId(shopOrderId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_deleteShopOrder();
      }
    }

    public void loadProductOrdersForPagelit(String userId, int pageNum, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      loadProductOrdersForPagelit_call method_call = new loadProductOrdersForPagelit_call(userId, pageNum, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class loadProductOrdersForPagelit_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String userId;
      private int pageNum;
      public loadProductOrdersForPagelit_call(String userId, int pageNum, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userId = userId;
        this.pageNum = pageNum;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("loadProductOrdersForPagelit", org.apache.thrift.protocol.TMessageType.CALL, 0));
        loadProductOrdersForPagelit_args args = new loadProductOrdersForPagelit_args();
        args.setUserId(userId);
        args.setPageNum(pageNum);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_loadProductOrdersForPagelit();
      }
    }

    public void getProductOrder(String productOrderId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getProductOrder_call method_call = new getProductOrder_call(productOrderId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getProductOrder_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String productOrderId;
      public getProductOrder_call(String productOrderId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.productOrderId = productOrderId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getProductOrder", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getProductOrder_args args = new getProductOrder_args();
        args.setProductOrderId(productOrderId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getProductOrder();
      }
    }

    public void deleteProductOrder(String productOrderId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteProductOrder_call method_call = new deleteProductOrder_call(productOrderId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteProductOrder_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String productOrderId;
      public deleteProductOrder_call(String productOrderId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.productOrderId = productOrderId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteProductOrder", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteProductOrder_args args = new deleteProductOrder_args();
        args.setProductOrderId(productOrderId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_deleteProductOrder();
      }
    }

    public void searchOrdersByOrderNum(String orderNum, int pageNum, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      searchOrdersByOrderNum_call method_call = new searchOrdersByOrderNum_call(orderNum, pageNum, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class searchOrdersByOrderNum_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String orderNum;
      private int pageNum;
      public searchOrdersByOrderNum_call(String orderNum, int pageNum, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.orderNum = orderNum;
        this.pageNum = pageNum;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("searchOrdersByOrderNum", org.apache.thrift.protocol.TMessageType.CALL, 0));
        searchOrdersByOrderNum_args args = new searchOrdersByOrderNum_args();
        args.setOrderNum(orderNum);
        args.setPageNum(pageNum);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_searchOrdersByOrderNum();
      }
    }

    public void loadOrderItemsByOrderId(String orderId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      loadOrderItemsByOrderId_call method_call = new loadOrderItemsByOrderId_call(orderId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class loadOrderItemsByOrderId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String orderId;
      public loadOrderItemsByOrderId_call(String orderId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.orderId = orderId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("loadOrderItemsByOrderId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        loadOrderItemsByOrderId_args args = new loadOrderItemsByOrderId_args();
        args.setOrderId(orderId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_loadOrderItemsByOrderId();
      }
    }

    public void loadOrderItemsByOrderIdForPageLit(String orderId, int pageNum, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      loadOrderItemsByOrderIdForPageLit_call method_call = new loadOrderItemsByOrderIdForPageLit_call(orderId, pageNum, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class loadOrderItemsByOrderIdForPageLit_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String orderId;
      private int pageNum;
      public loadOrderItemsByOrderIdForPageLit_call(String orderId, int pageNum, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.orderId = orderId;
        this.pageNum = pageNum;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("loadOrderItemsByOrderIdForPageLit", org.apache.thrift.protocol.TMessageType.CALL, 0));
        loadOrderItemsByOrderIdForPageLit_args args = new loadOrderItemsByOrderIdForPageLit_args();
        args.setOrderId(orderId);
        args.setPageNum(pageNum);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_loadOrderItemsByOrderIdForPageLit();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("loadBuierOrders", new loadBuierOrders());
      processMap.put("getBuierOrder", new getBuierOrder());
      processMap.put("deleteBuierOrder", new deleteBuierOrder());
      processMap.put("createOrder", new createOrder());
      processMap.put("submitOrderInvoiceApply", new submitOrderInvoiceApply());
      processMap.put("auditOrderInvoice", new auditOrderInvoice());
      processMap.put("unAuditOrderInvoice", new unAuditOrderInvoice());
      processMap.put("publishOrderInvoice", new publishOrderInvoice());
      processMap.put("unPublishOrderInvoice", new unPublishOrderInvoice());
      processMap.put("getOrderInvoice", new getOrderInvoice());
      processMap.put("loadApplyOrderInvoice", new loadApplyOrderInvoice());
      processMap.put("loadPublishedOrderInvoice", new loadPublishedOrderInvoice());
      processMap.put("updateOrderInvoice", new updateOrderInvoice());
      processMap.put("getOrderMailing", new getOrderMailing());
      processMap.put("loadShopOrdersForPagelit", new loadShopOrdersForPagelit());
      processMap.put("getShopOrder", new getShopOrder());
      processMap.put("deleteShopOrder", new deleteShopOrder());
      processMap.put("loadProductOrdersForPagelit", new loadProductOrdersForPagelit());
      processMap.put("getProductOrder", new getProductOrder());
      processMap.put("deleteProductOrder", new deleteProductOrder());
      processMap.put("searchOrdersByOrderNum", new searchOrdersByOrderNum());
      processMap.put("loadOrderItemsByOrderId", new loadOrderItemsByOrderId());
      processMap.put("loadOrderItemsByOrderIdForPageLit", new loadOrderItemsByOrderIdForPageLit());
      return processMap;
    }

    public static class loadBuierOrders<I extends Iface> extends org.apache.thrift.ProcessFunction<I, loadBuierOrders_args> {
      public loadBuierOrders() {
        super("loadBuierOrders");
      }

      public loadBuierOrders_args getEmptyArgsInstance() {
        return new loadBuierOrders_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public loadBuierOrders_result getResult(I iface, loadBuierOrders_args args) throws org.apache.thrift.TException {
        loadBuierOrders_result result = new loadBuierOrders_result();
        result.success = iface.loadBuierOrders(args.userid, args.filter, args.pageNum);
        return result;
      }
    }

    public static class getBuierOrder<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getBuierOrder_args> {
      public getBuierOrder() {
        super("getBuierOrder");
      }

      public getBuierOrder_args getEmptyArgsInstance() {
        return new getBuierOrder_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getBuierOrder_result getResult(I iface, getBuierOrder_args args) throws org.apache.thrift.TException {
        getBuierOrder_result result = new getBuierOrder_result();
        result.success = iface.getBuierOrder(args.orderid);
        return result;
      }
    }

    public static class deleteBuierOrder<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteBuierOrder_args> {
      public deleteBuierOrder() {
        super("deleteBuierOrder");
      }

      public deleteBuierOrder_args getEmptyArgsInstance() {
        return new deleteBuierOrder_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteBuierOrder_result getResult(I iface, deleteBuierOrder_args args) throws org.apache.thrift.TException {
        deleteBuierOrder_result result = new deleteBuierOrder_result();
        result.success = iface.deleteBuierOrder(args.orderid);
        return result;
      }
    }

    public static class createOrder<I extends Iface> extends org.apache.thrift.ProcessFunction<I, createOrder_args> {
      public createOrder() {
        super("createOrder");
      }

      public createOrder_args getEmptyArgsInstance() {
        return new createOrder_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public createOrder_result getResult(I iface, createOrder_args args) throws org.apache.thrift.TException {
        createOrder_result result = new createOrder_result();
        result.success = iface.createOrder(args.userid, args.shoppingItemsJson, args.couponId, args.receiverId);
        return result;
      }
    }

    public static class submitOrderInvoiceApply<I extends Iface> extends org.apache.thrift.ProcessFunction<I, submitOrderInvoiceApply_args> {
      public submitOrderInvoiceApply() {
        super("submitOrderInvoiceApply");
      }

      public submitOrderInvoiceApply_args getEmptyArgsInstance() {
        return new submitOrderInvoiceApply_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public submitOrderInvoiceApply_result getResult(I iface, submitOrderInvoiceApply_args args) throws org.apache.thrift.TException {
        submitOrderInvoiceApply_result result = new submitOrderInvoiceApply_result();
        result.success = iface.submitOrderInvoiceApply(args.orderid, args.invoiceJson);
        return result;
      }
    }

    public static class auditOrderInvoice<I extends Iface> extends org.apache.thrift.ProcessFunction<I, auditOrderInvoice_args> {
      public auditOrderInvoice() {
        super("auditOrderInvoice");
      }

      public auditOrderInvoice_args getEmptyArgsInstance() {
        return new auditOrderInvoice_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public auditOrderInvoice_result getResult(I iface, auditOrderInvoice_args args) throws org.apache.thrift.TException {
        auditOrderInvoice_result result = new auditOrderInvoice_result();
        result.success = iface.auditOrderInvoice(args.invoiceId, args.auditorId);
        return result;
      }
    }

    public static class unAuditOrderInvoice<I extends Iface> extends org.apache.thrift.ProcessFunction<I, unAuditOrderInvoice_args> {
      public unAuditOrderInvoice() {
        super("unAuditOrderInvoice");
      }

      public unAuditOrderInvoice_args getEmptyArgsInstance() {
        return new unAuditOrderInvoice_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public unAuditOrderInvoice_result getResult(I iface, unAuditOrderInvoice_args args) throws org.apache.thrift.TException {
        unAuditOrderInvoice_result result = new unAuditOrderInvoice_result();
        result.success = iface.unAuditOrderInvoice(args.invoiceId, args.auditorId);
        return result;
      }
    }

    public static class publishOrderInvoice<I extends Iface> extends org.apache.thrift.ProcessFunction<I, publishOrderInvoice_args> {
      public publishOrderInvoice() {
        super("publishOrderInvoice");
      }

      public publishOrderInvoice_args getEmptyArgsInstance() {
        return new publishOrderInvoice_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public publishOrderInvoice_result getResult(I iface, publishOrderInvoice_args args) throws org.apache.thrift.TException {
        publishOrderInvoice_result result = new publishOrderInvoice_result();
        result.success = iface.publishOrderInvoice(args.invoiceId, args.publisherId);
        return result;
      }
    }

    public static class unPublishOrderInvoice<I extends Iface> extends org.apache.thrift.ProcessFunction<I, unPublishOrderInvoice_args> {
      public unPublishOrderInvoice() {
        super("unPublishOrderInvoice");
      }

      public unPublishOrderInvoice_args getEmptyArgsInstance() {
        return new unPublishOrderInvoice_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public unPublishOrderInvoice_result getResult(I iface, unPublishOrderInvoice_args args) throws org.apache.thrift.TException {
        unPublishOrderInvoice_result result = new unPublishOrderInvoice_result();
        result.success = iface.unPublishOrderInvoice(args.invoiceId, args.publisherId);
        return result;
      }
    }

    public static class getOrderInvoice<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getOrderInvoice_args> {
      public getOrderInvoice() {
        super("getOrderInvoice");
      }

      public getOrderInvoice_args getEmptyArgsInstance() {
        return new getOrderInvoice_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getOrderInvoice_result getResult(I iface, getOrderInvoice_args args) throws org.apache.thrift.TException {
        getOrderInvoice_result result = new getOrderInvoice_result();
        result.success = iface.getOrderInvoice(args.orderid);
        return result;
      }
    }

    public static class loadApplyOrderInvoice<I extends Iface> extends org.apache.thrift.ProcessFunction<I, loadApplyOrderInvoice_args> {
      public loadApplyOrderInvoice() {
        super("loadApplyOrderInvoice");
      }

      public loadApplyOrderInvoice_args getEmptyArgsInstance() {
        return new loadApplyOrderInvoice_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public loadApplyOrderInvoice_result getResult(I iface, loadApplyOrderInvoice_args args) throws org.apache.thrift.TException {
        loadApplyOrderInvoice_result result = new loadApplyOrderInvoice_result();
        result.success = iface.loadApplyOrderInvoice(args.pageNum);
        return result;
      }
    }

    public static class loadPublishedOrderInvoice<I extends Iface> extends org.apache.thrift.ProcessFunction<I, loadPublishedOrderInvoice_args> {
      public loadPublishedOrderInvoice() {
        super("loadPublishedOrderInvoice");
      }

      public loadPublishedOrderInvoice_args getEmptyArgsInstance() {
        return new loadPublishedOrderInvoice_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public loadPublishedOrderInvoice_result getResult(I iface, loadPublishedOrderInvoice_args args) throws org.apache.thrift.TException {
        loadPublishedOrderInvoice_result result = new loadPublishedOrderInvoice_result();
        result.success = iface.loadPublishedOrderInvoice(args.pageNum);
        return result;
      }
    }

    public static class updateOrderInvoice<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateOrderInvoice_args> {
      public updateOrderInvoice() {
        super("updateOrderInvoice");
      }

      public updateOrderInvoice_args getEmptyArgsInstance() {
        return new updateOrderInvoice_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateOrderInvoice_result getResult(I iface, updateOrderInvoice_args args) throws org.apache.thrift.TException {
        updateOrderInvoice_result result = new updateOrderInvoice_result();
        result.success = iface.updateOrderInvoice(args.orderid, args.invoiceJson);
        return result;
      }
    }

    public static class getOrderMailing<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getOrderMailing_args> {
      public getOrderMailing() {
        super("getOrderMailing");
      }

      public getOrderMailing_args getEmptyArgsInstance() {
        return new getOrderMailing_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getOrderMailing_result getResult(I iface, getOrderMailing_args args) throws org.apache.thrift.TException {
        getOrderMailing_result result = new getOrderMailing_result();
        result.success = iface.getOrderMailing(args.orderid);
        return result;
      }
    }

    public static class loadShopOrdersForPagelit<I extends Iface> extends org.apache.thrift.ProcessFunction<I, loadShopOrdersForPagelit_args> {
      public loadShopOrdersForPagelit() {
        super("loadShopOrdersForPagelit");
      }

      public loadShopOrdersForPagelit_args getEmptyArgsInstance() {
        return new loadShopOrdersForPagelit_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public loadShopOrdersForPagelit_result getResult(I iface, loadShopOrdersForPagelit_args args) throws org.apache.thrift.TException {
        loadShopOrdersForPagelit_result result = new loadShopOrdersForPagelit_result();
        result.success = iface.loadShopOrdersForPagelit(args.shopid, args.pageNum);
        return result;
      }
    }

    public static class getShopOrder<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getShopOrder_args> {
      public getShopOrder() {
        super("getShopOrder");
      }

      public getShopOrder_args getEmptyArgsInstance() {
        return new getShopOrder_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getShopOrder_result getResult(I iface, getShopOrder_args args) throws org.apache.thrift.TException {
        getShopOrder_result result = new getShopOrder_result();
        result.success = iface.getShopOrder(args.shopOrdeId);
        return result;
      }
    }

    public static class deleteShopOrder<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteShopOrder_args> {
      public deleteShopOrder() {
        super("deleteShopOrder");
      }

      public deleteShopOrder_args getEmptyArgsInstance() {
        return new deleteShopOrder_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteShopOrder_result getResult(I iface, deleteShopOrder_args args) throws org.apache.thrift.TException {
        deleteShopOrder_result result = new deleteShopOrder_result();
        result.success = iface.deleteShopOrder(args.shopOrderId);
        return result;
      }
    }

    public static class loadProductOrdersForPagelit<I extends Iface> extends org.apache.thrift.ProcessFunction<I, loadProductOrdersForPagelit_args> {
      public loadProductOrdersForPagelit() {
        super("loadProductOrdersForPagelit");
      }

      public loadProductOrdersForPagelit_args getEmptyArgsInstance() {
        return new loadProductOrdersForPagelit_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public loadProductOrdersForPagelit_result getResult(I iface, loadProductOrdersForPagelit_args args) throws org.apache.thrift.TException {
        loadProductOrdersForPagelit_result result = new loadProductOrdersForPagelit_result();
        result.success = iface.loadProductOrdersForPagelit(args.userId, args.pageNum);
        return result;
      }
    }

    public static class getProductOrder<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getProductOrder_args> {
      public getProductOrder() {
        super("getProductOrder");
      }

      public getProductOrder_args getEmptyArgsInstance() {
        return new getProductOrder_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getProductOrder_result getResult(I iface, getProductOrder_args args) throws org.apache.thrift.TException {
        getProductOrder_result result = new getProductOrder_result();
        result.success = iface.getProductOrder(args.productOrderId);
        return result;
      }
    }

    public static class deleteProductOrder<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteProductOrder_args> {
      public deleteProductOrder() {
        super("deleteProductOrder");
      }

      public deleteProductOrder_args getEmptyArgsInstance() {
        return new deleteProductOrder_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteProductOrder_result getResult(I iface, deleteProductOrder_args args) throws org.apache.thrift.TException {
        deleteProductOrder_result result = new deleteProductOrder_result();
        result.success = iface.deleteProductOrder(args.productOrderId);
        return result;
      }
    }

    public static class searchOrdersByOrderNum<I extends Iface> extends org.apache.thrift.ProcessFunction<I, searchOrdersByOrderNum_args> {
      public searchOrdersByOrderNum() {
        super("searchOrdersByOrderNum");
      }

      public searchOrdersByOrderNum_args getEmptyArgsInstance() {
        return new searchOrdersByOrderNum_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public searchOrdersByOrderNum_result getResult(I iface, searchOrdersByOrderNum_args args) throws org.apache.thrift.TException {
        searchOrdersByOrderNum_result result = new searchOrdersByOrderNum_result();
        result.success = iface.searchOrdersByOrderNum(args.orderNum, args.pageNum);
        return result;
      }
    }

    public static class loadOrderItemsByOrderId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, loadOrderItemsByOrderId_args> {
      public loadOrderItemsByOrderId() {
        super("loadOrderItemsByOrderId");
      }

      public loadOrderItemsByOrderId_args getEmptyArgsInstance() {
        return new loadOrderItemsByOrderId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public loadOrderItemsByOrderId_result getResult(I iface, loadOrderItemsByOrderId_args args) throws org.apache.thrift.TException {
        loadOrderItemsByOrderId_result result = new loadOrderItemsByOrderId_result();
        result.success = iface.loadOrderItemsByOrderId(args.orderId);
        return result;
      }
    }

    public static class loadOrderItemsByOrderIdForPageLit<I extends Iface> extends org.apache.thrift.ProcessFunction<I, loadOrderItemsByOrderIdForPageLit_args> {
      public loadOrderItemsByOrderIdForPageLit() {
        super("loadOrderItemsByOrderIdForPageLit");
      }

      public loadOrderItemsByOrderIdForPageLit_args getEmptyArgsInstance() {
        return new loadOrderItemsByOrderIdForPageLit_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public loadOrderItemsByOrderIdForPageLit_result getResult(I iface, loadOrderItemsByOrderIdForPageLit_args args) throws org.apache.thrift.TException {
        loadOrderItemsByOrderIdForPageLit_result result = new loadOrderItemsByOrderIdForPageLit_result();
        result.success = iface.loadOrderItemsByOrderIdForPageLit(args.orderId, args.pageNum);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("loadBuierOrders", new loadBuierOrders());
      processMap.put("getBuierOrder", new getBuierOrder());
      processMap.put("deleteBuierOrder", new deleteBuierOrder());
      processMap.put("createOrder", new createOrder());
      processMap.put("submitOrderInvoiceApply", new submitOrderInvoiceApply());
      processMap.put("auditOrderInvoice", new auditOrderInvoice());
      processMap.put("unAuditOrderInvoice", new unAuditOrderInvoice());
      processMap.put("publishOrderInvoice", new publishOrderInvoice());
      processMap.put("unPublishOrderInvoice", new unPublishOrderInvoice());
      processMap.put("getOrderInvoice", new getOrderInvoice());
      processMap.put("loadApplyOrderInvoice", new loadApplyOrderInvoice());
      processMap.put("loadPublishedOrderInvoice", new loadPublishedOrderInvoice());
      processMap.put("updateOrderInvoice", new updateOrderInvoice());
      processMap.put("getOrderMailing", new getOrderMailing());
      processMap.put("loadShopOrdersForPagelit", new loadShopOrdersForPagelit());
      processMap.put("getShopOrder", new getShopOrder());
      processMap.put("deleteShopOrder", new deleteShopOrder());
      processMap.put("loadProductOrdersForPagelit", new loadProductOrdersForPagelit());
      processMap.put("getProductOrder", new getProductOrder());
      processMap.put("deleteProductOrder", new deleteProductOrder());
      processMap.put("searchOrdersByOrderNum", new searchOrdersByOrderNum());
      processMap.put("loadOrderItemsByOrderId", new loadOrderItemsByOrderId());
      processMap.put("loadOrderItemsByOrderIdForPageLit", new loadOrderItemsByOrderIdForPageLit());
      return processMap;
    }

    public static class loadBuierOrders<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, loadBuierOrders_args, String> {
      public loadBuierOrders() {
        super("loadBuierOrders");
      }

      public loadBuierOrders_args getEmptyArgsInstance() {
        return new loadBuierOrders_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            loadBuierOrders_result result = new loadBuierOrders_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            loadBuierOrders_result result = new loadBuierOrders_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, loadBuierOrders_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.loadBuierOrders(args.userid, args.filter, args.pageNum,resultHandler);
      }
    }

    public static class getBuierOrder<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getBuierOrder_args, String> {
      public getBuierOrder() {
        super("getBuierOrder");
      }

      public getBuierOrder_args getEmptyArgsInstance() {
        return new getBuierOrder_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            getBuierOrder_result result = new getBuierOrder_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getBuierOrder_result result = new getBuierOrder_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getBuierOrder_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.getBuierOrder(args.orderid,resultHandler);
      }
    }

    public static class deleteBuierOrder<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteBuierOrder_args, String> {
      public deleteBuierOrder() {
        super("deleteBuierOrder");
      }

      public deleteBuierOrder_args getEmptyArgsInstance() {
        return new deleteBuierOrder_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            deleteBuierOrder_result result = new deleteBuierOrder_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            deleteBuierOrder_result result = new deleteBuierOrder_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteBuierOrder_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.deleteBuierOrder(args.orderid,resultHandler);
      }
    }

    public static class createOrder<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, createOrder_args, String> {
      public createOrder() {
        super("createOrder");
      }

      public createOrder_args getEmptyArgsInstance() {
        return new createOrder_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            createOrder_result result = new createOrder_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            createOrder_result result = new createOrder_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, createOrder_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.createOrder(args.userid, args.shoppingItemsJson, args.couponId, args.receiverId,resultHandler);
      }
    }

    public static class submitOrderInvoiceApply<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, submitOrderInvoiceApply_args, String> {
      public submitOrderInvoiceApply() {
        super("submitOrderInvoiceApply");
      }

      public submitOrderInvoiceApply_args getEmptyArgsInstance() {
        return new submitOrderInvoiceApply_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            submitOrderInvoiceApply_result result = new submitOrderInvoiceApply_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            submitOrderInvoiceApply_result result = new submitOrderInvoiceApply_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, submitOrderInvoiceApply_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.submitOrderInvoiceApply(args.orderid, args.invoiceJson,resultHandler);
      }
    }

    public static class auditOrderInvoice<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, auditOrderInvoice_args, String> {
      public auditOrderInvoice() {
        super("auditOrderInvoice");
      }

      public auditOrderInvoice_args getEmptyArgsInstance() {
        return new auditOrderInvoice_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            auditOrderInvoice_result result = new auditOrderInvoice_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            auditOrderInvoice_result result = new auditOrderInvoice_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, auditOrderInvoice_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.auditOrderInvoice(args.invoiceId, args.auditorId,resultHandler);
      }
    }

    public static class unAuditOrderInvoice<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, unAuditOrderInvoice_args, String> {
      public unAuditOrderInvoice() {
        super("unAuditOrderInvoice");
      }

      public unAuditOrderInvoice_args getEmptyArgsInstance() {
        return new unAuditOrderInvoice_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            unAuditOrderInvoice_result result = new unAuditOrderInvoice_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            unAuditOrderInvoice_result result = new unAuditOrderInvoice_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, unAuditOrderInvoice_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.unAuditOrderInvoice(args.invoiceId, args.auditorId,resultHandler);
      }
    }

    public static class publishOrderInvoice<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, publishOrderInvoice_args, String> {
      public publishOrderInvoice() {
        super("publishOrderInvoice");
      }

      public publishOrderInvoice_args getEmptyArgsInstance() {
        return new publishOrderInvoice_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            publishOrderInvoice_result result = new publishOrderInvoice_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            publishOrderInvoice_result result = new publishOrderInvoice_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, publishOrderInvoice_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.publishOrderInvoice(args.invoiceId, args.publisherId,resultHandler);
      }
    }

    public static class unPublishOrderInvoice<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, unPublishOrderInvoice_args, String> {
      public unPublishOrderInvoice() {
        super("unPublishOrderInvoice");
      }

      public unPublishOrderInvoice_args getEmptyArgsInstance() {
        return new unPublishOrderInvoice_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            unPublishOrderInvoice_result result = new unPublishOrderInvoice_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            unPublishOrderInvoice_result result = new unPublishOrderInvoice_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, unPublishOrderInvoice_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.unPublishOrderInvoice(args.invoiceId, args.publisherId,resultHandler);
      }
    }

    public static class getOrderInvoice<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getOrderInvoice_args, String> {
      public getOrderInvoice() {
        super("getOrderInvoice");
      }

      public getOrderInvoice_args getEmptyArgsInstance() {
        return new getOrderInvoice_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            getOrderInvoice_result result = new getOrderInvoice_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getOrderInvoice_result result = new getOrderInvoice_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getOrderInvoice_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.getOrderInvoice(args.orderid,resultHandler);
      }
    }

    public static class loadApplyOrderInvoice<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, loadApplyOrderInvoice_args, String> {
      public loadApplyOrderInvoice() {
        super("loadApplyOrderInvoice");
      }

      public loadApplyOrderInvoice_args getEmptyArgsInstance() {
        return new loadApplyOrderInvoice_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            loadApplyOrderInvoice_result result = new loadApplyOrderInvoice_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            loadApplyOrderInvoice_result result = new loadApplyOrderInvoice_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, loadApplyOrderInvoice_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.loadApplyOrderInvoice(args.pageNum,resultHandler);
      }
    }

    public static class loadPublishedOrderInvoice<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, loadPublishedOrderInvoice_args, String> {
      public loadPublishedOrderInvoice() {
        super("loadPublishedOrderInvoice");
      }

      public loadPublishedOrderInvoice_args getEmptyArgsInstance() {
        return new loadPublishedOrderInvoice_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            loadPublishedOrderInvoice_result result = new loadPublishedOrderInvoice_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            loadPublishedOrderInvoice_result result = new loadPublishedOrderInvoice_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, loadPublishedOrderInvoice_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.loadPublishedOrderInvoice(args.pageNum,resultHandler);
      }
    }

    public static class updateOrderInvoice<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateOrderInvoice_args, String> {
      public updateOrderInvoice() {
        super("updateOrderInvoice");
      }

      public updateOrderInvoice_args getEmptyArgsInstance() {
        return new updateOrderInvoice_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            updateOrderInvoice_result result = new updateOrderInvoice_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateOrderInvoice_result result = new updateOrderInvoice_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateOrderInvoice_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.updateOrderInvoice(args.orderid, args.invoiceJson,resultHandler);
      }
    }

    public static class getOrderMailing<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getOrderMailing_args, String> {
      public getOrderMailing() {
        super("getOrderMailing");
      }

      public getOrderMailing_args getEmptyArgsInstance() {
        return new getOrderMailing_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            getOrderMailing_result result = new getOrderMailing_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getOrderMailing_result result = new getOrderMailing_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getOrderMailing_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.getOrderMailing(args.orderid,resultHandler);
      }
    }

    public static class loadShopOrdersForPagelit<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, loadShopOrdersForPagelit_args, String> {
      public loadShopOrdersForPagelit() {
        super("loadShopOrdersForPagelit");
      }

      public loadShopOrdersForPagelit_args getEmptyArgsInstance() {
        return new loadShopOrdersForPagelit_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            loadShopOrdersForPagelit_result result = new loadShopOrdersForPagelit_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            loadShopOrdersForPagelit_result result = new loadShopOrdersForPagelit_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, loadShopOrdersForPagelit_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.loadShopOrdersForPagelit(args.shopid, args.pageNum,resultHandler);
      }
    }

    public static class getShopOrder<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getShopOrder_args, String> {
      public getShopOrder() {
        super("getShopOrder");
      }

      public getShopOrder_args getEmptyArgsInstance() {
        return new getShopOrder_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            getShopOrder_result result = new getShopOrder_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getShopOrder_result result = new getShopOrder_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getShopOrder_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.getShopOrder(args.shopOrdeId,resultHandler);
      }
    }

    public static class deleteShopOrder<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteShopOrder_args, String> {
      public deleteShopOrder() {
        super("deleteShopOrder");
      }

      public deleteShopOrder_args getEmptyArgsInstance() {
        return new deleteShopOrder_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            deleteShopOrder_result result = new deleteShopOrder_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            deleteShopOrder_result result = new deleteShopOrder_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteShopOrder_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.deleteShopOrder(args.shopOrderId,resultHandler);
      }
    }

    public static class loadProductOrdersForPagelit<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, loadProductOrdersForPagelit_args, String> {
      public loadProductOrdersForPagelit() {
        super("loadProductOrdersForPagelit");
      }

      public loadProductOrdersForPagelit_args getEmptyArgsInstance() {
        return new loadProductOrdersForPagelit_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            loadProductOrdersForPagelit_result result = new loadProductOrdersForPagelit_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            loadProductOrdersForPagelit_result result = new loadProductOrdersForPagelit_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, loadProductOrdersForPagelit_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.loadProductOrdersForPagelit(args.userId, args.pageNum,resultHandler);
      }
    }

    public static class getProductOrder<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getProductOrder_args, String> {
      public getProductOrder() {
        super("getProductOrder");
      }

      public getProductOrder_args getEmptyArgsInstance() {
        return new getProductOrder_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            getProductOrder_result result = new getProductOrder_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getProductOrder_result result = new getProductOrder_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getProductOrder_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.getProductOrder(args.productOrderId,resultHandler);
      }
    }

    public static class deleteProductOrder<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteProductOrder_args, String> {
      public deleteProductOrder() {
        super("deleteProductOrder");
      }

      public deleteProductOrder_args getEmptyArgsInstance() {
        return new deleteProductOrder_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            deleteProductOrder_result result = new deleteProductOrder_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            deleteProductOrder_result result = new deleteProductOrder_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteProductOrder_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.deleteProductOrder(args.productOrderId,resultHandler);
      }
    }

    public static class searchOrdersByOrderNum<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, searchOrdersByOrderNum_args, String> {
      public searchOrdersByOrderNum() {
        super("searchOrdersByOrderNum");
      }

      public searchOrdersByOrderNum_args getEmptyArgsInstance() {
        return new searchOrdersByOrderNum_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            searchOrdersByOrderNum_result result = new searchOrdersByOrderNum_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            searchOrdersByOrderNum_result result = new searchOrdersByOrderNum_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, searchOrdersByOrderNum_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.searchOrdersByOrderNum(args.orderNum, args.pageNum,resultHandler);
      }
    }

    public static class loadOrderItemsByOrderId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, loadOrderItemsByOrderId_args, String> {
      public loadOrderItemsByOrderId() {
        super("loadOrderItemsByOrderId");
      }

      public loadOrderItemsByOrderId_args getEmptyArgsInstance() {
        return new loadOrderItemsByOrderId_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            loadOrderItemsByOrderId_result result = new loadOrderItemsByOrderId_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            loadOrderItemsByOrderId_result result = new loadOrderItemsByOrderId_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, loadOrderItemsByOrderId_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.loadOrderItemsByOrderId(args.orderId,resultHandler);
      }
    }

    public static class loadOrderItemsByOrderIdForPageLit<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, loadOrderItemsByOrderIdForPageLit_args, String> {
      public loadOrderItemsByOrderIdForPageLit() {
        super("loadOrderItemsByOrderIdForPageLit");
      }

      public loadOrderItemsByOrderIdForPageLit_args getEmptyArgsInstance() {
        return new loadOrderItemsByOrderIdForPageLit_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            loadOrderItemsByOrderIdForPageLit_result result = new loadOrderItemsByOrderIdForPageLit_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            loadOrderItemsByOrderIdForPageLit_result result = new loadOrderItemsByOrderIdForPageLit_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, loadOrderItemsByOrderIdForPageLit_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.loadOrderItemsByOrderIdForPageLit(args.orderId, args.pageNum,resultHandler);
      }
    }

  }

  public static class loadBuierOrders_args implements org.apache.thrift.TBase<loadBuierOrders_args, loadBuierOrders_args._Fields>, java.io.Serializable, Cloneable, Comparable<loadBuierOrders_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("loadBuierOrders_args");

    private static final org.apache.thrift.protocol.TField USERID_FIELD_DESC = new org.apache.thrift.protocol.TField("userid", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField FILTER_FIELD_DESC = new org.apache.thrift.protocol.TField("filter", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField PAGE_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("pageNum", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new loadBuierOrders_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new loadBuierOrders_argsTupleSchemeFactory());
    }

    public String userid; // required
    public String filter; // required
    public int pageNum; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USERID((short)1, "userid"),
      FILTER((short)2, "filter"),
      PAGE_NUM((short)3, "pageNum");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USERID
            return USERID;
          case 2: // FILTER
            return FILTER;
          case 3: // PAGE_NUM
            return PAGE_NUM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PAGENUM_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USERID, new org.apache.thrift.meta_data.FieldMetaData("userid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.FILTER, new org.apache.thrift.meta_data.FieldMetaData("filter", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PAGE_NUM, new org.apache.thrift.meta_data.FieldMetaData("pageNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(loadBuierOrders_args.class, metaDataMap);
    }

    public loadBuierOrders_args() {
    }

    public loadBuierOrders_args(
      String userid,
      String filter,
      int pageNum)
    {
      this();
      this.userid = userid;
      this.filter = filter;
      this.pageNum = pageNum;
      setPageNumIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public loadBuierOrders_args(loadBuierOrders_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetUserid()) {
        this.userid = other.userid;
      }
      if (other.isSetFilter()) {
        this.filter = other.filter;
      }
      this.pageNum = other.pageNum;
    }

    public loadBuierOrders_args deepCopy() {
      return new loadBuierOrders_args(this);
    }

    @Override
    public void clear() {
      this.userid = null;
      this.filter = null;
      setPageNumIsSet(false);
      this.pageNum = 0;
    }

    public String getUserid() {
      return this.userid;
    }

    public loadBuierOrders_args setUserid(String userid) {
      this.userid = userid;
      return this;
    }

    public void unsetUserid() {
      this.userid = null;
    }

    /** Returns true if field userid is set (has been assigned a value) and false otherwise */
    public boolean isSetUserid() {
      return this.userid != null;
    }

    public void setUseridIsSet(boolean value) {
      if (!value) {
        this.userid = null;
      }
    }

    public String getFilter() {
      return this.filter;
    }

    public loadBuierOrders_args setFilter(String filter) {
      this.filter = filter;
      return this;
    }

    public void unsetFilter() {
      this.filter = null;
    }

    /** Returns true if field filter is set (has been assigned a value) and false otherwise */
    public boolean isSetFilter() {
      return this.filter != null;
    }

    public void setFilterIsSet(boolean value) {
      if (!value) {
        this.filter = null;
      }
    }

    public int getPageNum() {
      return this.pageNum;
    }

    public loadBuierOrders_args setPageNum(int pageNum) {
      this.pageNum = pageNum;
      setPageNumIsSet(true);
      return this;
    }

    public void unsetPageNum() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGENUM_ISSET_ID);
    }

    /** Returns true if field pageNum is set (has been assigned a value) and false otherwise */
    public boolean isSetPageNum() {
      return EncodingUtils.testBit(__isset_bitfield, __PAGENUM_ISSET_ID);
    }

    public void setPageNumIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGENUM_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USERID:
        if (value == null) {
          unsetUserid();
        } else {
          setUserid((String)value);
        }
        break;

      case FILTER:
        if (value == null) {
          unsetFilter();
        } else {
          setFilter((String)value);
        }
        break;

      case PAGE_NUM:
        if (value == null) {
          unsetPageNum();
        } else {
          setPageNum((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USERID:
        return getUserid();

      case FILTER:
        return getFilter();

      case PAGE_NUM:
        return getPageNum();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USERID:
        return isSetUserid();
      case FILTER:
        return isSetFilter();
      case PAGE_NUM:
        return isSetPageNum();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof loadBuierOrders_args)
        return this.equals((loadBuierOrders_args)that);
      return false;
    }

    public boolean equals(loadBuierOrders_args that) {
      if (that == null)
        return false;

      boolean this_present_userid = true && this.isSetUserid();
      boolean that_present_userid = true && that.isSetUserid();
      if (this_present_userid || that_present_userid) {
        if (!(this_present_userid && that_present_userid))
          return false;
        if (!this.userid.equals(that.userid))
          return false;
      }

      boolean this_present_filter = true && this.isSetFilter();
      boolean that_present_filter = true && that.isSetFilter();
      if (this_present_filter || that_present_filter) {
        if (!(this_present_filter && that_present_filter))
          return false;
        if (!this.filter.equals(that.filter))
          return false;
      }

      boolean this_present_pageNum = true;
      boolean that_present_pageNum = true;
      if (this_present_pageNum || that_present_pageNum) {
        if (!(this_present_pageNum && that_present_pageNum))
          return false;
        if (this.pageNum != that.pageNum)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_userid = true && (isSetUserid());
      list.add(present_userid);
      if (present_userid)
        list.add(userid);

      boolean present_filter = true && (isSetFilter());
      list.add(present_filter);
      if (present_filter)
        list.add(filter);

      boolean present_pageNum = true;
      list.add(present_pageNum);
      if (present_pageNum)
        list.add(pageNum);

      return list.hashCode();
    }

    @Override
    public int compareTo(loadBuierOrders_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUserid()).compareTo(other.isSetUserid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userid, other.userid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFilter()).compareTo(other.isSetFilter());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFilter()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.filter, other.filter);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPageNum()).compareTo(other.isSetPageNum());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageNum()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageNum, other.pageNum);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("loadBuierOrders_args(");
      boolean first = true;

      sb.append("userid:");
      if (this.userid == null) {
        sb.append("null");
      } else {
        sb.append(this.userid);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("filter:");
      if (this.filter == null) {
        sb.append("null");
      } else {
        sb.append(this.filter);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageNum:");
      sb.append(this.pageNum);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class loadBuierOrders_argsStandardSchemeFactory implements SchemeFactory {
      public loadBuierOrders_argsStandardScheme getScheme() {
        return new loadBuierOrders_argsStandardScheme();
      }
    }

    private static class loadBuierOrders_argsStandardScheme extends StandardScheme<loadBuierOrders_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, loadBuierOrders_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USERID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userid = iprot.readString();
                struct.setUseridIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // FILTER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.filter = iprot.readString();
                struct.setFilterIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PAGE_NUM
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pageNum = iprot.readI32();
                struct.setPageNumIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, loadBuierOrders_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.userid != null) {
          oprot.writeFieldBegin(USERID_FIELD_DESC);
          oprot.writeString(struct.userid);
          oprot.writeFieldEnd();
        }
        if (struct.filter != null) {
          oprot.writeFieldBegin(FILTER_FIELD_DESC);
          oprot.writeString(struct.filter);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PAGE_NUM_FIELD_DESC);
        oprot.writeI32(struct.pageNum);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class loadBuierOrders_argsTupleSchemeFactory implements SchemeFactory {
      public loadBuierOrders_argsTupleScheme getScheme() {
        return new loadBuierOrders_argsTupleScheme();
      }
    }

    private static class loadBuierOrders_argsTupleScheme extends TupleScheme<loadBuierOrders_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, loadBuierOrders_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUserid()) {
          optionals.set(0);
        }
        if (struct.isSetFilter()) {
          optionals.set(1);
        }
        if (struct.isSetPageNum()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetUserid()) {
          oprot.writeString(struct.userid);
        }
        if (struct.isSetFilter()) {
          oprot.writeString(struct.filter);
        }
        if (struct.isSetPageNum()) {
          oprot.writeI32(struct.pageNum);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, loadBuierOrders_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.userid = iprot.readString();
          struct.setUseridIsSet(true);
        }
        if (incoming.get(1)) {
          struct.filter = iprot.readString();
          struct.setFilterIsSet(true);
        }
        if (incoming.get(2)) {
          struct.pageNum = iprot.readI32();
          struct.setPageNumIsSet(true);
        }
      }
    }

  }

  public static class loadBuierOrders_result implements org.apache.thrift.TBase<loadBuierOrders_result, loadBuierOrders_result._Fields>, java.io.Serializable, Cloneable, Comparable<loadBuierOrders_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("loadBuierOrders_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new loadBuierOrders_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new loadBuierOrders_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(loadBuierOrders_result.class, metaDataMap);
    }

    public loadBuierOrders_result() {
    }

    public loadBuierOrders_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public loadBuierOrders_result(loadBuierOrders_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public loadBuierOrders_result deepCopy() {
      return new loadBuierOrders_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public loadBuierOrders_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof loadBuierOrders_result)
        return this.equals((loadBuierOrders_result)that);
      return false;
    }

    public boolean equals(loadBuierOrders_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(loadBuierOrders_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("loadBuierOrders_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class loadBuierOrders_resultStandardSchemeFactory implements SchemeFactory {
      public loadBuierOrders_resultStandardScheme getScheme() {
        return new loadBuierOrders_resultStandardScheme();
      }
    }

    private static class loadBuierOrders_resultStandardScheme extends StandardScheme<loadBuierOrders_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, loadBuierOrders_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, loadBuierOrders_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class loadBuierOrders_resultTupleSchemeFactory implements SchemeFactory {
      public loadBuierOrders_resultTupleScheme getScheme() {
        return new loadBuierOrders_resultTupleScheme();
      }
    }

    private static class loadBuierOrders_resultTupleScheme extends TupleScheme<loadBuierOrders_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, loadBuierOrders_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, loadBuierOrders_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getBuierOrder_args implements org.apache.thrift.TBase<getBuierOrder_args, getBuierOrder_args._Fields>, java.io.Serializable, Cloneable, Comparable<getBuierOrder_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getBuierOrder_args");

    private static final org.apache.thrift.protocol.TField ORDERID_FIELD_DESC = new org.apache.thrift.protocol.TField("orderid", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getBuierOrder_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getBuierOrder_argsTupleSchemeFactory());
    }

    public String orderid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORDERID((short)1, "orderid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORDERID
            return ORDERID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORDERID, new org.apache.thrift.meta_data.FieldMetaData("orderid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getBuierOrder_args.class, metaDataMap);
    }

    public getBuierOrder_args() {
    }

    public getBuierOrder_args(
      String orderid)
    {
      this();
      this.orderid = orderid;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getBuierOrder_args(getBuierOrder_args other) {
      if (other.isSetOrderid()) {
        this.orderid = other.orderid;
      }
    }

    public getBuierOrder_args deepCopy() {
      return new getBuierOrder_args(this);
    }

    @Override
    public void clear() {
      this.orderid = null;
    }

    public String getOrderid() {
      return this.orderid;
    }

    public getBuierOrder_args setOrderid(String orderid) {
      this.orderid = orderid;
      return this;
    }

    public void unsetOrderid() {
      this.orderid = null;
    }

    /** Returns true if field orderid is set (has been assigned a value) and false otherwise */
    public boolean isSetOrderid() {
      return this.orderid != null;
    }

    public void setOrderidIsSet(boolean value) {
      if (!value) {
        this.orderid = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORDERID:
        if (value == null) {
          unsetOrderid();
        } else {
          setOrderid((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORDERID:
        return getOrderid();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORDERID:
        return isSetOrderid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getBuierOrder_args)
        return this.equals((getBuierOrder_args)that);
      return false;
    }

    public boolean equals(getBuierOrder_args that) {
      if (that == null)
        return false;

      boolean this_present_orderid = true && this.isSetOrderid();
      boolean that_present_orderid = true && that.isSetOrderid();
      if (this_present_orderid || that_present_orderid) {
        if (!(this_present_orderid && that_present_orderid))
          return false;
        if (!this.orderid.equals(that.orderid))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_orderid = true && (isSetOrderid());
      list.add(present_orderid);
      if (present_orderid)
        list.add(orderid);

      return list.hashCode();
    }

    @Override
    public int compareTo(getBuierOrder_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOrderid()).compareTo(other.isSetOrderid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOrderid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderid, other.orderid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getBuierOrder_args(");
      boolean first = true;

      sb.append("orderid:");
      if (this.orderid == null) {
        sb.append("null");
      } else {
        sb.append(this.orderid);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getBuierOrder_argsStandardSchemeFactory implements SchemeFactory {
      public getBuierOrder_argsStandardScheme getScheme() {
        return new getBuierOrder_argsStandardScheme();
      }
    }

    private static class getBuierOrder_argsStandardScheme extends StandardScheme<getBuierOrder_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getBuierOrder_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORDERID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.orderid = iprot.readString();
                struct.setOrderidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getBuierOrder_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.orderid != null) {
          oprot.writeFieldBegin(ORDERID_FIELD_DESC);
          oprot.writeString(struct.orderid);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getBuierOrder_argsTupleSchemeFactory implements SchemeFactory {
      public getBuierOrder_argsTupleScheme getScheme() {
        return new getBuierOrder_argsTupleScheme();
      }
    }

    private static class getBuierOrder_argsTupleScheme extends TupleScheme<getBuierOrder_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getBuierOrder_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOrderid()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetOrderid()) {
          oprot.writeString(struct.orderid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getBuierOrder_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.orderid = iprot.readString();
          struct.setOrderidIsSet(true);
        }
      }
    }

  }

  public static class getBuierOrder_result implements org.apache.thrift.TBase<getBuierOrder_result, getBuierOrder_result._Fields>, java.io.Serializable, Cloneable, Comparable<getBuierOrder_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getBuierOrder_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getBuierOrder_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getBuierOrder_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getBuierOrder_result.class, metaDataMap);
    }

    public getBuierOrder_result() {
    }

    public getBuierOrder_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getBuierOrder_result(getBuierOrder_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public getBuierOrder_result deepCopy() {
      return new getBuierOrder_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public getBuierOrder_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getBuierOrder_result)
        return this.equals((getBuierOrder_result)that);
      return false;
    }

    public boolean equals(getBuierOrder_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getBuierOrder_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getBuierOrder_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getBuierOrder_resultStandardSchemeFactory implements SchemeFactory {
      public getBuierOrder_resultStandardScheme getScheme() {
        return new getBuierOrder_resultStandardScheme();
      }
    }

    private static class getBuierOrder_resultStandardScheme extends StandardScheme<getBuierOrder_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getBuierOrder_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getBuierOrder_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getBuierOrder_resultTupleSchemeFactory implements SchemeFactory {
      public getBuierOrder_resultTupleScheme getScheme() {
        return new getBuierOrder_resultTupleScheme();
      }
    }

    private static class getBuierOrder_resultTupleScheme extends TupleScheme<getBuierOrder_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getBuierOrder_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getBuierOrder_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class deleteBuierOrder_args implements org.apache.thrift.TBase<deleteBuierOrder_args, deleteBuierOrder_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteBuierOrder_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteBuierOrder_args");

    private static final org.apache.thrift.protocol.TField ORDERID_FIELD_DESC = new org.apache.thrift.protocol.TField("orderid", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteBuierOrder_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteBuierOrder_argsTupleSchemeFactory());
    }

    public String orderid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORDERID((short)1, "orderid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORDERID
            return ORDERID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORDERID, new org.apache.thrift.meta_data.FieldMetaData("orderid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteBuierOrder_args.class, metaDataMap);
    }

    public deleteBuierOrder_args() {
    }

    public deleteBuierOrder_args(
      String orderid)
    {
      this();
      this.orderid = orderid;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteBuierOrder_args(deleteBuierOrder_args other) {
      if (other.isSetOrderid()) {
        this.orderid = other.orderid;
      }
    }

    public deleteBuierOrder_args deepCopy() {
      return new deleteBuierOrder_args(this);
    }

    @Override
    public void clear() {
      this.orderid = null;
    }

    public String getOrderid() {
      return this.orderid;
    }

    public deleteBuierOrder_args setOrderid(String orderid) {
      this.orderid = orderid;
      return this;
    }

    public void unsetOrderid() {
      this.orderid = null;
    }

    /** Returns true if field orderid is set (has been assigned a value) and false otherwise */
    public boolean isSetOrderid() {
      return this.orderid != null;
    }

    public void setOrderidIsSet(boolean value) {
      if (!value) {
        this.orderid = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORDERID:
        if (value == null) {
          unsetOrderid();
        } else {
          setOrderid((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORDERID:
        return getOrderid();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORDERID:
        return isSetOrderid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteBuierOrder_args)
        return this.equals((deleteBuierOrder_args)that);
      return false;
    }

    public boolean equals(deleteBuierOrder_args that) {
      if (that == null)
        return false;

      boolean this_present_orderid = true && this.isSetOrderid();
      boolean that_present_orderid = true && that.isSetOrderid();
      if (this_present_orderid || that_present_orderid) {
        if (!(this_present_orderid && that_present_orderid))
          return false;
        if (!this.orderid.equals(that.orderid))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_orderid = true && (isSetOrderid());
      list.add(present_orderid);
      if (present_orderid)
        list.add(orderid);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteBuierOrder_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOrderid()).compareTo(other.isSetOrderid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOrderid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderid, other.orderid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteBuierOrder_args(");
      boolean first = true;

      sb.append("orderid:");
      if (this.orderid == null) {
        sb.append("null");
      } else {
        sb.append(this.orderid);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteBuierOrder_argsStandardSchemeFactory implements SchemeFactory {
      public deleteBuierOrder_argsStandardScheme getScheme() {
        return new deleteBuierOrder_argsStandardScheme();
      }
    }

    private static class deleteBuierOrder_argsStandardScheme extends StandardScheme<deleteBuierOrder_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteBuierOrder_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORDERID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.orderid = iprot.readString();
                struct.setOrderidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteBuierOrder_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.orderid != null) {
          oprot.writeFieldBegin(ORDERID_FIELD_DESC);
          oprot.writeString(struct.orderid);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteBuierOrder_argsTupleSchemeFactory implements SchemeFactory {
      public deleteBuierOrder_argsTupleScheme getScheme() {
        return new deleteBuierOrder_argsTupleScheme();
      }
    }

    private static class deleteBuierOrder_argsTupleScheme extends TupleScheme<deleteBuierOrder_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteBuierOrder_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOrderid()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetOrderid()) {
          oprot.writeString(struct.orderid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteBuierOrder_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.orderid = iprot.readString();
          struct.setOrderidIsSet(true);
        }
      }
    }

  }

  public static class deleteBuierOrder_result implements org.apache.thrift.TBase<deleteBuierOrder_result, deleteBuierOrder_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteBuierOrder_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteBuierOrder_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteBuierOrder_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteBuierOrder_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteBuierOrder_result.class, metaDataMap);
    }

    public deleteBuierOrder_result() {
    }

    public deleteBuierOrder_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteBuierOrder_result(deleteBuierOrder_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public deleteBuierOrder_result deepCopy() {
      return new deleteBuierOrder_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public deleteBuierOrder_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteBuierOrder_result)
        return this.equals((deleteBuierOrder_result)that);
      return false;
    }

    public boolean equals(deleteBuierOrder_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteBuierOrder_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteBuierOrder_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteBuierOrder_resultStandardSchemeFactory implements SchemeFactory {
      public deleteBuierOrder_resultStandardScheme getScheme() {
        return new deleteBuierOrder_resultStandardScheme();
      }
    }

    private static class deleteBuierOrder_resultStandardScheme extends StandardScheme<deleteBuierOrder_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteBuierOrder_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteBuierOrder_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteBuierOrder_resultTupleSchemeFactory implements SchemeFactory {
      public deleteBuierOrder_resultTupleScheme getScheme() {
        return new deleteBuierOrder_resultTupleScheme();
      }
    }

    private static class deleteBuierOrder_resultTupleScheme extends TupleScheme<deleteBuierOrder_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteBuierOrder_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteBuierOrder_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class createOrder_args implements org.apache.thrift.TBase<createOrder_args, createOrder_args._Fields>, java.io.Serializable, Cloneable, Comparable<createOrder_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createOrder_args");

    private static final org.apache.thrift.protocol.TField USERID_FIELD_DESC = new org.apache.thrift.protocol.TField("userid", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField SHOPPING_ITEMS_JSON_FIELD_DESC = new org.apache.thrift.protocol.TField("shoppingItemsJson", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField COUPON_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("couponId", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField RECEIVER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("receiverId", org.apache.thrift.protocol.TType.STRING, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createOrder_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createOrder_argsTupleSchemeFactory());
    }

    public String userid; // required
    public String shoppingItemsJson; // required
    public String couponId; // required
    public String receiverId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USERID((short)1, "userid"),
      SHOPPING_ITEMS_JSON((short)2, "shoppingItemsJson"),
      COUPON_ID((short)3, "couponId"),
      RECEIVER_ID((short)4, "receiverId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USERID
            return USERID;
          case 2: // SHOPPING_ITEMS_JSON
            return SHOPPING_ITEMS_JSON;
          case 3: // COUPON_ID
            return COUPON_ID;
          case 4: // RECEIVER_ID
            return RECEIVER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USERID, new org.apache.thrift.meta_data.FieldMetaData("userid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SHOPPING_ITEMS_JSON, new org.apache.thrift.meta_data.FieldMetaData("shoppingItemsJson", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.COUPON_ID, new org.apache.thrift.meta_data.FieldMetaData("couponId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.RECEIVER_ID, new org.apache.thrift.meta_data.FieldMetaData("receiverId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createOrder_args.class, metaDataMap);
    }

    public createOrder_args() {
    }

    public createOrder_args(
      String userid,
      String shoppingItemsJson,
      String couponId,
      String receiverId)
    {
      this();
      this.userid = userid;
      this.shoppingItemsJson = shoppingItemsJson;
      this.couponId = couponId;
      this.receiverId = receiverId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createOrder_args(createOrder_args other) {
      if (other.isSetUserid()) {
        this.userid = other.userid;
      }
      if (other.isSetShoppingItemsJson()) {
        this.shoppingItemsJson = other.shoppingItemsJson;
      }
      if (other.isSetCouponId()) {
        this.couponId = other.couponId;
      }
      if (other.isSetReceiverId()) {
        this.receiverId = other.receiverId;
      }
    }

    public createOrder_args deepCopy() {
      return new createOrder_args(this);
    }

    @Override
    public void clear() {
      this.userid = null;
      this.shoppingItemsJson = null;
      this.couponId = null;
      this.receiverId = null;
    }

    public String getUserid() {
      return this.userid;
    }

    public createOrder_args setUserid(String userid) {
      this.userid = userid;
      return this;
    }

    public void unsetUserid() {
      this.userid = null;
    }

    /** Returns true if field userid is set (has been assigned a value) and false otherwise */
    public boolean isSetUserid() {
      return this.userid != null;
    }

    public void setUseridIsSet(boolean value) {
      if (!value) {
        this.userid = null;
      }
    }

    public String getShoppingItemsJson() {
      return this.shoppingItemsJson;
    }

    public createOrder_args setShoppingItemsJson(String shoppingItemsJson) {
      this.shoppingItemsJson = shoppingItemsJson;
      return this;
    }

    public void unsetShoppingItemsJson() {
      this.shoppingItemsJson = null;
    }

    /** Returns true if field shoppingItemsJson is set (has been assigned a value) and false otherwise */
    public boolean isSetShoppingItemsJson() {
      return this.shoppingItemsJson != null;
    }

    public void setShoppingItemsJsonIsSet(boolean value) {
      if (!value) {
        this.shoppingItemsJson = null;
      }
    }

    public String getCouponId() {
      return this.couponId;
    }

    public createOrder_args setCouponId(String couponId) {
      this.couponId = couponId;
      return this;
    }

    public void unsetCouponId() {
      this.couponId = null;
    }

    /** Returns true if field couponId is set (has been assigned a value) and false otherwise */
    public boolean isSetCouponId() {
      return this.couponId != null;
    }

    public void setCouponIdIsSet(boolean value) {
      if (!value) {
        this.couponId = null;
      }
    }

    public String getReceiverId() {
      return this.receiverId;
    }

    public createOrder_args setReceiverId(String receiverId) {
      this.receiverId = receiverId;
      return this;
    }

    public void unsetReceiverId() {
      this.receiverId = null;
    }

    /** Returns true if field receiverId is set (has been assigned a value) and false otherwise */
    public boolean isSetReceiverId() {
      return this.receiverId != null;
    }

    public void setReceiverIdIsSet(boolean value) {
      if (!value) {
        this.receiverId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USERID:
        if (value == null) {
          unsetUserid();
        } else {
          setUserid((String)value);
        }
        break;

      case SHOPPING_ITEMS_JSON:
        if (value == null) {
          unsetShoppingItemsJson();
        } else {
          setShoppingItemsJson((String)value);
        }
        break;

      case COUPON_ID:
        if (value == null) {
          unsetCouponId();
        } else {
          setCouponId((String)value);
        }
        break;

      case RECEIVER_ID:
        if (value == null) {
          unsetReceiverId();
        } else {
          setReceiverId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USERID:
        return getUserid();

      case SHOPPING_ITEMS_JSON:
        return getShoppingItemsJson();

      case COUPON_ID:
        return getCouponId();

      case RECEIVER_ID:
        return getReceiverId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USERID:
        return isSetUserid();
      case SHOPPING_ITEMS_JSON:
        return isSetShoppingItemsJson();
      case COUPON_ID:
        return isSetCouponId();
      case RECEIVER_ID:
        return isSetReceiverId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createOrder_args)
        return this.equals((createOrder_args)that);
      return false;
    }

    public boolean equals(createOrder_args that) {
      if (that == null)
        return false;

      boolean this_present_userid = true && this.isSetUserid();
      boolean that_present_userid = true && that.isSetUserid();
      if (this_present_userid || that_present_userid) {
        if (!(this_present_userid && that_present_userid))
          return false;
        if (!this.userid.equals(that.userid))
          return false;
      }

      boolean this_present_shoppingItemsJson = true && this.isSetShoppingItemsJson();
      boolean that_present_shoppingItemsJson = true && that.isSetShoppingItemsJson();
      if (this_present_shoppingItemsJson || that_present_shoppingItemsJson) {
        if (!(this_present_shoppingItemsJson && that_present_shoppingItemsJson))
          return false;
        if (!this.shoppingItemsJson.equals(that.shoppingItemsJson))
          return false;
      }

      boolean this_present_couponId = true && this.isSetCouponId();
      boolean that_present_couponId = true && that.isSetCouponId();
      if (this_present_couponId || that_present_couponId) {
        if (!(this_present_couponId && that_present_couponId))
          return false;
        if (!this.couponId.equals(that.couponId))
          return false;
      }

      boolean this_present_receiverId = true && this.isSetReceiverId();
      boolean that_present_receiverId = true && that.isSetReceiverId();
      if (this_present_receiverId || that_present_receiverId) {
        if (!(this_present_receiverId && that_present_receiverId))
          return false;
        if (!this.receiverId.equals(that.receiverId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_userid = true && (isSetUserid());
      list.add(present_userid);
      if (present_userid)
        list.add(userid);

      boolean present_shoppingItemsJson = true && (isSetShoppingItemsJson());
      list.add(present_shoppingItemsJson);
      if (present_shoppingItemsJson)
        list.add(shoppingItemsJson);

      boolean present_couponId = true && (isSetCouponId());
      list.add(present_couponId);
      if (present_couponId)
        list.add(couponId);

      boolean present_receiverId = true && (isSetReceiverId());
      list.add(present_receiverId);
      if (present_receiverId)
        list.add(receiverId);

      return list.hashCode();
    }

    @Override
    public int compareTo(createOrder_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUserid()).compareTo(other.isSetUserid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userid, other.userid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetShoppingItemsJson()).compareTo(other.isSetShoppingItemsJson());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetShoppingItemsJson()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shoppingItemsJson, other.shoppingItemsJson);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCouponId()).compareTo(other.isSetCouponId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCouponId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.couponId, other.couponId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetReceiverId()).compareTo(other.isSetReceiverId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReceiverId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.receiverId, other.receiverId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createOrder_args(");
      boolean first = true;

      sb.append("userid:");
      if (this.userid == null) {
        sb.append("null");
      } else {
        sb.append(this.userid);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("shoppingItemsJson:");
      if (this.shoppingItemsJson == null) {
        sb.append("null");
      } else {
        sb.append(this.shoppingItemsJson);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("couponId:");
      if (this.couponId == null) {
        sb.append("null");
      } else {
        sb.append(this.couponId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("receiverId:");
      if (this.receiverId == null) {
        sb.append("null");
      } else {
        sb.append(this.receiverId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createOrder_argsStandardSchemeFactory implements SchemeFactory {
      public createOrder_argsStandardScheme getScheme() {
        return new createOrder_argsStandardScheme();
      }
    }

    private static class createOrder_argsStandardScheme extends StandardScheme<createOrder_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createOrder_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USERID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userid = iprot.readString();
                struct.setUseridIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SHOPPING_ITEMS_JSON
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.shoppingItemsJson = iprot.readString();
                struct.setShoppingItemsJsonIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // COUPON_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.couponId = iprot.readString();
                struct.setCouponIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // RECEIVER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.receiverId = iprot.readString();
                struct.setReceiverIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createOrder_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.userid != null) {
          oprot.writeFieldBegin(USERID_FIELD_DESC);
          oprot.writeString(struct.userid);
          oprot.writeFieldEnd();
        }
        if (struct.shoppingItemsJson != null) {
          oprot.writeFieldBegin(SHOPPING_ITEMS_JSON_FIELD_DESC);
          oprot.writeString(struct.shoppingItemsJson);
          oprot.writeFieldEnd();
        }
        if (struct.couponId != null) {
          oprot.writeFieldBegin(COUPON_ID_FIELD_DESC);
          oprot.writeString(struct.couponId);
          oprot.writeFieldEnd();
        }
        if (struct.receiverId != null) {
          oprot.writeFieldBegin(RECEIVER_ID_FIELD_DESC);
          oprot.writeString(struct.receiverId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createOrder_argsTupleSchemeFactory implements SchemeFactory {
      public createOrder_argsTupleScheme getScheme() {
        return new createOrder_argsTupleScheme();
      }
    }

    private static class createOrder_argsTupleScheme extends TupleScheme<createOrder_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createOrder_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUserid()) {
          optionals.set(0);
        }
        if (struct.isSetShoppingItemsJson()) {
          optionals.set(1);
        }
        if (struct.isSetCouponId()) {
          optionals.set(2);
        }
        if (struct.isSetReceiverId()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetUserid()) {
          oprot.writeString(struct.userid);
        }
        if (struct.isSetShoppingItemsJson()) {
          oprot.writeString(struct.shoppingItemsJson);
        }
        if (struct.isSetCouponId()) {
          oprot.writeString(struct.couponId);
        }
        if (struct.isSetReceiverId()) {
          oprot.writeString(struct.receiverId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createOrder_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.userid = iprot.readString();
          struct.setUseridIsSet(true);
        }
        if (incoming.get(1)) {
          struct.shoppingItemsJson = iprot.readString();
          struct.setShoppingItemsJsonIsSet(true);
        }
        if (incoming.get(2)) {
          struct.couponId = iprot.readString();
          struct.setCouponIdIsSet(true);
        }
        if (incoming.get(3)) {
          struct.receiverId = iprot.readString();
          struct.setReceiverIdIsSet(true);
        }
      }
    }

  }

  public static class createOrder_result implements org.apache.thrift.TBase<createOrder_result, createOrder_result._Fields>, java.io.Serializable, Cloneable, Comparable<createOrder_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createOrder_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createOrder_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createOrder_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createOrder_result.class, metaDataMap);
    }

    public createOrder_result() {
    }

    public createOrder_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createOrder_result(createOrder_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public createOrder_result deepCopy() {
      return new createOrder_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public createOrder_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createOrder_result)
        return this.equals((createOrder_result)that);
      return false;
    }

    public boolean equals(createOrder_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(createOrder_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createOrder_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createOrder_resultStandardSchemeFactory implements SchemeFactory {
      public createOrder_resultStandardScheme getScheme() {
        return new createOrder_resultStandardScheme();
      }
    }

    private static class createOrder_resultStandardScheme extends StandardScheme<createOrder_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createOrder_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createOrder_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createOrder_resultTupleSchemeFactory implements SchemeFactory {
      public createOrder_resultTupleScheme getScheme() {
        return new createOrder_resultTupleScheme();
      }
    }

    private static class createOrder_resultTupleScheme extends TupleScheme<createOrder_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createOrder_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createOrder_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class submitOrderInvoiceApply_args implements org.apache.thrift.TBase<submitOrderInvoiceApply_args, submitOrderInvoiceApply_args._Fields>, java.io.Serializable, Cloneable, Comparable<submitOrderInvoiceApply_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("submitOrderInvoiceApply_args");

    private static final org.apache.thrift.protocol.TField ORDERID_FIELD_DESC = new org.apache.thrift.protocol.TField("orderid", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField INVOICE_JSON_FIELD_DESC = new org.apache.thrift.protocol.TField("invoiceJson", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new submitOrderInvoiceApply_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new submitOrderInvoiceApply_argsTupleSchemeFactory());
    }

    public String orderid; // required
    public String invoiceJson; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORDERID((short)1, "orderid"),
      INVOICE_JSON((short)2, "invoiceJson");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORDERID
            return ORDERID;
          case 2: // INVOICE_JSON
            return INVOICE_JSON;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORDERID, new org.apache.thrift.meta_data.FieldMetaData("orderid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.INVOICE_JSON, new org.apache.thrift.meta_data.FieldMetaData("invoiceJson", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(submitOrderInvoiceApply_args.class, metaDataMap);
    }

    public submitOrderInvoiceApply_args() {
    }

    public submitOrderInvoiceApply_args(
      String orderid,
      String invoiceJson)
    {
      this();
      this.orderid = orderid;
      this.invoiceJson = invoiceJson;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public submitOrderInvoiceApply_args(submitOrderInvoiceApply_args other) {
      if (other.isSetOrderid()) {
        this.orderid = other.orderid;
      }
      if (other.isSetInvoiceJson()) {
        this.invoiceJson = other.invoiceJson;
      }
    }

    public submitOrderInvoiceApply_args deepCopy() {
      return new submitOrderInvoiceApply_args(this);
    }

    @Override
    public void clear() {
      this.orderid = null;
      this.invoiceJson = null;
    }

    public String getOrderid() {
      return this.orderid;
    }

    public submitOrderInvoiceApply_args setOrderid(String orderid) {
      this.orderid = orderid;
      return this;
    }

    public void unsetOrderid() {
      this.orderid = null;
    }

    /** Returns true if field orderid is set (has been assigned a value) and false otherwise */
    public boolean isSetOrderid() {
      return this.orderid != null;
    }

    public void setOrderidIsSet(boolean value) {
      if (!value) {
        this.orderid = null;
      }
    }

    public String getInvoiceJson() {
      return this.invoiceJson;
    }

    public submitOrderInvoiceApply_args setInvoiceJson(String invoiceJson) {
      this.invoiceJson = invoiceJson;
      return this;
    }

    public void unsetInvoiceJson() {
      this.invoiceJson = null;
    }

    /** Returns true if field invoiceJson is set (has been assigned a value) and false otherwise */
    public boolean isSetInvoiceJson() {
      return this.invoiceJson != null;
    }

    public void setInvoiceJsonIsSet(boolean value) {
      if (!value) {
        this.invoiceJson = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORDERID:
        if (value == null) {
          unsetOrderid();
        } else {
          setOrderid((String)value);
        }
        break;

      case INVOICE_JSON:
        if (value == null) {
          unsetInvoiceJson();
        } else {
          setInvoiceJson((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORDERID:
        return getOrderid();

      case INVOICE_JSON:
        return getInvoiceJson();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORDERID:
        return isSetOrderid();
      case INVOICE_JSON:
        return isSetInvoiceJson();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof submitOrderInvoiceApply_args)
        return this.equals((submitOrderInvoiceApply_args)that);
      return false;
    }

    public boolean equals(submitOrderInvoiceApply_args that) {
      if (that == null)
        return false;

      boolean this_present_orderid = true && this.isSetOrderid();
      boolean that_present_orderid = true && that.isSetOrderid();
      if (this_present_orderid || that_present_orderid) {
        if (!(this_present_orderid && that_present_orderid))
          return false;
        if (!this.orderid.equals(that.orderid))
          return false;
      }

      boolean this_present_invoiceJson = true && this.isSetInvoiceJson();
      boolean that_present_invoiceJson = true && that.isSetInvoiceJson();
      if (this_present_invoiceJson || that_present_invoiceJson) {
        if (!(this_present_invoiceJson && that_present_invoiceJson))
          return false;
        if (!this.invoiceJson.equals(that.invoiceJson))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_orderid = true && (isSetOrderid());
      list.add(present_orderid);
      if (present_orderid)
        list.add(orderid);

      boolean present_invoiceJson = true && (isSetInvoiceJson());
      list.add(present_invoiceJson);
      if (present_invoiceJson)
        list.add(invoiceJson);

      return list.hashCode();
    }

    @Override
    public int compareTo(submitOrderInvoiceApply_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOrderid()).compareTo(other.isSetOrderid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOrderid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderid, other.orderid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetInvoiceJson()).compareTo(other.isSetInvoiceJson());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInvoiceJson()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.invoiceJson, other.invoiceJson);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("submitOrderInvoiceApply_args(");
      boolean first = true;

      sb.append("orderid:");
      if (this.orderid == null) {
        sb.append("null");
      } else {
        sb.append(this.orderid);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("invoiceJson:");
      if (this.invoiceJson == null) {
        sb.append("null");
      } else {
        sb.append(this.invoiceJson);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class submitOrderInvoiceApply_argsStandardSchemeFactory implements SchemeFactory {
      public submitOrderInvoiceApply_argsStandardScheme getScheme() {
        return new submitOrderInvoiceApply_argsStandardScheme();
      }
    }

    private static class submitOrderInvoiceApply_argsStandardScheme extends StandardScheme<submitOrderInvoiceApply_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, submitOrderInvoiceApply_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORDERID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.orderid = iprot.readString();
                struct.setOrderidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // INVOICE_JSON
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.invoiceJson = iprot.readString();
                struct.setInvoiceJsonIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, submitOrderInvoiceApply_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.orderid != null) {
          oprot.writeFieldBegin(ORDERID_FIELD_DESC);
          oprot.writeString(struct.orderid);
          oprot.writeFieldEnd();
        }
        if (struct.invoiceJson != null) {
          oprot.writeFieldBegin(INVOICE_JSON_FIELD_DESC);
          oprot.writeString(struct.invoiceJson);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class submitOrderInvoiceApply_argsTupleSchemeFactory implements SchemeFactory {
      public submitOrderInvoiceApply_argsTupleScheme getScheme() {
        return new submitOrderInvoiceApply_argsTupleScheme();
      }
    }

    private static class submitOrderInvoiceApply_argsTupleScheme extends TupleScheme<submitOrderInvoiceApply_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, submitOrderInvoiceApply_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOrderid()) {
          optionals.set(0);
        }
        if (struct.isSetInvoiceJson()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetOrderid()) {
          oprot.writeString(struct.orderid);
        }
        if (struct.isSetInvoiceJson()) {
          oprot.writeString(struct.invoiceJson);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, submitOrderInvoiceApply_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.orderid = iprot.readString();
          struct.setOrderidIsSet(true);
        }
        if (incoming.get(1)) {
          struct.invoiceJson = iprot.readString();
          struct.setInvoiceJsonIsSet(true);
        }
      }
    }

  }

  public static class submitOrderInvoiceApply_result implements org.apache.thrift.TBase<submitOrderInvoiceApply_result, submitOrderInvoiceApply_result._Fields>, java.io.Serializable, Cloneable, Comparable<submitOrderInvoiceApply_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("submitOrderInvoiceApply_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new submitOrderInvoiceApply_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new submitOrderInvoiceApply_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(submitOrderInvoiceApply_result.class, metaDataMap);
    }

    public submitOrderInvoiceApply_result() {
    }

    public submitOrderInvoiceApply_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public submitOrderInvoiceApply_result(submitOrderInvoiceApply_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public submitOrderInvoiceApply_result deepCopy() {
      return new submitOrderInvoiceApply_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public submitOrderInvoiceApply_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof submitOrderInvoiceApply_result)
        return this.equals((submitOrderInvoiceApply_result)that);
      return false;
    }

    public boolean equals(submitOrderInvoiceApply_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(submitOrderInvoiceApply_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("submitOrderInvoiceApply_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class submitOrderInvoiceApply_resultStandardSchemeFactory implements SchemeFactory {
      public submitOrderInvoiceApply_resultStandardScheme getScheme() {
        return new submitOrderInvoiceApply_resultStandardScheme();
      }
    }

    private static class submitOrderInvoiceApply_resultStandardScheme extends StandardScheme<submitOrderInvoiceApply_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, submitOrderInvoiceApply_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, submitOrderInvoiceApply_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class submitOrderInvoiceApply_resultTupleSchemeFactory implements SchemeFactory {
      public submitOrderInvoiceApply_resultTupleScheme getScheme() {
        return new submitOrderInvoiceApply_resultTupleScheme();
      }
    }

    private static class submitOrderInvoiceApply_resultTupleScheme extends TupleScheme<submitOrderInvoiceApply_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, submitOrderInvoiceApply_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, submitOrderInvoiceApply_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class auditOrderInvoice_args implements org.apache.thrift.TBase<auditOrderInvoice_args, auditOrderInvoice_args._Fields>, java.io.Serializable, Cloneable, Comparable<auditOrderInvoice_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("auditOrderInvoice_args");

    private static final org.apache.thrift.protocol.TField INVOICE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("invoiceId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField AUDITOR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("auditorId", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new auditOrderInvoice_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new auditOrderInvoice_argsTupleSchemeFactory());
    }

    public String invoiceId; // required
    public String auditorId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      INVOICE_ID((short)1, "invoiceId"),
      AUDITOR_ID((short)2, "auditorId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // INVOICE_ID
            return INVOICE_ID;
          case 2: // AUDITOR_ID
            return AUDITOR_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.INVOICE_ID, new org.apache.thrift.meta_data.FieldMetaData("invoiceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.AUDITOR_ID, new org.apache.thrift.meta_data.FieldMetaData("auditorId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(auditOrderInvoice_args.class, metaDataMap);
    }

    public auditOrderInvoice_args() {
    }

    public auditOrderInvoice_args(
      String invoiceId,
      String auditorId)
    {
      this();
      this.invoiceId = invoiceId;
      this.auditorId = auditorId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public auditOrderInvoice_args(auditOrderInvoice_args other) {
      if (other.isSetInvoiceId()) {
        this.invoiceId = other.invoiceId;
      }
      if (other.isSetAuditorId()) {
        this.auditorId = other.auditorId;
      }
    }

    public auditOrderInvoice_args deepCopy() {
      return new auditOrderInvoice_args(this);
    }

    @Override
    public void clear() {
      this.invoiceId = null;
      this.auditorId = null;
    }

    public String getInvoiceId() {
      return this.invoiceId;
    }

    public auditOrderInvoice_args setInvoiceId(String invoiceId) {
      this.invoiceId = invoiceId;
      return this;
    }

    public void unsetInvoiceId() {
      this.invoiceId = null;
    }

    /** Returns true if field invoiceId is set (has been assigned a value) and false otherwise */
    public boolean isSetInvoiceId() {
      return this.invoiceId != null;
    }

    public void setInvoiceIdIsSet(boolean value) {
      if (!value) {
        this.invoiceId = null;
      }
    }

    public String getAuditorId() {
      return this.auditorId;
    }

    public auditOrderInvoice_args setAuditorId(String auditorId) {
      this.auditorId = auditorId;
      return this;
    }

    public void unsetAuditorId() {
      this.auditorId = null;
    }

    /** Returns true if field auditorId is set (has been assigned a value) and false otherwise */
    public boolean isSetAuditorId() {
      return this.auditorId != null;
    }

    public void setAuditorIdIsSet(boolean value) {
      if (!value) {
        this.auditorId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case INVOICE_ID:
        if (value == null) {
          unsetInvoiceId();
        } else {
          setInvoiceId((String)value);
        }
        break;

      case AUDITOR_ID:
        if (value == null) {
          unsetAuditorId();
        } else {
          setAuditorId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case INVOICE_ID:
        return getInvoiceId();

      case AUDITOR_ID:
        return getAuditorId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case INVOICE_ID:
        return isSetInvoiceId();
      case AUDITOR_ID:
        return isSetAuditorId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof auditOrderInvoice_args)
        return this.equals((auditOrderInvoice_args)that);
      return false;
    }

    public boolean equals(auditOrderInvoice_args that) {
      if (that == null)
        return false;

      boolean this_present_invoiceId = true && this.isSetInvoiceId();
      boolean that_present_invoiceId = true && that.isSetInvoiceId();
      if (this_present_invoiceId || that_present_invoiceId) {
        if (!(this_present_invoiceId && that_present_invoiceId))
          return false;
        if (!this.invoiceId.equals(that.invoiceId))
          return false;
      }

      boolean this_present_auditorId = true && this.isSetAuditorId();
      boolean that_present_auditorId = true && that.isSetAuditorId();
      if (this_present_auditorId || that_present_auditorId) {
        if (!(this_present_auditorId && that_present_auditorId))
          return false;
        if (!this.auditorId.equals(that.auditorId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_invoiceId = true && (isSetInvoiceId());
      list.add(present_invoiceId);
      if (present_invoiceId)
        list.add(invoiceId);

      boolean present_auditorId = true && (isSetAuditorId());
      list.add(present_auditorId);
      if (present_auditorId)
        list.add(auditorId);

      return list.hashCode();
    }

    @Override
    public int compareTo(auditOrderInvoice_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetInvoiceId()).compareTo(other.isSetInvoiceId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInvoiceId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.invoiceId, other.invoiceId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAuditorId()).compareTo(other.isSetAuditorId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuditorId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.auditorId, other.auditorId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("auditOrderInvoice_args(");
      boolean first = true;

      sb.append("invoiceId:");
      if (this.invoiceId == null) {
        sb.append("null");
      } else {
        sb.append(this.invoiceId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("auditorId:");
      if (this.auditorId == null) {
        sb.append("null");
      } else {
        sb.append(this.auditorId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class auditOrderInvoice_argsStandardSchemeFactory implements SchemeFactory {
      public auditOrderInvoice_argsStandardScheme getScheme() {
        return new auditOrderInvoice_argsStandardScheme();
      }
    }

    private static class auditOrderInvoice_argsStandardScheme extends StandardScheme<auditOrderInvoice_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, auditOrderInvoice_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // INVOICE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.invoiceId = iprot.readString();
                struct.setInvoiceIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // AUDITOR_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.auditorId = iprot.readString();
                struct.setAuditorIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, auditOrderInvoice_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.invoiceId != null) {
          oprot.writeFieldBegin(INVOICE_ID_FIELD_DESC);
          oprot.writeString(struct.invoiceId);
          oprot.writeFieldEnd();
        }
        if (struct.auditorId != null) {
          oprot.writeFieldBegin(AUDITOR_ID_FIELD_DESC);
          oprot.writeString(struct.auditorId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class auditOrderInvoice_argsTupleSchemeFactory implements SchemeFactory {
      public auditOrderInvoice_argsTupleScheme getScheme() {
        return new auditOrderInvoice_argsTupleScheme();
      }
    }

    private static class auditOrderInvoice_argsTupleScheme extends TupleScheme<auditOrderInvoice_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, auditOrderInvoice_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetInvoiceId()) {
          optionals.set(0);
        }
        if (struct.isSetAuditorId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetInvoiceId()) {
          oprot.writeString(struct.invoiceId);
        }
        if (struct.isSetAuditorId()) {
          oprot.writeString(struct.auditorId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, auditOrderInvoice_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.invoiceId = iprot.readString();
          struct.setInvoiceIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.auditorId = iprot.readString();
          struct.setAuditorIdIsSet(true);
        }
      }
    }

  }

  public static class auditOrderInvoice_result implements org.apache.thrift.TBase<auditOrderInvoice_result, auditOrderInvoice_result._Fields>, java.io.Serializable, Cloneable, Comparable<auditOrderInvoice_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("auditOrderInvoice_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new auditOrderInvoice_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new auditOrderInvoice_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(auditOrderInvoice_result.class, metaDataMap);
    }

    public auditOrderInvoice_result() {
    }

    public auditOrderInvoice_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public auditOrderInvoice_result(auditOrderInvoice_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public auditOrderInvoice_result deepCopy() {
      return new auditOrderInvoice_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public auditOrderInvoice_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof auditOrderInvoice_result)
        return this.equals((auditOrderInvoice_result)that);
      return false;
    }

    public boolean equals(auditOrderInvoice_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(auditOrderInvoice_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("auditOrderInvoice_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class auditOrderInvoice_resultStandardSchemeFactory implements SchemeFactory {
      public auditOrderInvoice_resultStandardScheme getScheme() {
        return new auditOrderInvoice_resultStandardScheme();
      }
    }

    private static class auditOrderInvoice_resultStandardScheme extends StandardScheme<auditOrderInvoice_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, auditOrderInvoice_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, auditOrderInvoice_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class auditOrderInvoice_resultTupleSchemeFactory implements SchemeFactory {
      public auditOrderInvoice_resultTupleScheme getScheme() {
        return new auditOrderInvoice_resultTupleScheme();
      }
    }

    private static class auditOrderInvoice_resultTupleScheme extends TupleScheme<auditOrderInvoice_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, auditOrderInvoice_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, auditOrderInvoice_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class unAuditOrderInvoice_args implements org.apache.thrift.TBase<unAuditOrderInvoice_args, unAuditOrderInvoice_args._Fields>, java.io.Serializable, Cloneable, Comparable<unAuditOrderInvoice_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("unAuditOrderInvoice_args");

    private static final org.apache.thrift.protocol.TField INVOICE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("invoiceId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField AUDITOR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("auditorId", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new unAuditOrderInvoice_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new unAuditOrderInvoice_argsTupleSchemeFactory());
    }

    public String invoiceId; // required
    public String auditorId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      INVOICE_ID((short)1, "invoiceId"),
      AUDITOR_ID((short)2, "auditorId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // INVOICE_ID
            return INVOICE_ID;
          case 2: // AUDITOR_ID
            return AUDITOR_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.INVOICE_ID, new org.apache.thrift.meta_data.FieldMetaData("invoiceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.AUDITOR_ID, new org.apache.thrift.meta_data.FieldMetaData("auditorId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(unAuditOrderInvoice_args.class, metaDataMap);
    }

    public unAuditOrderInvoice_args() {
    }

    public unAuditOrderInvoice_args(
      String invoiceId,
      String auditorId)
    {
      this();
      this.invoiceId = invoiceId;
      this.auditorId = auditorId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public unAuditOrderInvoice_args(unAuditOrderInvoice_args other) {
      if (other.isSetInvoiceId()) {
        this.invoiceId = other.invoiceId;
      }
      if (other.isSetAuditorId()) {
        this.auditorId = other.auditorId;
      }
    }

    public unAuditOrderInvoice_args deepCopy() {
      return new unAuditOrderInvoice_args(this);
    }

    @Override
    public void clear() {
      this.invoiceId = null;
      this.auditorId = null;
    }

    public String getInvoiceId() {
      return this.invoiceId;
    }

    public unAuditOrderInvoice_args setInvoiceId(String invoiceId) {
      this.invoiceId = invoiceId;
      return this;
    }

    public void unsetInvoiceId() {
      this.invoiceId = null;
    }

    /** Returns true if field invoiceId is set (has been assigned a value) and false otherwise */
    public boolean isSetInvoiceId() {
      return this.invoiceId != null;
    }

    public void setInvoiceIdIsSet(boolean value) {
      if (!value) {
        this.invoiceId = null;
      }
    }

    public String getAuditorId() {
      return this.auditorId;
    }

    public unAuditOrderInvoice_args setAuditorId(String auditorId) {
      this.auditorId = auditorId;
      return this;
    }

    public void unsetAuditorId() {
      this.auditorId = null;
    }

    /** Returns true if field auditorId is set (has been assigned a value) and false otherwise */
    public boolean isSetAuditorId() {
      return this.auditorId != null;
    }

    public void setAuditorIdIsSet(boolean value) {
      if (!value) {
        this.auditorId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case INVOICE_ID:
        if (value == null) {
          unsetInvoiceId();
        } else {
          setInvoiceId((String)value);
        }
        break;

      case AUDITOR_ID:
        if (value == null) {
          unsetAuditorId();
        } else {
          setAuditorId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case INVOICE_ID:
        return getInvoiceId();

      case AUDITOR_ID:
        return getAuditorId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case INVOICE_ID:
        return isSetInvoiceId();
      case AUDITOR_ID:
        return isSetAuditorId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof unAuditOrderInvoice_args)
        return this.equals((unAuditOrderInvoice_args)that);
      return false;
    }

    public boolean equals(unAuditOrderInvoice_args that) {
      if (that == null)
        return false;

      boolean this_present_invoiceId = true && this.isSetInvoiceId();
      boolean that_present_invoiceId = true && that.isSetInvoiceId();
      if (this_present_invoiceId || that_present_invoiceId) {
        if (!(this_present_invoiceId && that_present_invoiceId))
          return false;
        if (!this.invoiceId.equals(that.invoiceId))
          return false;
      }

      boolean this_present_auditorId = true && this.isSetAuditorId();
      boolean that_present_auditorId = true && that.isSetAuditorId();
      if (this_present_auditorId || that_present_auditorId) {
        if (!(this_present_auditorId && that_present_auditorId))
          return false;
        if (!this.auditorId.equals(that.auditorId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_invoiceId = true && (isSetInvoiceId());
      list.add(present_invoiceId);
      if (present_invoiceId)
        list.add(invoiceId);

      boolean present_auditorId = true && (isSetAuditorId());
      list.add(present_auditorId);
      if (present_auditorId)
        list.add(auditorId);

      return list.hashCode();
    }

    @Override
    public int compareTo(unAuditOrderInvoice_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetInvoiceId()).compareTo(other.isSetInvoiceId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInvoiceId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.invoiceId, other.invoiceId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAuditorId()).compareTo(other.isSetAuditorId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuditorId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.auditorId, other.auditorId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("unAuditOrderInvoice_args(");
      boolean first = true;

      sb.append("invoiceId:");
      if (this.invoiceId == null) {
        sb.append("null");
      } else {
        sb.append(this.invoiceId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("auditorId:");
      if (this.auditorId == null) {
        sb.append("null");
      } else {
        sb.append(this.auditorId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class unAuditOrderInvoice_argsStandardSchemeFactory implements SchemeFactory {
      public unAuditOrderInvoice_argsStandardScheme getScheme() {
        return new unAuditOrderInvoice_argsStandardScheme();
      }
    }

    private static class unAuditOrderInvoice_argsStandardScheme extends StandardScheme<unAuditOrderInvoice_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, unAuditOrderInvoice_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // INVOICE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.invoiceId = iprot.readString();
                struct.setInvoiceIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // AUDITOR_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.auditorId = iprot.readString();
                struct.setAuditorIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, unAuditOrderInvoice_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.invoiceId != null) {
          oprot.writeFieldBegin(INVOICE_ID_FIELD_DESC);
          oprot.writeString(struct.invoiceId);
          oprot.writeFieldEnd();
        }
        if (struct.auditorId != null) {
          oprot.writeFieldBegin(AUDITOR_ID_FIELD_DESC);
          oprot.writeString(struct.auditorId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class unAuditOrderInvoice_argsTupleSchemeFactory implements SchemeFactory {
      public unAuditOrderInvoice_argsTupleScheme getScheme() {
        return new unAuditOrderInvoice_argsTupleScheme();
      }
    }

    private static class unAuditOrderInvoice_argsTupleScheme extends TupleScheme<unAuditOrderInvoice_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, unAuditOrderInvoice_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetInvoiceId()) {
          optionals.set(0);
        }
        if (struct.isSetAuditorId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetInvoiceId()) {
          oprot.writeString(struct.invoiceId);
        }
        if (struct.isSetAuditorId()) {
          oprot.writeString(struct.auditorId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, unAuditOrderInvoice_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.invoiceId = iprot.readString();
          struct.setInvoiceIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.auditorId = iprot.readString();
          struct.setAuditorIdIsSet(true);
        }
      }
    }

  }

  public static class unAuditOrderInvoice_result implements org.apache.thrift.TBase<unAuditOrderInvoice_result, unAuditOrderInvoice_result._Fields>, java.io.Serializable, Cloneable, Comparable<unAuditOrderInvoice_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("unAuditOrderInvoice_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new unAuditOrderInvoice_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new unAuditOrderInvoice_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(unAuditOrderInvoice_result.class, metaDataMap);
    }

    public unAuditOrderInvoice_result() {
    }

    public unAuditOrderInvoice_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public unAuditOrderInvoice_result(unAuditOrderInvoice_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public unAuditOrderInvoice_result deepCopy() {
      return new unAuditOrderInvoice_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public unAuditOrderInvoice_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof unAuditOrderInvoice_result)
        return this.equals((unAuditOrderInvoice_result)that);
      return false;
    }

    public boolean equals(unAuditOrderInvoice_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(unAuditOrderInvoice_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("unAuditOrderInvoice_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class unAuditOrderInvoice_resultStandardSchemeFactory implements SchemeFactory {
      public unAuditOrderInvoice_resultStandardScheme getScheme() {
        return new unAuditOrderInvoice_resultStandardScheme();
      }
    }

    private static class unAuditOrderInvoice_resultStandardScheme extends StandardScheme<unAuditOrderInvoice_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, unAuditOrderInvoice_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, unAuditOrderInvoice_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class unAuditOrderInvoice_resultTupleSchemeFactory implements SchemeFactory {
      public unAuditOrderInvoice_resultTupleScheme getScheme() {
        return new unAuditOrderInvoice_resultTupleScheme();
      }
    }

    private static class unAuditOrderInvoice_resultTupleScheme extends TupleScheme<unAuditOrderInvoice_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, unAuditOrderInvoice_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, unAuditOrderInvoice_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class publishOrderInvoice_args implements org.apache.thrift.TBase<publishOrderInvoice_args, publishOrderInvoice_args._Fields>, java.io.Serializable, Cloneable, Comparable<publishOrderInvoice_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("publishOrderInvoice_args");

    private static final org.apache.thrift.protocol.TField INVOICE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("invoiceId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PUBLISHER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("publisherId", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new publishOrderInvoice_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new publishOrderInvoice_argsTupleSchemeFactory());
    }

    public String invoiceId; // required
    public String publisherId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      INVOICE_ID((short)1, "invoiceId"),
      PUBLISHER_ID((short)2, "publisherId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // INVOICE_ID
            return INVOICE_ID;
          case 2: // PUBLISHER_ID
            return PUBLISHER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.INVOICE_ID, new org.apache.thrift.meta_data.FieldMetaData("invoiceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PUBLISHER_ID, new org.apache.thrift.meta_data.FieldMetaData("publisherId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(publishOrderInvoice_args.class, metaDataMap);
    }

    public publishOrderInvoice_args() {
    }

    public publishOrderInvoice_args(
      String invoiceId,
      String publisherId)
    {
      this();
      this.invoiceId = invoiceId;
      this.publisherId = publisherId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public publishOrderInvoice_args(publishOrderInvoice_args other) {
      if (other.isSetInvoiceId()) {
        this.invoiceId = other.invoiceId;
      }
      if (other.isSetPublisherId()) {
        this.publisherId = other.publisherId;
      }
    }

    public publishOrderInvoice_args deepCopy() {
      return new publishOrderInvoice_args(this);
    }

    @Override
    public void clear() {
      this.invoiceId = null;
      this.publisherId = null;
    }

    public String getInvoiceId() {
      return this.invoiceId;
    }

    public publishOrderInvoice_args setInvoiceId(String invoiceId) {
      this.invoiceId = invoiceId;
      return this;
    }

    public void unsetInvoiceId() {
      this.invoiceId = null;
    }

    /** Returns true if field invoiceId is set (has been assigned a value) and false otherwise */
    public boolean isSetInvoiceId() {
      return this.invoiceId != null;
    }

    public void setInvoiceIdIsSet(boolean value) {
      if (!value) {
        this.invoiceId = null;
      }
    }

    public String getPublisherId() {
      return this.publisherId;
    }

    public publishOrderInvoice_args setPublisherId(String publisherId) {
      this.publisherId = publisherId;
      return this;
    }

    public void unsetPublisherId() {
      this.publisherId = null;
    }

    /** Returns true if field publisherId is set (has been assigned a value) and false otherwise */
    public boolean isSetPublisherId() {
      return this.publisherId != null;
    }

    public void setPublisherIdIsSet(boolean value) {
      if (!value) {
        this.publisherId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case INVOICE_ID:
        if (value == null) {
          unsetInvoiceId();
        } else {
          setInvoiceId((String)value);
        }
        break;

      case PUBLISHER_ID:
        if (value == null) {
          unsetPublisherId();
        } else {
          setPublisherId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case INVOICE_ID:
        return getInvoiceId();

      case PUBLISHER_ID:
        return getPublisherId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case INVOICE_ID:
        return isSetInvoiceId();
      case PUBLISHER_ID:
        return isSetPublisherId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof publishOrderInvoice_args)
        return this.equals((publishOrderInvoice_args)that);
      return false;
    }

    public boolean equals(publishOrderInvoice_args that) {
      if (that == null)
        return false;

      boolean this_present_invoiceId = true && this.isSetInvoiceId();
      boolean that_present_invoiceId = true && that.isSetInvoiceId();
      if (this_present_invoiceId || that_present_invoiceId) {
        if (!(this_present_invoiceId && that_present_invoiceId))
          return false;
        if (!this.invoiceId.equals(that.invoiceId))
          return false;
      }

      boolean this_present_publisherId = true && this.isSetPublisherId();
      boolean that_present_publisherId = true && that.isSetPublisherId();
      if (this_present_publisherId || that_present_publisherId) {
        if (!(this_present_publisherId && that_present_publisherId))
          return false;
        if (!this.publisherId.equals(that.publisherId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_invoiceId = true && (isSetInvoiceId());
      list.add(present_invoiceId);
      if (present_invoiceId)
        list.add(invoiceId);

      boolean present_publisherId = true && (isSetPublisherId());
      list.add(present_publisherId);
      if (present_publisherId)
        list.add(publisherId);

      return list.hashCode();
    }

    @Override
    public int compareTo(publishOrderInvoice_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetInvoiceId()).compareTo(other.isSetInvoiceId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInvoiceId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.invoiceId, other.invoiceId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPublisherId()).compareTo(other.isSetPublisherId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPublisherId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.publisherId, other.publisherId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("publishOrderInvoice_args(");
      boolean first = true;

      sb.append("invoiceId:");
      if (this.invoiceId == null) {
        sb.append("null");
      } else {
        sb.append(this.invoiceId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("publisherId:");
      if (this.publisherId == null) {
        sb.append("null");
      } else {
        sb.append(this.publisherId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class publishOrderInvoice_argsStandardSchemeFactory implements SchemeFactory {
      public publishOrderInvoice_argsStandardScheme getScheme() {
        return new publishOrderInvoice_argsStandardScheme();
      }
    }

    private static class publishOrderInvoice_argsStandardScheme extends StandardScheme<publishOrderInvoice_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, publishOrderInvoice_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // INVOICE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.invoiceId = iprot.readString();
                struct.setInvoiceIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PUBLISHER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.publisherId = iprot.readString();
                struct.setPublisherIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, publishOrderInvoice_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.invoiceId != null) {
          oprot.writeFieldBegin(INVOICE_ID_FIELD_DESC);
          oprot.writeString(struct.invoiceId);
          oprot.writeFieldEnd();
        }
        if (struct.publisherId != null) {
          oprot.writeFieldBegin(PUBLISHER_ID_FIELD_DESC);
          oprot.writeString(struct.publisherId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class publishOrderInvoice_argsTupleSchemeFactory implements SchemeFactory {
      public publishOrderInvoice_argsTupleScheme getScheme() {
        return new publishOrderInvoice_argsTupleScheme();
      }
    }

    private static class publishOrderInvoice_argsTupleScheme extends TupleScheme<publishOrderInvoice_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, publishOrderInvoice_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetInvoiceId()) {
          optionals.set(0);
        }
        if (struct.isSetPublisherId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetInvoiceId()) {
          oprot.writeString(struct.invoiceId);
        }
        if (struct.isSetPublisherId()) {
          oprot.writeString(struct.publisherId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, publishOrderInvoice_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.invoiceId = iprot.readString();
          struct.setInvoiceIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.publisherId = iprot.readString();
          struct.setPublisherIdIsSet(true);
        }
      }
    }

  }

  public static class publishOrderInvoice_result implements org.apache.thrift.TBase<publishOrderInvoice_result, publishOrderInvoice_result._Fields>, java.io.Serializable, Cloneable, Comparable<publishOrderInvoice_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("publishOrderInvoice_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new publishOrderInvoice_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new publishOrderInvoice_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(publishOrderInvoice_result.class, metaDataMap);
    }

    public publishOrderInvoice_result() {
    }

    public publishOrderInvoice_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public publishOrderInvoice_result(publishOrderInvoice_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public publishOrderInvoice_result deepCopy() {
      return new publishOrderInvoice_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public publishOrderInvoice_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof publishOrderInvoice_result)
        return this.equals((publishOrderInvoice_result)that);
      return false;
    }

    public boolean equals(publishOrderInvoice_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(publishOrderInvoice_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("publishOrderInvoice_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class publishOrderInvoice_resultStandardSchemeFactory implements SchemeFactory {
      public publishOrderInvoice_resultStandardScheme getScheme() {
        return new publishOrderInvoice_resultStandardScheme();
      }
    }

    private static class publishOrderInvoice_resultStandardScheme extends StandardScheme<publishOrderInvoice_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, publishOrderInvoice_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, publishOrderInvoice_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class publishOrderInvoice_resultTupleSchemeFactory implements SchemeFactory {
      public publishOrderInvoice_resultTupleScheme getScheme() {
        return new publishOrderInvoice_resultTupleScheme();
      }
    }

    private static class publishOrderInvoice_resultTupleScheme extends TupleScheme<publishOrderInvoice_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, publishOrderInvoice_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, publishOrderInvoice_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class unPublishOrderInvoice_args implements org.apache.thrift.TBase<unPublishOrderInvoice_args, unPublishOrderInvoice_args._Fields>, java.io.Serializable, Cloneable, Comparable<unPublishOrderInvoice_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("unPublishOrderInvoice_args");

    private static final org.apache.thrift.protocol.TField INVOICE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("invoiceId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PUBLISHER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("publisherId", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new unPublishOrderInvoice_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new unPublishOrderInvoice_argsTupleSchemeFactory());
    }

    public String invoiceId; // required
    public String publisherId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      INVOICE_ID((short)1, "invoiceId"),
      PUBLISHER_ID((short)2, "publisherId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // INVOICE_ID
            return INVOICE_ID;
          case 2: // PUBLISHER_ID
            return PUBLISHER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.INVOICE_ID, new org.apache.thrift.meta_data.FieldMetaData("invoiceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PUBLISHER_ID, new org.apache.thrift.meta_data.FieldMetaData("publisherId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(unPublishOrderInvoice_args.class, metaDataMap);
    }

    public unPublishOrderInvoice_args() {
    }

    public unPublishOrderInvoice_args(
      String invoiceId,
      String publisherId)
    {
      this();
      this.invoiceId = invoiceId;
      this.publisherId = publisherId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public unPublishOrderInvoice_args(unPublishOrderInvoice_args other) {
      if (other.isSetInvoiceId()) {
        this.invoiceId = other.invoiceId;
      }
      if (other.isSetPublisherId()) {
        this.publisherId = other.publisherId;
      }
    }

    public unPublishOrderInvoice_args deepCopy() {
      return new unPublishOrderInvoice_args(this);
    }

    @Override
    public void clear() {
      this.invoiceId = null;
      this.publisherId = null;
    }

    public String getInvoiceId() {
      return this.invoiceId;
    }

    public unPublishOrderInvoice_args setInvoiceId(String invoiceId) {
      this.invoiceId = invoiceId;
      return this;
    }

    public void unsetInvoiceId() {
      this.invoiceId = null;
    }

    /** Returns true if field invoiceId is set (has been assigned a value) and false otherwise */
    public boolean isSetInvoiceId() {
      return this.invoiceId != null;
    }

    public void setInvoiceIdIsSet(boolean value) {
      if (!value) {
        this.invoiceId = null;
      }
    }

    public String getPublisherId() {
      return this.publisherId;
    }

    public unPublishOrderInvoice_args setPublisherId(String publisherId) {
      this.publisherId = publisherId;
      return this;
    }

    public void unsetPublisherId() {
      this.publisherId = null;
    }

    /** Returns true if field publisherId is set (has been assigned a value) and false otherwise */
    public boolean isSetPublisherId() {
      return this.publisherId != null;
    }

    public void setPublisherIdIsSet(boolean value) {
      if (!value) {
        this.publisherId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case INVOICE_ID:
        if (value == null) {
          unsetInvoiceId();
        } else {
          setInvoiceId((String)value);
        }
        break;

      case PUBLISHER_ID:
        if (value == null) {
          unsetPublisherId();
        } else {
          setPublisherId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case INVOICE_ID:
        return getInvoiceId();

      case PUBLISHER_ID:
        return getPublisherId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case INVOICE_ID:
        return isSetInvoiceId();
      case PUBLISHER_ID:
        return isSetPublisherId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof unPublishOrderInvoice_args)
        return this.equals((unPublishOrderInvoice_args)that);
      return false;
    }

    public boolean equals(unPublishOrderInvoice_args that) {
      if (that == null)
        return false;

      boolean this_present_invoiceId = true && this.isSetInvoiceId();
      boolean that_present_invoiceId = true && that.isSetInvoiceId();
      if (this_present_invoiceId || that_present_invoiceId) {
        if (!(this_present_invoiceId && that_present_invoiceId))
          return false;
        if (!this.invoiceId.equals(that.invoiceId))
          return false;
      }

      boolean this_present_publisherId = true && this.isSetPublisherId();
      boolean that_present_publisherId = true && that.isSetPublisherId();
      if (this_present_publisherId || that_present_publisherId) {
        if (!(this_present_publisherId && that_present_publisherId))
          return false;
        if (!this.publisherId.equals(that.publisherId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_invoiceId = true && (isSetInvoiceId());
      list.add(present_invoiceId);
      if (present_invoiceId)
        list.add(invoiceId);

      boolean present_publisherId = true && (isSetPublisherId());
      list.add(present_publisherId);
      if (present_publisherId)
        list.add(publisherId);

      return list.hashCode();
    }

    @Override
    public int compareTo(unPublishOrderInvoice_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetInvoiceId()).compareTo(other.isSetInvoiceId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInvoiceId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.invoiceId, other.invoiceId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPublisherId()).compareTo(other.isSetPublisherId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPublisherId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.publisherId, other.publisherId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("unPublishOrderInvoice_args(");
      boolean first = true;

      sb.append("invoiceId:");
      if (this.invoiceId == null) {
        sb.append("null");
      } else {
        sb.append(this.invoiceId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("publisherId:");
      if (this.publisherId == null) {
        sb.append("null");
      } else {
        sb.append(this.publisherId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class unPublishOrderInvoice_argsStandardSchemeFactory implements SchemeFactory {
      public unPublishOrderInvoice_argsStandardScheme getScheme() {
        return new unPublishOrderInvoice_argsStandardScheme();
      }
    }

    private static class unPublishOrderInvoice_argsStandardScheme extends StandardScheme<unPublishOrderInvoice_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, unPublishOrderInvoice_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // INVOICE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.invoiceId = iprot.readString();
                struct.setInvoiceIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PUBLISHER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.publisherId = iprot.readString();
                struct.setPublisherIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, unPublishOrderInvoice_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.invoiceId != null) {
          oprot.writeFieldBegin(INVOICE_ID_FIELD_DESC);
          oprot.writeString(struct.invoiceId);
          oprot.writeFieldEnd();
        }
        if (struct.publisherId != null) {
          oprot.writeFieldBegin(PUBLISHER_ID_FIELD_DESC);
          oprot.writeString(struct.publisherId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class unPublishOrderInvoice_argsTupleSchemeFactory implements SchemeFactory {
      public unPublishOrderInvoice_argsTupleScheme getScheme() {
        return new unPublishOrderInvoice_argsTupleScheme();
      }
    }

    private static class unPublishOrderInvoice_argsTupleScheme extends TupleScheme<unPublishOrderInvoice_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, unPublishOrderInvoice_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetInvoiceId()) {
          optionals.set(0);
        }
        if (struct.isSetPublisherId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetInvoiceId()) {
          oprot.writeString(struct.invoiceId);
        }
        if (struct.isSetPublisherId()) {
          oprot.writeString(struct.publisherId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, unPublishOrderInvoice_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.invoiceId = iprot.readString();
          struct.setInvoiceIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.publisherId = iprot.readString();
          struct.setPublisherIdIsSet(true);
        }
      }
    }

  }

  public static class unPublishOrderInvoice_result implements org.apache.thrift.TBase<unPublishOrderInvoice_result, unPublishOrderInvoice_result._Fields>, java.io.Serializable, Cloneable, Comparable<unPublishOrderInvoice_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("unPublishOrderInvoice_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new unPublishOrderInvoice_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new unPublishOrderInvoice_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(unPublishOrderInvoice_result.class, metaDataMap);
    }

    public unPublishOrderInvoice_result() {
    }

    public unPublishOrderInvoice_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public unPublishOrderInvoice_result(unPublishOrderInvoice_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public unPublishOrderInvoice_result deepCopy() {
      return new unPublishOrderInvoice_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public unPublishOrderInvoice_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof unPublishOrderInvoice_result)
        return this.equals((unPublishOrderInvoice_result)that);
      return false;
    }

    public boolean equals(unPublishOrderInvoice_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(unPublishOrderInvoice_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("unPublishOrderInvoice_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class unPublishOrderInvoice_resultStandardSchemeFactory implements SchemeFactory {
      public unPublishOrderInvoice_resultStandardScheme getScheme() {
        return new unPublishOrderInvoice_resultStandardScheme();
      }
    }

    private static class unPublishOrderInvoice_resultStandardScheme extends StandardScheme<unPublishOrderInvoice_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, unPublishOrderInvoice_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, unPublishOrderInvoice_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class unPublishOrderInvoice_resultTupleSchemeFactory implements SchemeFactory {
      public unPublishOrderInvoice_resultTupleScheme getScheme() {
        return new unPublishOrderInvoice_resultTupleScheme();
      }
    }

    private static class unPublishOrderInvoice_resultTupleScheme extends TupleScheme<unPublishOrderInvoice_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, unPublishOrderInvoice_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, unPublishOrderInvoice_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getOrderInvoice_args implements org.apache.thrift.TBase<getOrderInvoice_args, getOrderInvoice_args._Fields>, java.io.Serializable, Cloneable, Comparable<getOrderInvoice_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getOrderInvoice_args");

    private static final org.apache.thrift.protocol.TField ORDERID_FIELD_DESC = new org.apache.thrift.protocol.TField("orderid", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getOrderInvoice_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getOrderInvoice_argsTupleSchemeFactory());
    }

    public String orderid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORDERID((short)1, "orderid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORDERID
            return ORDERID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORDERID, new org.apache.thrift.meta_data.FieldMetaData("orderid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOrderInvoice_args.class, metaDataMap);
    }

    public getOrderInvoice_args() {
    }

    public getOrderInvoice_args(
      String orderid)
    {
      this();
      this.orderid = orderid;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getOrderInvoice_args(getOrderInvoice_args other) {
      if (other.isSetOrderid()) {
        this.orderid = other.orderid;
      }
    }

    public getOrderInvoice_args deepCopy() {
      return new getOrderInvoice_args(this);
    }

    @Override
    public void clear() {
      this.orderid = null;
    }

    public String getOrderid() {
      return this.orderid;
    }

    public getOrderInvoice_args setOrderid(String orderid) {
      this.orderid = orderid;
      return this;
    }

    public void unsetOrderid() {
      this.orderid = null;
    }

    /** Returns true if field orderid is set (has been assigned a value) and false otherwise */
    public boolean isSetOrderid() {
      return this.orderid != null;
    }

    public void setOrderidIsSet(boolean value) {
      if (!value) {
        this.orderid = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORDERID:
        if (value == null) {
          unsetOrderid();
        } else {
          setOrderid((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORDERID:
        return getOrderid();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORDERID:
        return isSetOrderid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getOrderInvoice_args)
        return this.equals((getOrderInvoice_args)that);
      return false;
    }

    public boolean equals(getOrderInvoice_args that) {
      if (that == null)
        return false;

      boolean this_present_orderid = true && this.isSetOrderid();
      boolean that_present_orderid = true && that.isSetOrderid();
      if (this_present_orderid || that_present_orderid) {
        if (!(this_present_orderid && that_present_orderid))
          return false;
        if (!this.orderid.equals(that.orderid))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_orderid = true && (isSetOrderid());
      list.add(present_orderid);
      if (present_orderid)
        list.add(orderid);

      return list.hashCode();
    }

    @Override
    public int compareTo(getOrderInvoice_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOrderid()).compareTo(other.isSetOrderid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOrderid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderid, other.orderid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getOrderInvoice_args(");
      boolean first = true;

      sb.append("orderid:");
      if (this.orderid == null) {
        sb.append("null");
      } else {
        sb.append(this.orderid);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getOrderInvoice_argsStandardSchemeFactory implements SchemeFactory {
      public getOrderInvoice_argsStandardScheme getScheme() {
        return new getOrderInvoice_argsStandardScheme();
      }
    }

    private static class getOrderInvoice_argsStandardScheme extends StandardScheme<getOrderInvoice_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getOrderInvoice_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORDERID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.orderid = iprot.readString();
                struct.setOrderidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getOrderInvoice_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.orderid != null) {
          oprot.writeFieldBegin(ORDERID_FIELD_DESC);
          oprot.writeString(struct.orderid);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getOrderInvoice_argsTupleSchemeFactory implements SchemeFactory {
      public getOrderInvoice_argsTupleScheme getScheme() {
        return new getOrderInvoice_argsTupleScheme();
      }
    }

    private static class getOrderInvoice_argsTupleScheme extends TupleScheme<getOrderInvoice_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getOrderInvoice_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOrderid()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetOrderid()) {
          oprot.writeString(struct.orderid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getOrderInvoice_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.orderid = iprot.readString();
          struct.setOrderidIsSet(true);
        }
      }
    }

  }

  public static class getOrderInvoice_result implements org.apache.thrift.TBase<getOrderInvoice_result, getOrderInvoice_result._Fields>, java.io.Serializable, Cloneable, Comparable<getOrderInvoice_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getOrderInvoice_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getOrderInvoice_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getOrderInvoice_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOrderInvoice_result.class, metaDataMap);
    }

    public getOrderInvoice_result() {
    }

    public getOrderInvoice_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getOrderInvoice_result(getOrderInvoice_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public getOrderInvoice_result deepCopy() {
      return new getOrderInvoice_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public getOrderInvoice_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getOrderInvoice_result)
        return this.equals((getOrderInvoice_result)that);
      return false;
    }

    public boolean equals(getOrderInvoice_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getOrderInvoice_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getOrderInvoice_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getOrderInvoice_resultStandardSchemeFactory implements SchemeFactory {
      public getOrderInvoice_resultStandardScheme getScheme() {
        return new getOrderInvoice_resultStandardScheme();
      }
    }

    private static class getOrderInvoice_resultStandardScheme extends StandardScheme<getOrderInvoice_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getOrderInvoice_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getOrderInvoice_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getOrderInvoice_resultTupleSchemeFactory implements SchemeFactory {
      public getOrderInvoice_resultTupleScheme getScheme() {
        return new getOrderInvoice_resultTupleScheme();
      }
    }

    private static class getOrderInvoice_resultTupleScheme extends TupleScheme<getOrderInvoice_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getOrderInvoice_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getOrderInvoice_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class loadApplyOrderInvoice_args implements org.apache.thrift.TBase<loadApplyOrderInvoice_args, loadApplyOrderInvoice_args._Fields>, java.io.Serializable, Cloneable, Comparable<loadApplyOrderInvoice_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("loadApplyOrderInvoice_args");

    private static final org.apache.thrift.protocol.TField PAGE_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("pageNum", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new loadApplyOrderInvoice_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new loadApplyOrderInvoice_argsTupleSchemeFactory());
    }

    public int pageNum; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PAGE_NUM((short)1, "pageNum");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PAGE_NUM
            return PAGE_NUM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PAGENUM_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PAGE_NUM, new org.apache.thrift.meta_data.FieldMetaData("pageNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(loadApplyOrderInvoice_args.class, metaDataMap);
    }

    public loadApplyOrderInvoice_args() {
    }

    public loadApplyOrderInvoice_args(
      int pageNum)
    {
      this();
      this.pageNum = pageNum;
      setPageNumIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public loadApplyOrderInvoice_args(loadApplyOrderInvoice_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.pageNum = other.pageNum;
    }

    public loadApplyOrderInvoice_args deepCopy() {
      return new loadApplyOrderInvoice_args(this);
    }

    @Override
    public void clear() {
      setPageNumIsSet(false);
      this.pageNum = 0;
    }

    public int getPageNum() {
      return this.pageNum;
    }

    public loadApplyOrderInvoice_args setPageNum(int pageNum) {
      this.pageNum = pageNum;
      setPageNumIsSet(true);
      return this;
    }

    public void unsetPageNum() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGENUM_ISSET_ID);
    }

    /** Returns true if field pageNum is set (has been assigned a value) and false otherwise */
    public boolean isSetPageNum() {
      return EncodingUtils.testBit(__isset_bitfield, __PAGENUM_ISSET_ID);
    }

    public void setPageNumIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGENUM_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PAGE_NUM:
        if (value == null) {
          unsetPageNum();
        } else {
          setPageNum((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PAGE_NUM:
        return getPageNum();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PAGE_NUM:
        return isSetPageNum();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof loadApplyOrderInvoice_args)
        return this.equals((loadApplyOrderInvoice_args)that);
      return false;
    }

    public boolean equals(loadApplyOrderInvoice_args that) {
      if (that == null)
        return false;

      boolean this_present_pageNum = true;
      boolean that_present_pageNum = true;
      if (this_present_pageNum || that_present_pageNum) {
        if (!(this_present_pageNum && that_present_pageNum))
          return false;
        if (this.pageNum != that.pageNum)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_pageNum = true;
      list.add(present_pageNum);
      if (present_pageNum)
        list.add(pageNum);

      return list.hashCode();
    }

    @Override
    public int compareTo(loadApplyOrderInvoice_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPageNum()).compareTo(other.isSetPageNum());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageNum()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageNum, other.pageNum);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("loadApplyOrderInvoice_args(");
      boolean first = true;

      sb.append("pageNum:");
      sb.append(this.pageNum);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class loadApplyOrderInvoice_argsStandardSchemeFactory implements SchemeFactory {
      public loadApplyOrderInvoice_argsStandardScheme getScheme() {
        return new loadApplyOrderInvoice_argsStandardScheme();
      }
    }

    private static class loadApplyOrderInvoice_argsStandardScheme extends StandardScheme<loadApplyOrderInvoice_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, loadApplyOrderInvoice_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PAGE_NUM
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pageNum = iprot.readI32();
                struct.setPageNumIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, loadApplyOrderInvoice_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(PAGE_NUM_FIELD_DESC);
        oprot.writeI32(struct.pageNum);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class loadApplyOrderInvoice_argsTupleSchemeFactory implements SchemeFactory {
      public loadApplyOrderInvoice_argsTupleScheme getScheme() {
        return new loadApplyOrderInvoice_argsTupleScheme();
      }
    }

    private static class loadApplyOrderInvoice_argsTupleScheme extends TupleScheme<loadApplyOrderInvoice_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, loadApplyOrderInvoice_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPageNum()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetPageNum()) {
          oprot.writeI32(struct.pageNum);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, loadApplyOrderInvoice_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.pageNum = iprot.readI32();
          struct.setPageNumIsSet(true);
        }
      }
    }

  }

  public static class loadApplyOrderInvoice_result implements org.apache.thrift.TBase<loadApplyOrderInvoice_result, loadApplyOrderInvoice_result._Fields>, java.io.Serializable, Cloneable, Comparable<loadApplyOrderInvoice_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("loadApplyOrderInvoice_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new loadApplyOrderInvoice_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new loadApplyOrderInvoice_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(loadApplyOrderInvoice_result.class, metaDataMap);
    }

    public loadApplyOrderInvoice_result() {
    }

    public loadApplyOrderInvoice_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public loadApplyOrderInvoice_result(loadApplyOrderInvoice_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public loadApplyOrderInvoice_result deepCopy() {
      return new loadApplyOrderInvoice_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public loadApplyOrderInvoice_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof loadApplyOrderInvoice_result)
        return this.equals((loadApplyOrderInvoice_result)that);
      return false;
    }

    public boolean equals(loadApplyOrderInvoice_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(loadApplyOrderInvoice_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("loadApplyOrderInvoice_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class loadApplyOrderInvoice_resultStandardSchemeFactory implements SchemeFactory {
      public loadApplyOrderInvoice_resultStandardScheme getScheme() {
        return new loadApplyOrderInvoice_resultStandardScheme();
      }
    }

    private static class loadApplyOrderInvoice_resultStandardScheme extends StandardScheme<loadApplyOrderInvoice_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, loadApplyOrderInvoice_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, loadApplyOrderInvoice_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class loadApplyOrderInvoice_resultTupleSchemeFactory implements SchemeFactory {
      public loadApplyOrderInvoice_resultTupleScheme getScheme() {
        return new loadApplyOrderInvoice_resultTupleScheme();
      }
    }

    private static class loadApplyOrderInvoice_resultTupleScheme extends TupleScheme<loadApplyOrderInvoice_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, loadApplyOrderInvoice_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, loadApplyOrderInvoice_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class loadPublishedOrderInvoice_args implements org.apache.thrift.TBase<loadPublishedOrderInvoice_args, loadPublishedOrderInvoice_args._Fields>, java.io.Serializable, Cloneable, Comparable<loadPublishedOrderInvoice_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("loadPublishedOrderInvoice_args");

    private static final org.apache.thrift.protocol.TField PAGE_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("pageNum", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new loadPublishedOrderInvoice_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new loadPublishedOrderInvoice_argsTupleSchemeFactory());
    }

    public int pageNum; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PAGE_NUM((short)1, "pageNum");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PAGE_NUM
            return PAGE_NUM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PAGENUM_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PAGE_NUM, new org.apache.thrift.meta_data.FieldMetaData("pageNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(loadPublishedOrderInvoice_args.class, metaDataMap);
    }

    public loadPublishedOrderInvoice_args() {
    }

    public loadPublishedOrderInvoice_args(
      int pageNum)
    {
      this();
      this.pageNum = pageNum;
      setPageNumIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public loadPublishedOrderInvoice_args(loadPublishedOrderInvoice_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.pageNum = other.pageNum;
    }

    public loadPublishedOrderInvoice_args deepCopy() {
      return new loadPublishedOrderInvoice_args(this);
    }

    @Override
    public void clear() {
      setPageNumIsSet(false);
      this.pageNum = 0;
    }

    public int getPageNum() {
      return this.pageNum;
    }

    public loadPublishedOrderInvoice_args setPageNum(int pageNum) {
      this.pageNum = pageNum;
      setPageNumIsSet(true);
      return this;
    }

    public void unsetPageNum() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGENUM_ISSET_ID);
    }

    /** Returns true if field pageNum is set (has been assigned a value) and false otherwise */
    public boolean isSetPageNum() {
      return EncodingUtils.testBit(__isset_bitfield, __PAGENUM_ISSET_ID);
    }

    public void setPageNumIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGENUM_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PAGE_NUM:
        if (value == null) {
          unsetPageNum();
        } else {
          setPageNum((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PAGE_NUM:
        return getPageNum();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PAGE_NUM:
        return isSetPageNum();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof loadPublishedOrderInvoice_args)
        return this.equals((loadPublishedOrderInvoice_args)that);
      return false;
    }

    public boolean equals(loadPublishedOrderInvoice_args that) {
      if (that == null)
        return false;

      boolean this_present_pageNum = true;
      boolean that_present_pageNum = true;
      if (this_present_pageNum || that_present_pageNum) {
        if (!(this_present_pageNum && that_present_pageNum))
          return false;
        if (this.pageNum != that.pageNum)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_pageNum = true;
      list.add(present_pageNum);
      if (present_pageNum)
        list.add(pageNum);

      return list.hashCode();
    }

    @Override
    public int compareTo(loadPublishedOrderInvoice_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPageNum()).compareTo(other.isSetPageNum());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageNum()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageNum, other.pageNum);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("loadPublishedOrderInvoice_args(");
      boolean first = true;

      sb.append("pageNum:");
      sb.append(this.pageNum);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class loadPublishedOrderInvoice_argsStandardSchemeFactory implements SchemeFactory {
      public loadPublishedOrderInvoice_argsStandardScheme getScheme() {
        return new loadPublishedOrderInvoice_argsStandardScheme();
      }
    }

    private static class loadPublishedOrderInvoice_argsStandardScheme extends StandardScheme<loadPublishedOrderInvoice_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, loadPublishedOrderInvoice_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PAGE_NUM
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pageNum = iprot.readI32();
                struct.setPageNumIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, loadPublishedOrderInvoice_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(PAGE_NUM_FIELD_DESC);
        oprot.writeI32(struct.pageNum);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class loadPublishedOrderInvoice_argsTupleSchemeFactory implements SchemeFactory {
      public loadPublishedOrderInvoice_argsTupleScheme getScheme() {
        return new loadPublishedOrderInvoice_argsTupleScheme();
      }
    }

    private static class loadPublishedOrderInvoice_argsTupleScheme extends TupleScheme<loadPublishedOrderInvoice_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, loadPublishedOrderInvoice_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPageNum()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetPageNum()) {
          oprot.writeI32(struct.pageNum);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, loadPublishedOrderInvoice_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.pageNum = iprot.readI32();
          struct.setPageNumIsSet(true);
        }
      }
    }

  }

  public static class loadPublishedOrderInvoice_result implements org.apache.thrift.TBase<loadPublishedOrderInvoice_result, loadPublishedOrderInvoice_result._Fields>, java.io.Serializable, Cloneable, Comparable<loadPublishedOrderInvoice_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("loadPublishedOrderInvoice_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new loadPublishedOrderInvoice_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new loadPublishedOrderInvoice_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(loadPublishedOrderInvoice_result.class, metaDataMap);
    }

    public loadPublishedOrderInvoice_result() {
    }

    public loadPublishedOrderInvoice_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public loadPublishedOrderInvoice_result(loadPublishedOrderInvoice_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public loadPublishedOrderInvoice_result deepCopy() {
      return new loadPublishedOrderInvoice_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public loadPublishedOrderInvoice_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof loadPublishedOrderInvoice_result)
        return this.equals((loadPublishedOrderInvoice_result)that);
      return false;
    }

    public boolean equals(loadPublishedOrderInvoice_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(loadPublishedOrderInvoice_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("loadPublishedOrderInvoice_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class loadPublishedOrderInvoice_resultStandardSchemeFactory implements SchemeFactory {
      public loadPublishedOrderInvoice_resultStandardScheme getScheme() {
        return new loadPublishedOrderInvoice_resultStandardScheme();
      }
    }

    private static class loadPublishedOrderInvoice_resultStandardScheme extends StandardScheme<loadPublishedOrderInvoice_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, loadPublishedOrderInvoice_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, loadPublishedOrderInvoice_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class loadPublishedOrderInvoice_resultTupleSchemeFactory implements SchemeFactory {
      public loadPublishedOrderInvoice_resultTupleScheme getScheme() {
        return new loadPublishedOrderInvoice_resultTupleScheme();
      }
    }

    private static class loadPublishedOrderInvoice_resultTupleScheme extends TupleScheme<loadPublishedOrderInvoice_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, loadPublishedOrderInvoice_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, loadPublishedOrderInvoice_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updateOrderInvoice_args implements org.apache.thrift.TBase<updateOrderInvoice_args, updateOrderInvoice_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateOrderInvoice_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateOrderInvoice_args");

    private static final org.apache.thrift.protocol.TField ORDERID_FIELD_DESC = new org.apache.thrift.protocol.TField("orderid", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField INVOICE_JSON_FIELD_DESC = new org.apache.thrift.protocol.TField("invoiceJson", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateOrderInvoice_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateOrderInvoice_argsTupleSchemeFactory());
    }

    public String orderid; // required
    public String invoiceJson; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORDERID((short)1, "orderid"),
      INVOICE_JSON((short)2, "invoiceJson");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORDERID
            return ORDERID;
          case 2: // INVOICE_JSON
            return INVOICE_JSON;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORDERID, new org.apache.thrift.meta_data.FieldMetaData("orderid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.INVOICE_JSON, new org.apache.thrift.meta_data.FieldMetaData("invoiceJson", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateOrderInvoice_args.class, metaDataMap);
    }

    public updateOrderInvoice_args() {
    }

    public updateOrderInvoice_args(
      String orderid,
      String invoiceJson)
    {
      this();
      this.orderid = orderid;
      this.invoiceJson = invoiceJson;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateOrderInvoice_args(updateOrderInvoice_args other) {
      if (other.isSetOrderid()) {
        this.orderid = other.orderid;
      }
      if (other.isSetInvoiceJson()) {
        this.invoiceJson = other.invoiceJson;
      }
    }

    public updateOrderInvoice_args deepCopy() {
      return new updateOrderInvoice_args(this);
    }

    @Override
    public void clear() {
      this.orderid = null;
      this.invoiceJson = null;
    }

    public String getOrderid() {
      return this.orderid;
    }

    public updateOrderInvoice_args setOrderid(String orderid) {
      this.orderid = orderid;
      return this;
    }

    public void unsetOrderid() {
      this.orderid = null;
    }

    /** Returns true if field orderid is set (has been assigned a value) and false otherwise */
    public boolean isSetOrderid() {
      return this.orderid != null;
    }

    public void setOrderidIsSet(boolean value) {
      if (!value) {
        this.orderid = null;
      }
    }

    public String getInvoiceJson() {
      return this.invoiceJson;
    }

    public updateOrderInvoice_args setInvoiceJson(String invoiceJson) {
      this.invoiceJson = invoiceJson;
      return this;
    }

    public void unsetInvoiceJson() {
      this.invoiceJson = null;
    }

    /** Returns true if field invoiceJson is set (has been assigned a value) and false otherwise */
    public boolean isSetInvoiceJson() {
      return this.invoiceJson != null;
    }

    public void setInvoiceJsonIsSet(boolean value) {
      if (!value) {
        this.invoiceJson = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORDERID:
        if (value == null) {
          unsetOrderid();
        } else {
          setOrderid((String)value);
        }
        break;

      case INVOICE_JSON:
        if (value == null) {
          unsetInvoiceJson();
        } else {
          setInvoiceJson((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORDERID:
        return getOrderid();

      case INVOICE_JSON:
        return getInvoiceJson();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORDERID:
        return isSetOrderid();
      case INVOICE_JSON:
        return isSetInvoiceJson();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateOrderInvoice_args)
        return this.equals((updateOrderInvoice_args)that);
      return false;
    }

    public boolean equals(updateOrderInvoice_args that) {
      if (that == null)
        return false;

      boolean this_present_orderid = true && this.isSetOrderid();
      boolean that_present_orderid = true && that.isSetOrderid();
      if (this_present_orderid || that_present_orderid) {
        if (!(this_present_orderid && that_present_orderid))
          return false;
        if (!this.orderid.equals(that.orderid))
          return false;
      }

      boolean this_present_invoiceJson = true && this.isSetInvoiceJson();
      boolean that_present_invoiceJson = true && that.isSetInvoiceJson();
      if (this_present_invoiceJson || that_present_invoiceJson) {
        if (!(this_present_invoiceJson && that_present_invoiceJson))
          return false;
        if (!this.invoiceJson.equals(that.invoiceJson))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_orderid = true && (isSetOrderid());
      list.add(present_orderid);
      if (present_orderid)
        list.add(orderid);

      boolean present_invoiceJson = true && (isSetInvoiceJson());
      list.add(present_invoiceJson);
      if (present_invoiceJson)
        list.add(invoiceJson);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateOrderInvoice_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOrderid()).compareTo(other.isSetOrderid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOrderid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderid, other.orderid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetInvoiceJson()).compareTo(other.isSetInvoiceJson());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInvoiceJson()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.invoiceJson, other.invoiceJson);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateOrderInvoice_args(");
      boolean first = true;

      sb.append("orderid:");
      if (this.orderid == null) {
        sb.append("null");
      } else {
        sb.append(this.orderid);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("invoiceJson:");
      if (this.invoiceJson == null) {
        sb.append("null");
      } else {
        sb.append(this.invoiceJson);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateOrderInvoice_argsStandardSchemeFactory implements SchemeFactory {
      public updateOrderInvoice_argsStandardScheme getScheme() {
        return new updateOrderInvoice_argsStandardScheme();
      }
    }

    private static class updateOrderInvoice_argsStandardScheme extends StandardScheme<updateOrderInvoice_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateOrderInvoice_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORDERID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.orderid = iprot.readString();
                struct.setOrderidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // INVOICE_JSON
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.invoiceJson = iprot.readString();
                struct.setInvoiceJsonIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateOrderInvoice_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.orderid != null) {
          oprot.writeFieldBegin(ORDERID_FIELD_DESC);
          oprot.writeString(struct.orderid);
          oprot.writeFieldEnd();
        }
        if (struct.invoiceJson != null) {
          oprot.writeFieldBegin(INVOICE_JSON_FIELD_DESC);
          oprot.writeString(struct.invoiceJson);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateOrderInvoice_argsTupleSchemeFactory implements SchemeFactory {
      public updateOrderInvoice_argsTupleScheme getScheme() {
        return new updateOrderInvoice_argsTupleScheme();
      }
    }

    private static class updateOrderInvoice_argsTupleScheme extends TupleScheme<updateOrderInvoice_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateOrderInvoice_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOrderid()) {
          optionals.set(0);
        }
        if (struct.isSetInvoiceJson()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetOrderid()) {
          oprot.writeString(struct.orderid);
        }
        if (struct.isSetInvoiceJson()) {
          oprot.writeString(struct.invoiceJson);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateOrderInvoice_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.orderid = iprot.readString();
          struct.setOrderidIsSet(true);
        }
        if (incoming.get(1)) {
          struct.invoiceJson = iprot.readString();
          struct.setInvoiceJsonIsSet(true);
        }
      }
    }

  }

  public static class updateOrderInvoice_result implements org.apache.thrift.TBase<updateOrderInvoice_result, updateOrderInvoice_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateOrderInvoice_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateOrderInvoice_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateOrderInvoice_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateOrderInvoice_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateOrderInvoice_result.class, metaDataMap);
    }

    public updateOrderInvoice_result() {
    }

    public updateOrderInvoice_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateOrderInvoice_result(updateOrderInvoice_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public updateOrderInvoice_result deepCopy() {
      return new updateOrderInvoice_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public updateOrderInvoice_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateOrderInvoice_result)
        return this.equals((updateOrderInvoice_result)that);
      return false;
    }

    public boolean equals(updateOrderInvoice_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateOrderInvoice_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateOrderInvoice_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateOrderInvoice_resultStandardSchemeFactory implements SchemeFactory {
      public updateOrderInvoice_resultStandardScheme getScheme() {
        return new updateOrderInvoice_resultStandardScheme();
      }
    }

    private static class updateOrderInvoice_resultStandardScheme extends StandardScheme<updateOrderInvoice_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateOrderInvoice_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateOrderInvoice_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateOrderInvoice_resultTupleSchemeFactory implements SchemeFactory {
      public updateOrderInvoice_resultTupleScheme getScheme() {
        return new updateOrderInvoice_resultTupleScheme();
      }
    }

    private static class updateOrderInvoice_resultTupleScheme extends TupleScheme<updateOrderInvoice_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateOrderInvoice_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateOrderInvoice_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getOrderMailing_args implements org.apache.thrift.TBase<getOrderMailing_args, getOrderMailing_args._Fields>, java.io.Serializable, Cloneable, Comparable<getOrderMailing_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getOrderMailing_args");

    private static final org.apache.thrift.protocol.TField ORDERID_FIELD_DESC = new org.apache.thrift.protocol.TField("orderid", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getOrderMailing_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getOrderMailing_argsTupleSchemeFactory());
    }

    public String orderid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORDERID((short)1, "orderid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORDERID
            return ORDERID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORDERID, new org.apache.thrift.meta_data.FieldMetaData("orderid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOrderMailing_args.class, metaDataMap);
    }

    public getOrderMailing_args() {
    }

    public getOrderMailing_args(
      String orderid)
    {
      this();
      this.orderid = orderid;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getOrderMailing_args(getOrderMailing_args other) {
      if (other.isSetOrderid()) {
        this.orderid = other.orderid;
      }
    }

    public getOrderMailing_args deepCopy() {
      return new getOrderMailing_args(this);
    }

    @Override
    public void clear() {
      this.orderid = null;
    }

    public String getOrderid() {
      return this.orderid;
    }

    public getOrderMailing_args setOrderid(String orderid) {
      this.orderid = orderid;
      return this;
    }

    public void unsetOrderid() {
      this.orderid = null;
    }

    /** Returns true if field orderid is set (has been assigned a value) and false otherwise */
    public boolean isSetOrderid() {
      return this.orderid != null;
    }

    public void setOrderidIsSet(boolean value) {
      if (!value) {
        this.orderid = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORDERID:
        if (value == null) {
          unsetOrderid();
        } else {
          setOrderid((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORDERID:
        return getOrderid();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORDERID:
        return isSetOrderid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getOrderMailing_args)
        return this.equals((getOrderMailing_args)that);
      return false;
    }

    public boolean equals(getOrderMailing_args that) {
      if (that == null)
        return false;

      boolean this_present_orderid = true && this.isSetOrderid();
      boolean that_present_orderid = true && that.isSetOrderid();
      if (this_present_orderid || that_present_orderid) {
        if (!(this_present_orderid && that_present_orderid))
          return false;
        if (!this.orderid.equals(that.orderid))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_orderid = true && (isSetOrderid());
      list.add(present_orderid);
      if (present_orderid)
        list.add(orderid);

      return list.hashCode();
    }

    @Override
    public int compareTo(getOrderMailing_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOrderid()).compareTo(other.isSetOrderid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOrderid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderid, other.orderid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getOrderMailing_args(");
      boolean first = true;

      sb.append("orderid:");
      if (this.orderid == null) {
        sb.append("null");
      } else {
        sb.append(this.orderid);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getOrderMailing_argsStandardSchemeFactory implements SchemeFactory {
      public getOrderMailing_argsStandardScheme getScheme() {
        return new getOrderMailing_argsStandardScheme();
      }
    }

    private static class getOrderMailing_argsStandardScheme extends StandardScheme<getOrderMailing_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getOrderMailing_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORDERID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.orderid = iprot.readString();
                struct.setOrderidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getOrderMailing_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.orderid != null) {
          oprot.writeFieldBegin(ORDERID_FIELD_DESC);
          oprot.writeString(struct.orderid);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getOrderMailing_argsTupleSchemeFactory implements SchemeFactory {
      public getOrderMailing_argsTupleScheme getScheme() {
        return new getOrderMailing_argsTupleScheme();
      }
    }

    private static class getOrderMailing_argsTupleScheme extends TupleScheme<getOrderMailing_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getOrderMailing_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOrderid()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetOrderid()) {
          oprot.writeString(struct.orderid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getOrderMailing_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.orderid = iprot.readString();
          struct.setOrderidIsSet(true);
        }
      }
    }

  }

  public static class getOrderMailing_result implements org.apache.thrift.TBase<getOrderMailing_result, getOrderMailing_result._Fields>, java.io.Serializable, Cloneable, Comparable<getOrderMailing_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getOrderMailing_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getOrderMailing_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getOrderMailing_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOrderMailing_result.class, metaDataMap);
    }

    public getOrderMailing_result() {
    }

    public getOrderMailing_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getOrderMailing_result(getOrderMailing_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public getOrderMailing_result deepCopy() {
      return new getOrderMailing_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public getOrderMailing_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getOrderMailing_result)
        return this.equals((getOrderMailing_result)that);
      return false;
    }

    public boolean equals(getOrderMailing_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getOrderMailing_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getOrderMailing_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getOrderMailing_resultStandardSchemeFactory implements SchemeFactory {
      public getOrderMailing_resultStandardScheme getScheme() {
        return new getOrderMailing_resultStandardScheme();
      }
    }

    private static class getOrderMailing_resultStandardScheme extends StandardScheme<getOrderMailing_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getOrderMailing_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getOrderMailing_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getOrderMailing_resultTupleSchemeFactory implements SchemeFactory {
      public getOrderMailing_resultTupleScheme getScheme() {
        return new getOrderMailing_resultTupleScheme();
      }
    }

    private static class getOrderMailing_resultTupleScheme extends TupleScheme<getOrderMailing_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getOrderMailing_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getOrderMailing_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class loadShopOrdersForPagelit_args implements org.apache.thrift.TBase<loadShopOrdersForPagelit_args, loadShopOrdersForPagelit_args._Fields>, java.io.Serializable, Cloneable, Comparable<loadShopOrdersForPagelit_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("loadShopOrdersForPagelit_args");

    private static final org.apache.thrift.protocol.TField SHOPID_FIELD_DESC = new org.apache.thrift.protocol.TField("shopid", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PAGE_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("pageNum", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new loadShopOrdersForPagelit_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new loadShopOrdersForPagelit_argsTupleSchemeFactory());
    }

    public String shopid; // required
    public int pageNum; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SHOPID((short)1, "shopid"),
      PAGE_NUM((short)2, "pageNum");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SHOPID
            return SHOPID;
          case 2: // PAGE_NUM
            return PAGE_NUM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PAGENUM_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SHOPID, new org.apache.thrift.meta_data.FieldMetaData("shopid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PAGE_NUM, new org.apache.thrift.meta_data.FieldMetaData("pageNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(loadShopOrdersForPagelit_args.class, metaDataMap);
    }

    public loadShopOrdersForPagelit_args() {
    }

    public loadShopOrdersForPagelit_args(
      String shopid,
      int pageNum)
    {
      this();
      this.shopid = shopid;
      this.pageNum = pageNum;
      setPageNumIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public loadShopOrdersForPagelit_args(loadShopOrdersForPagelit_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetShopid()) {
        this.shopid = other.shopid;
      }
      this.pageNum = other.pageNum;
    }

    public loadShopOrdersForPagelit_args deepCopy() {
      return new loadShopOrdersForPagelit_args(this);
    }

    @Override
    public void clear() {
      this.shopid = null;
      setPageNumIsSet(false);
      this.pageNum = 0;
    }

    public String getShopid() {
      return this.shopid;
    }

    public loadShopOrdersForPagelit_args setShopid(String shopid) {
      this.shopid = shopid;
      return this;
    }

    public void unsetShopid() {
      this.shopid = null;
    }

    /** Returns true if field shopid is set (has been assigned a value) and false otherwise */
    public boolean isSetShopid() {
      return this.shopid != null;
    }

    public void setShopidIsSet(boolean value) {
      if (!value) {
        this.shopid = null;
      }
    }

    public int getPageNum() {
      return this.pageNum;
    }

    public loadShopOrdersForPagelit_args setPageNum(int pageNum) {
      this.pageNum = pageNum;
      setPageNumIsSet(true);
      return this;
    }

    public void unsetPageNum() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGENUM_ISSET_ID);
    }

    /** Returns true if field pageNum is set (has been assigned a value) and false otherwise */
    public boolean isSetPageNum() {
      return EncodingUtils.testBit(__isset_bitfield, __PAGENUM_ISSET_ID);
    }

    public void setPageNumIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGENUM_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SHOPID:
        if (value == null) {
          unsetShopid();
        } else {
          setShopid((String)value);
        }
        break;

      case PAGE_NUM:
        if (value == null) {
          unsetPageNum();
        } else {
          setPageNum((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SHOPID:
        return getShopid();

      case PAGE_NUM:
        return getPageNum();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SHOPID:
        return isSetShopid();
      case PAGE_NUM:
        return isSetPageNum();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof loadShopOrdersForPagelit_args)
        return this.equals((loadShopOrdersForPagelit_args)that);
      return false;
    }

    public boolean equals(loadShopOrdersForPagelit_args that) {
      if (that == null)
        return false;

      boolean this_present_shopid = true && this.isSetShopid();
      boolean that_present_shopid = true && that.isSetShopid();
      if (this_present_shopid || that_present_shopid) {
        if (!(this_present_shopid && that_present_shopid))
          return false;
        if (!this.shopid.equals(that.shopid))
          return false;
      }

      boolean this_present_pageNum = true;
      boolean that_present_pageNum = true;
      if (this_present_pageNum || that_present_pageNum) {
        if (!(this_present_pageNum && that_present_pageNum))
          return false;
        if (this.pageNum != that.pageNum)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_shopid = true && (isSetShopid());
      list.add(present_shopid);
      if (present_shopid)
        list.add(shopid);

      boolean present_pageNum = true;
      list.add(present_pageNum);
      if (present_pageNum)
        list.add(pageNum);

      return list.hashCode();
    }

    @Override
    public int compareTo(loadShopOrdersForPagelit_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetShopid()).compareTo(other.isSetShopid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetShopid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shopid, other.shopid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPageNum()).compareTo(other.isSetPageNum());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageNum()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageNum, other.pageNum);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("loadShopOrdersForPagelit_args(");
      boolean first = true;

      sb.append("shopid:");
      if (this.shopid == null) {
        sb.append("null");
      } else {
        sb.append(this.shopid);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageNum:");
      sb.append(this.pageNum);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class loadShopOrdersForPagelit_argsStandardSchemeFactory implements SchemeFactory {
      public loadShopOrdersForPagelit_argsStandardScheme getScheme() {
        return new loadShopOrdersForPagelit_argsStandardScheme();
      }
    }

    private static class loadShopOrdersForPagelit_argsStandardScheme extends StandardScheme<loadShopOrdersForPagelit_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, loadShopOrdersForPagelit_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SHOPID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.shopid = iprot.readString();
                struct.setShopidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PAGE_NUM
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pageNum = iprot.readI32();
                struct.setPageNumIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, loadShopOrdersForPagelit_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.shopid != null) {
          oprot.writeFieldBegin(SHOPID_FIELD_DESC);
          oprot.writeString(struct.shopid);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PAGE_NUM_FIELD_DESC);
        oprot.writeI32(struct.pageNum);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class loadShopOrdersForPagelit_argsTupleSchemeFactory implements SchemeFactory {
      public loadShopOrdersForPagelit_argsTupleScheme getScheme() {
        return new loadShopOrdersForPagelit_argsTupleScheme();
      }
    }

    private static class loadShopOrdersForPagelit_argsTupleScheme extends TupleScheme<loadShopOrdersForPagelit_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, loadShopOrdersForPagelit_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetShopid()) {
          optionals.set(0);
        }
        if (struct.isSetPageNum()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetShopid()) {
          oprot.writeString(struct.shopid);
        }
        if (struct.isSetPageNum()) {
          oprot.writeI32(struct.pageNum);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, loadShopOrdersForPagelit_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.shopid = iprot.readString();
          struct.setShopidIsSet(true);
        }
        if (incoming.get(1)) {
          struct.pageNum = iprot.readI32();
          struct.setPageNumIsSet(true);
        }
      }
    }

  }

  public static class loadShopOrdersForPagelit_result implements org.apache.thrift.TBase<loadShopOrdersForPagelit_result, loadShopOrdersForPagelit_result._Fields>, java.io.Serializable, Cloneable, Comparable<loadShopOrdersForPagelit_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("loadShopOrdersForPagelit_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new loadShopOrdersForPagelit_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new loadShopOrdersForPagelit_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(loadShopOrdersForPagelit_result.class, metaDataMap);
    }

    public loadShopOrdersForPagelit_result() {
    }

    public loadShopOrdersForPagelit_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public loadShopOrdersForPagelit_result(loadShopOrdersForPagelit_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public loadShopOrdersForPagelit_result deepCopy() {
      return new loadShopOrdersForPagelit_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public loadShopOrdersForPagelit_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof loadShopOrdersForPagelit_result)
        return this.equals((loadShopOrdersForPagelit_result)that);
      return false;
    }

    public boolean equals(loadShopOrdersForPagelit_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(loadShopOrdersForPagelit_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("loadShopOrdersForPagelit_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class loadShopOrdersForPagelit_resultStandardSchemeFactory implements SchemeFactory {
      public loadShopOrdersForPagelit_resultStandardScheme getScheme() {
        return new loadShopOrdersForPagelit_resultStandardScheme();
      }
    }

    private static class loadShopOrdersForPagelit_resultStandardScheme extends StandardScheme<loadShopOrdersForPagelit_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, loadShopOrdersForPagelit_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, loadShopOrdersForPagelit_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class loadShopOrdersForPagelit_resultTupleSchemeFactory implements SchemeFactory {
      public loadShopOrdersForPagelit_resultTupleScheme getScheme() {
        return new loadShopOrdersForPagelit_resultTupleScheme();
      }
    }

    private static class loadShopOrdersForPagelit_resultTupleScheme extends TupleScheme<loadShopOrdersForPagelit_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, loadShopOrdersForPagelit_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, loadShopOrdersForPagelit_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getShopOrder_args implements org.apache.thrift.TBase<getShopOrder_args, getShopOrder_args._Fields>, java.io.Serializable, Cloneable, Comparable<getShopOrder_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getShopOrder_args");

    private static final org.apache.thrift.protocol.TField SHOP_ORDE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("shopOrdeId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getShopOrder_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getShopOrder_argsTupleSchemeFactory());
    }

    public String shopOrdeId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SHOP_ORDE_ID((short)1, "shopOrdeId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SHOP_ORDE_ID
            return SHOP_ORDE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SHOP_ORDE_ID, new org.apache.thrift.meta_data.FieldMetaData("shopOrdeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getShopOrder_args.class, metaDataMap);
    }

    public getShopOrder_args() {
    }

    public getShopOrder_args(
      String shopOrdeId)
    {
      this();
      this.shopOrdeId = shopOrdeId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getShopOrder_args(getShopOrder_args other) {
      if (other.isSetShopOrdeId()) {
        this.shopOrdeId = other.shopOrdeId;
      }
    }

    public getShopOrder_args deepCopy() {
      return new getShopOrder_args(this);
    }

    @Override
    public void clear() {
      this.shopOrdeId = null;
    }

    public String getShopOrdeId() {
      return this.shopOrdeId;
    }

    public getShopOrder_args setShopOrdeId(String shopOrdeId) {
      this.shopOrdeId = shopOrdeId;
      return this;
    }

    public void unsetShopOrdeId() {
      this.shopOrdeId = null;
    }

    /** Returns true if field shopOrdeId is set (has been assigned a value) and false otherwise */
    public boolean isSetShopOrdeId() {
      return this.shopOrdeId != null;
    }

    public void setShopOrdeIdIsSet(boolean value) {
      if (!value) {
        this.shopOrdeId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SHOP_ORDE_ID:
        if (value == null) {
          unsetShopOrdeId();
        } else {
          setShopOrdeId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SHOP_ORDE_ID:
        return getShopOrdeId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SHOP_ORDE_ID:
        return isSetShopOrdeId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getShopOrder_args)
        return this.equals((getShopOrder_args)that);
      return false;
    }

    public boolean equals(getShopOrder_args that) {
      if (that == null)
        return false;

      boolean this_present_shopOrdeId = true && this.isSetShopOrdeId();
      boolean that_present_shopOrdeId = true && that.isSetShopOrdeId();
      if (this_present_shopOrdeId || that_present_shopOrdeId) {
        if (!(this_present_shopOrdeId && that_present_shopOrdeId))
          return false;
        if (!this.shopOrdeId.equals(that.shopOrdeId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_shopOrdeId = true && (isSetShopOrdeId());
      list.add(present_shopOrdeId);
      if (present_shopOrdeId)
        list.add(shopOrdeId);

      return list.hashCode();
    }

    @Override
    public int compareTo(getShopOrder_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetShopOrdeId()).compareTo(other.isSetShopOrdeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetShopOrdeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shopOrdeId, other.shopOrdeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getShopOrder_args(");
      boolean first = true;

      sb.append("shopOrdeId:");
      if (this.shopOrdeId == null) {
        sb.append("null");
      } else {
        sb.append(this.shopOrdeId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getShopOrder_argsStandardSchemeFactory implements SchemeFactory {
      public getShopOrder_argsStandardScheme getScheme() {
        return new getShopOrder_argsStandardScheme();
      }
    }

    private static class getShopOrder_argsStandardScheme extends StandardScheme<getShopOrder_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getShopOrder_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SHOP_ORDE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.shopOrdeId = iprot.readString();
                struct.setShopOrdeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getShopOrder_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.shopOrdeId != null) {
          oprot.writeFieldBegin(SHOP_ORDE_ID_FIELD_DESC);
          oprot.writeString(struct.shopOrdeId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getShopOrder_argsTupleSchemeFactory implements SchemeFactory {
      public getShopOrder_argsTupleScheme getScheme() {
        return new getShopOrder_argsTupleScheme();
      }
    }

    private static class getShopOrder_argsTupleScheme extends TupleScheme<getShopOrder_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getShopOrder_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetShopOrdeId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetShopOrdeId()) {
          oprot.writeString(struct.shopOrdeId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getShopOrder_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.shopOrdeId = iprot.readString();
          struct.setShopOrdeIdIsSet(true);
        }
      }
    }

  }

  public static class getShopOrder_result implements org.apache.thrift.TBase<getShopOrder_result, getShopOrder_result._Fields>, java.io.Serializable, Cloneable, Comparable<getShopOrder_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getShopOrder_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getShopOrder_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getShopOrder_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getShopOrder_result.class, metaDataMap);
    }

    public getShopOrder_result() {
    }

    public getShopOrder_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getShopOrder_result(getShopOrder_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public getShopOrder_result deepCopy() {
      return new getShopOrder_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public getShopOrder_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getShopOrder_result)
        return this.equals((getShopOrder_result)that);
      return false;
    }

    public boolean equals(getShopOrder_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getShopOrder_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getShopOrder_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getShopOrder_resultStandardSchemeFactory implements SchemeFactory {
      public getShopOrder_resultStandardScheme getScheme() {
        return new getShopOrder_resultStandardScheme();
      }
    }

    private static class getShopOrder_resultStandardScheme extends StandardScheme<getShopOrder_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getShopOrder_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getShopOrder_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getShopOrder_resultTupleSchemeFactory implements SchemeFactory {
      public getShopOrder_resultTupleScheme getScheme() {
        return new getShopOrder_resultTupleScheme();
      }
    }

    private static class getShopOrder_resultTupleScheme extends TupleScheme<getShopOrder_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getShopOrder_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getShopOrder_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class deleteShopOrder_args implements org.apache.thrift.TBase<deleteShopOrder_args, deleteShopOrder_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteShopOrder_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteShopOrder_args");

    private static final org.apache.thrift.protocol.TField SHOP_ORDER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("shopOrderId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteShopOrder_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteShopOrder_argsTupleSchemeFactory());
    }

    public String shopOrderId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SHOP_ORDER_ID((short)1, "shopOrderId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SHOP_ORDER_ID
            return SHOP_ORDER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SHOP_ORDER_ID, new org.apache.thrift.meta_data.FieldMetaData("shopOrderId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteShopOrder_args.class, metaDataMap);
    }

    public deleteShopOrder_args() {
    }

    public deleteShopOrder_args(
      String shopOrderId)
    {
      this();
      this.shopOrderId = shopOrderId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteShopOrder_args(deleteShopOrder_args other) {
      if (other.isSetShopOrderId()) {
        this.shopOrderId = other.shopOrderId;
      }
    }

    public deleteShopOrder_args deepCopy() {
      return new deleteShopOrder_args(this);
    }

    @Override
    public void clear() {
      this.shopOrderId = null;
    }

    public String getShopOrderId() {
      return this.shopOrderId;
    }

    public deleteShopOrder_args setShopOrderId(String shopOrderId) {
      this.shopOrderId = shopOrderId;
      return this;
    }

    public void unsetShopOrderId() {
      this.shopOrderId = null;
    }

    /** Returns true if field shopOrderId is set (has been assigned a value) and false otherwise */
    public boolean isSetShopOrderId() {
      return this.shopOrderId != null;
    }

    public void setShopOrderIdIsSet(boolean value) {
      if (!value) {
        this.shopOrderId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SHOP_ORDER_ID:
        if (value == null) {
          unsetShopOrderId();
        } else {
          setShopOrderId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SHOP_ORDER_ID:
        return getShopOrderId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SHOP_ORDER_ID:
        return isSetShopOrderId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteShopOrder_args)
        return this.equals((deleteShopOrder_args)that);
      return false;
    }

    public boolean equals(deleteShopOrder_args that) {
      if (that == null)
        return false;

      boolean this_present_shopOrderId = true && this.isSetShopOrderId();
      boolean that_present_shopOrderId = true && that.isSetShopOrderId();
      if (this_present_shopOrderId || that_present_shopOrderId) {
        if (!(this_present_shopOrderId && that_present_shopOrderId))
          return false;
        if (!this.shopOrderId.equals(that.shopOrderId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_shopOrderId = true && (isSetShopOrderId());
      list.add(present_shopOrderId);
      if (present_shopOrderId)
        list.add(shopOrderId);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteShopOrder_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetShopOrderId()).compareTo(other.isSetShopOrderId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetShopOrderId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shopOrderId, other.shopOrderId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteShopOrder_args(");
      boolean first = true;

      sb.append("shopOrderId:");
      if (this.shopOrderId == null) {
        sb.append("null");
      } else {
        sb.append(this.shopOrderId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteShopOrder_argsStandardSchemeFactory implements SchemeFactory {
      public deleteShopOrder_argsStandardScheme getScheme() {
        return new deleteShopOrder_argsStandardScheme();
      }
    }

    private static class deleteShopOrder_argsStandardScheme extends StandardScheme<deleteShopOrder_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteShopOrder_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SHOP_ORDER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.shopOrderId = iprot.readString();
                struct.setShopOrderIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteShopOrder_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.shopOrderId != null) {
          oprot.writeFieldBegin(SHOP_ORDER_ID_FIELD_DESC);
          oprot.writeString(struct.shopOrderId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteShopOrder_argsTupleSchemeFactory implements SchemeFactory {
      public deleteShopOrder_argsTupleScheme getScheme() {
        return new deleteShopOrder_argsTupleScheme();
      }
    }

    private static class deleteShopOrder_argsTupleScheme extends TupleScheme<deleteShopOrder_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteShopOrder_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetShopOrderId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetShopOrderId()) {
          oprot.writeString(struct.shopOrderId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteShopOrder_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.shopOrderId = iprot.readString();
          struct.setShopOrderIdIsSet(true);
        }
      }
    }

  }

  public static class deleteShopOrder_result implements org.apache.thrift.TBase<deleteShopOrder_result, deleteShopOrder_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteShopOrder_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteShopOrder_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteShopOrder_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteShopOrder_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteShopOrder_result.class, metaDataMap);
    }

    public deleteShopOrder_result() {
    }

    public deleteShopOrder_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteShopOrder_result(deleteShopOrder_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public deleteShopOrder_result deepCopy() {
      return new deleteShopOrder_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public deleteShopOrder_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteShopOrder_result)
        return this.equals((deleteShopOrder_result)that);
      return false;
    }

    public boolean equals(deleteShopOrder_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteShopOrder_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteShopOrder_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteShopOrder_resultStandardSchemeFactory implements SchemeFactory {
      public deleteShopOrder_resultStandardScheme getScheme() {
        return new deleteShopOrder_resultStandardScheme();
      }
    }

    private static class deleteShopOrder_resultStandardScheme extends StandardScheme<deleteShopOrder_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteShopOrder_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteShopOrder_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteShopOrder_resultTupleSchemeFactory implements SchemeFactory {
      public deleteShopOrder_resultTupleScheme getScheme() {
        return new deleteShopOrder_resultTupleScheme();
      }
    }

    private static class deleteShopOrder_resultTupleScheme extends TupleScheme<deleteShopOrder_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteShopOrder_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteShopOrder_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class loadProductOrdersForPagelit_args implements org.apache.thrift.TBase<loadProductOrdersForPagelit_args, loadProductOrdersForPagelit_args._Fields>, java.io.Serializable, Cloneable, Comparable<loadProductOrdersForPagelit_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("loadProductOrdersForPagelit_args");

    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PAGE_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("pageNum", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new loadProductOrdersForPagelit_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new loadProductOrdersForPagelit_argsTupleSchemeFactory());
    }

    public String userId; // required
    public int pageNum; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_ID((short)1, "userId"),
      PAGE_NUM((short)2, "pageNum");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_ID
            return USER_ID;
          case 2: // PAGE_NUM
            return PAGE_NUM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PAGENUM_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PAGE_NUM, new org.apache.thrift.meta_data.FieldMetaData("pageNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(loadProductOrdersForPagelit_args.class, metaDataMap);
    }

    public loadProductOrdersForPagelit_args() {
    }

    public loadProductOrdersForPagelit_args(
      String userId,
      int pageNum)
    {
      this();
      this.userId = userId;
      this.pageNum = pageNum;
      setPageNumIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public loadProductOrdersForPagelit_args(loadProductOrdersForPagelit_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetUserId()) {
        this.userId = other.userId;
      }
      this.pageNum = other.pageNum;
    }

    public loadProductOrdersForPagelit_args deepCopy() {
      return new loadProductOrdersForPagelit_args(this);
    }

    @Override
    public void clear() {
      this.userId = null;
      setPageNumIsSet(false);
      this.pageNum = 0;
    }

    public String getUserId() {
      return this.userId;
    }

    public loadProductOrdersForPagelit_args setUserId(String userId) {
      this.userId = userId;
      return this;
    }

    public void unsetUserId() {
      this.userId = null;
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId() {
      return this.userId != null;
    }

    public void setUserIdIsSet(boolean value) {
      if (!value) {
        this.userId = null;
      }
    }

    public int getPageNum() {
      return this.pageNum;
    }

    public loadProductOrdersForPagelit_args setPageNum(int pageNum) {
      this.pageNum = pageNum;
      setPageNumIsSet(true);
      return this;
    }

    public void unsetPageNum() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGENUM_ISSET_ID);
    }

    /** Returns true if field pageNum is set (has been assigned a value) and false otherwise */
    public boolean isSetPageNum() {
      return EncodingUtils.testBit(__isset_bitfield, __PAGENUM_ISSET_ID);
    }

    public void setPageNumIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGENUM_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_ID:
        if (value == null) {
          unsetUserId();
        } else {
          setUserId((String)value);
        }
        break;

      case PAGE_NUM:
        if (value == null) {
          unsetPageNum();
        } else {
          setPageNum((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_ID:
        return getUserId();

      case PAGE_NUM:
        return getPageNum();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_ID:
        return isSetUserId();
      case PAGE_NUM:
        return isSetPageNum();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof loadProductOrdersForPagelit_args)
        return this.equals((loadProductOrdersForPagelit_args)that);
      return false;
    }

    public boolean equals(loadProductOrdersForPagelit_args that) {
      if (that == null)
        return false;

      boolean this_present_userId = true && this.isSetUserId();
      boolean that_present_userId = true && that.isSetUserId();
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (!this.userId.equals(that.userId))
          return false;
      }

      boolean this_present_pageNum = true;
      boolean that_present_pageNum = true;
      if (this_present_pageNum || that_present_pageNum) {
        if (!(this_present_pageNum && that_present_pageNum))
          return false;
        if (this.pageNum != that.pageNum)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_userId = true && (isSetUserId());
      list.add(present_userId);
      if (present_userId)
        list.add(userId);

      boolean present_pageNum = true;
      list.add(present_pageNum);
      if (present_pageNum)
        list.add(pageNum);

      return list.hashCode();
    }

    @Override
    public int compareTo(loadProductOrdersForPagelit_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPageNum()).compareTo(other.isSetPageNum());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageNum()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageNum, other.pageNum);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("loadProductOrdersForPagelit_args(");
      boolean first = true;

      sb.append("userId:");
      if (this.userId == null) {
        sb.append("null");
      } else {
        sb.append(this.userId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageNum:");
      sb.append(this.pageNum);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class loadProductOrdersForPagelit_argsStandardSchemeFactory implements SchemeFactory {
      public loadProductOrdersForPagelit_argsStandardScheme getScheme() {
        return new loadProductOrdersForPagelit_argsStandardScheme();
      }
    }

    private static class loadProductOrdersForPagelit_argsStandardScheme extends StandardScheme<loadProductOrdersForPagelit_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, loadProductOrdersForPagelit_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userId = iprot.readString();
                struct.setUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PAGE_NUM
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pageNum = iprot.readI32();
                struct.setPageNumIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, loadProductOrdersForPagelit_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.userId != null) {
          oprot.writeFieldBegin(USER_ID_FIELD_DESC);
          oprot.writeString(struct.userId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PAGE_NUM_FIELD_DESC);
        oprot.writeI32(struct.pageNum);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class loadProductOrdersForPagelit_argsTupleSchemeFactory implements SchemeFactory {
      public loadProductOrdersForPagelit_argsTupleScheme getScheme() {
        return new loadProductOrdersForPagelit_argsTupleScheme();
      }
    }

    private static class loadProductOrdersForPagelit_argsTupleScheme extends TupleScheme<loadProductOrdersForPagelit_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, loadProductOrdersForPagelit_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUserId()) {
          optionals.set(0);
        }
        if (struct.isSetPageNum()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetUserId()) {
          oprot.writeString(struct.userId);
        }
        if (struct.isSetPageNum()) {
          oprot.writeI32(struct.pageNum);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, loadProductOrdersForPagelit_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.userId = iprot.readString();
          struct.setUserIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.pageNum = iprot.readI32();
          struct.setPageNumIsSet(true);
        }
      }
    }

  }

  public static class loadProductOrdersForPagelit_result implements org.apache.thrift.TBase<loadProductOrdersForPagelit_result, loadProductOrdersForPagelit_result._Fields>, java.io.Serializable, Cloneable, Comparable<loadProductOrdersForPagelit_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("loadProductOrdersForPagelit_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new loadProductOrdersForPagelit_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new loadProductOrdersForPagelit_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(loadProductOrdersForPagelit_result.class, metaDataMap);
    }

    public loadProductOrdersForPagelit_result() {
    }

    public loadProductOrdersForPagelit_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public loadProductOrdersForPagelit_result(loadProductOrdersForPagelit_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public loadProductOrdersForPagelit_result deepCopy() {
      return new loadProductOrdersForPagelit_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public loadProductOrdersForPagelit_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof loadProductOrdersForPagelit_result)
        return this.equals((loadProductOrdersForPagelit_result)that);
      return false;
    }

    public boolean equals(loadProductOrdersForPagelit_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(loadProductOrdersForPagelit_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("loadProductOrdersForPagelit_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class loadProductOrdersForPagelit_resultStandardSchemeFactory implements SchemeFactory {
      public loadProductOrdersForPagelit_resultStandardScheme getScheme() {
        return new loadProductOrdersForPagelit_resultStandardScheme();
      }
    }

    private static class loadProductOrdersForPagelit_resultStandardScheme extends StandardScheme<loadProductOrdersForPagelit_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, loadProductOrdersForPagelit_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, loadProductOrdersForPagelit_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class loadProductOrdersForPagelit_resultTupleSchemeFactory implements SchemeFactory {
      public loadProductOrdersForPagelit_resultTupleScheme getScheme() {
        return new loadProductOrdersForPagelit_resultTupleScheme();
      }
    }

    private static class loadProductOrdersForPagelit_resultTupleScheme extends TupleScheme<loadProductOrdersForPagelit_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, loadProductOrdersForPagelit_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, loadProductOrdersForPagelit_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getProductOrder_args implements org.apache.thrift.TBase<getProductOrder_args, getProductOrder_args._Fields>, java.io.Serializable, Cloneable, Comparable<getProductOrder_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getProductOrder_args");

    private static final org.apache.thrift.protocol.TField PRODUCT_ORDER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("productOrderId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getProductOrder_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getProductOrder_argsTupleSchemeFactory());
    }

    public String productOrderId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PRODUCT_ORDER_ID((short)1, "productOrderId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PRODUCT_ORDER_ID
            return PRODUCT_ORDER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PRODUCT_ORDER_ID, new org.apache.thrift.meta_data.FieldMetaData("productOrderId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getProductOrder_args.class, metaDataMap);
    }

    public getProductOrder_args() {
    }

    public getProductOrder_args(
      String productOrderId)
    {
      this();
      this.productOrderId = productOrderId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getProductOrder_args(getProductOrder_args other) {
      if (other.isSetProductOrderId()) {
        this.productOrderId = other.productOrderId;
      }
    }

    public getProductOrder_args deepCopy() {
      return new getProductOrder_args(this);
    }

    @Override
    public void clear() {
      this.productOrderId = null;
    }

    public String getProductOrderId() {
      return this.productOrderId;
    }

    public getProductOrder_args setProductOrderId(String productOrderId) {
      this.productOrderId = productOrderId;
      return this;
    }

    public void unsetProductOrderId() {
      this.productOrderId = null;
    }

    /** Returns true if field productOrderId is set (has been assigned a value) and false otherwise */
    public boolean isSetProductOrderId() {
      return this.productOrderId != null;
    }

    public void setProductOrderIdIsSet(boolean value) {
      if (!value) {
        this.productOrderId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PRODUCT_ORDER_ID:
        if (value == null) {
          unsetProductOrderId();
        } else {
          setProductOrderId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PRODUCT_ORDER_ID:
        return getProductOrderId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PRODUCT_ORDER_ID:
        return isSetProductOrderId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getProductOrder_args)
        return this.equals((getProductOrder_args)that);
      return false;
    }

    public boolean equals(getProductOrder_args that) {
      if (that == null)
        return false;

      boolean this_present_productOrderId = true && this.isSetProductOrderId();
      boolean that_present_productOrderId = true && that.isSetProductOrderId();
      if (this_present_productOrderId || that_present_productOrderId) {
        if (!(this_present_productOrderId && that_present_productOrderId))
          return false;
        if (!this.productOrderId.equals(that.productOrderId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_productOrderId = true && (isSetProductOrderId());
      list.add(present_productOrderId);
      if (present_productOrderId)
        list.add(productOrderId);

      return list.hashCode();
    }

    @Override
    public int compareTo(getProductOrder_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProductOrderId()).compareTo(other.isSetProductOrderId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProductOrderId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productOrderId, other.productOrderId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getProductOrder_args(");
      boolean first = true;

      sb.append("productOrderId:");
      if (this.productOrderId == null) {
        sb.append("null");
      } else {
        sb.append(this.productOrderId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getProductOrder_argsStandardSchemeFactory implements SchemeFactory {
      public getProductOrder_argsStandardScheme getScheme() {
        return new getProductOrder_argsStandardScheme();
      }
    }

    private static class getProductOrder_argsStandardScheme extends StandardScheme<getProductOrder_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getProductOrder_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PRODUCT_ORDER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.productOrderId = iprot.readString();
                struct.setProductOrderIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getProductOrder_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.productOrderId != null) {
          oprot.writeFieldBegin(PRODUCT_ORDER_ID_FIELD_DESC);
          oprot.writeString(struct.productOrderId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getProductOrder_argsTupleSchemeFactory implements SchemeFactory {
      public getProductOrder_argsTupleScheme getScheme() {
        return new getProductOrder_argsTupleScheme();
      }
    }

    private static class getProductOrder_argsTupleScheme extends TupleScheme<getProductOrder_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getProductOrder_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetProductOrderId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetProductOrderId()) {
          oprot.writeString(struct.productOrderId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getProductOrder_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.productOrderId = iprot.readString();
          struct.setProductOrderIdIsSet(true);
        }
      }
    }

  }

  public static class getProductOrder_result implements org.apache.thrift.TBase<getProductOrder_result, getProductOrder_result._Fields>, java.io.Serializable, Cloneable, Comparable<getProductOrder_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getProductOrder_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getProductOrder_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getProductOrder_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getProductOrder_result.class, metaDataMap);
    }

    public getProductOrder_result() {
    }

    public getProductOrder_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getProductOrder_result(getProductOrder_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public getProductOrder_result deepCopy() {
      return new getProductOrder_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public getProductOrder_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getProductOrder_result)
        return this.equals((getProductOrder_result)that);
      return false;
    }

    public boolean equals(getProductOrder_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getProductOrder_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getProductOrder_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getProductOrder_resultStandardSchemeFactory implements SchemeFactory {
      public getProductOrder_resultStandardScheme getScheme() {
        return new getProductOrder_resultStandardScheme();
      }
    }

    private static class getProductOrder_resultStandardScheme extends StandardScheme<getProductOrder_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getProductOrder_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getProductOrder_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getProductOrder_resultTupleSchemeFactory implements SchemeFactory {
      public getProductOrder_resultTupleScheme getScheme() {
        return new getProductOrder_resultTupleScheme();
      }
    }

    private static class getProductOrder_resultTupleScheme extends TupleScheme<getProductOrder_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getProductOrder_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getProductOrder_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class deleteProductOrder_args implements org.apache.thrift.TBase<deleteProductOrder_args, deleteProductOrder_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteProductOrder_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteProductOrder_args");

    private static final org.apache.thrift.protocol.TField PRODUCT_ORDER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("productOrderId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteProductOrder_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteProductOrder_argsTupleSchemeFactory());
    }

    public String productOrderId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PRODUCT_ORDER_ID((short)1, "productOrderId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PRODUCT_ORDER_ID
            return PRODUCT_ORDER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PRODUCT_ORDER_ID, new org.apache.thrift.meta_data.FieldMetaData("productOrderId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteProductOrder_args.class, metaDataMap);
    }

    public deleteProductOrder_args() {
    }

    public deleteProductOrder_args(
      String productOrderId)
    {
      this();
      this.productOrderId = productOrderId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteProductOrder_args(deleteProductOrder_args other) {
      if (other.isSetProductOrderId()) {
        this.productOrderId = other.productOrderId;
      }
    }

    public deleteProductOrder_args deepCopy() {
      return new deleteProductOrder_args(this);
    }

    @Override
    public void clear() {
      this.productOrderId = null;
    }

    public String getProductOrderId() {
      return this.productOrderId;
    }

    public deleteProductOrder_args setProductOrderId(String productOrderId) {
      this.productOrderId = productOrderId;
      return this;
    }

    public void unsetProductOrderId() {
      this.productOrderId = null;
    }

    /** Returns true if field productOrderId is set (has been assigned a value) and false otherwise */
    public boolean isSetProductOrderId() {
      return this.productOrderId != null;
    }

    public void setProductOrderIdIsSet(boolean value) {
      if (!value) {
        this.productOrderId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PRODUCT_ORDER_ID:
        if (value == null) {
          unsetProductOrderId();
        } else {
          setProductOrderId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PRODUCT_ORDER_ID:
        return getProductOrderId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PRODUCT_ORDER_ID:
        return isSetProductOrderId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteProductOrder_args)
        return this.equals((deleteProductOrder_args)that);
      return false;
    }

    public boolean equals(deleteProductOrder_args that) {
      if (that == null)
        return false;

      boolean this_present_productOrderId = true && this.isSetProductOrderId();
      boolean that_present_productOrderId = true && that.isSetProductOrderId();
      if (this_present_productOrderId || that_present_productOrderId) {
        if (!(this_present_productOrderId && that_present_productOrderId))
          return false;
        if (!this.productOrderId.equals(that.productOrderId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_productOrderId = true && (isSetProductOrderId());
      list.add(present_productOrderId);
      if (present_productOrderId)
        list.add(productOrderId);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteProductOrder_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProductOrderId()).compareTo(other.isSetProductOrderId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProductOrderId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productOrderId, other.productOrderId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteProductOrder_args(");
      boolean first = true;

      sb.append("productOrderId:");
      if (this.productOrderId == null) {
        sb.append("null");
      } else {
        sb.append(this.productOrderId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteProductOrder_argsStandardSchemeFactory implements SchemeFactory {
      public deleteProductOrder_argsStandardScheme getScheme() {
        return new deleteProductOrder_argsStandardScheme();
      }
    }

    private static class deleteProductOrder_argsStandardScheme extends StandardScheme<deleteProductOrder_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteProductOrder_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PRODUCT_ORDER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.productOrderId = iprot.readString();
                struct.setProductOrderIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteProductOrder_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.productOrderId != null) {
          oprot.writeFieldBegin(PRODUCT_ORDER_ID_FIELD_DESC);
          oprot.writeString(struct.productOrderId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteProductOrder_argsTupleSchemeFactory implements SchemeFactory {
      public deleteProductOrder_argsTupleScheme getScheme() {
        return new deleteProductOrder_argsTupleScheme();
      }
    }

    private static class deleteProductOrder_argsTupleScheme extends TupleScheme<deleteProductOrder_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteProductOrder_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetProductOrderId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetProductOrderId()) {
          oprot.writeString(struct.productOrderId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteProductOrder_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.productOrderId = iprot.readString();
          struct.setProductOrderIdIsSet(true);
        }
      }
    }

  }

  public static class deleteProductOrder_result implements org.apache.thrift.TBase<deleteProductOrder_result, deleteProductOrder_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteProductOrder_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteProductOrder_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteProductOrder_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteProductOrder_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteProductOrder_result.class, metaDataMap);
    }

    public deleteProductOrder_result() {
    }

    public deleteProductOrder_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteProductOrder_result(deleteProductOrder_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public deleteProductOrder_result deepCopy() {
      return new deleteProductOrder_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public deleteProductOrder_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteProductOrder_result)
        return this.equals((deleteProductOrder_result)that);
      return false;
    }

    public boolean equals(deleteProductOrder_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteProductOrder_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteProductOrder_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteProductOrder_resultStandardSchemeFactory implements SchemeFactory {
      public deleteProductOrder_resultStandardScheme getScheme() {
        return new deleteProductOrder_resultStandardScheme();
      }
    }

    private static class deleteProductOrder_resultStandardScheme extends StandardScheme<deleteProductOrder_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteProductOrder_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteProductOrder_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteProductOrder_resultTupleSchemeFactory implements SchemeFactory {
      public deleteProductOrder_resultTupleScheme getScheme() {
        return new deleteProductOrder_resultTupleScheme();
      }
    }

    private static class deleteProductOrder_resultTupleScheme extends TupleScheme<deleteProductOrder_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteProductOrder_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteProductOrder_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class searchOrdersByOrderNum_args implements org.apache.thrift.TBase<searchOrdersByOrderNum_args, searchOrdersByOrderNum_args._Fields>, java.io.Serializable, Cloneable, Comparable<searchOrdersByOrderNum_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("searchOrdersByOrderNum_args");

    private static final org.apache.thrift.protocol.TField ORDER_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("orderNum", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PAGE_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("pageNum", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new searchOrdersByOrderNum_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new searchOrdersByOrderNum_argsTupleSchemeFactory());
    }

    public String orderNum; // required
    public int pageNum; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORDER_NUM((short)1, "orderNum"),
      PAGE_NUM((short)2, "pageNum");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORDER_NUM
            return ORDER_NUM;
          case 2: // PAGE_NUM
            return PAGE_NUM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PAGENUM_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORDER_NUM, new org.apache.thrift.meta_data.FieldMetaData("orderNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PAGE_NUM, new org.apache.thrift.meta_data.FieldMetaData("pageNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(searchOrdersByOrderNum_args.class, metaDataMap);
    }

    public searchOrdersByOrderNum_args() {
    }

    public searchOrdersByOrderNum_args(
      String orderNum,
      int pageNum)
    {
      this();
      this.orderNum = orderNum;
      this.pageNum = pageNum;
      setPageNumIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public searchOrdersByOrderNum_args(searchOrdersByOrderNum_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetOrderNum()) {
        this.orderNum = other.orderNum;
      }
      this.pageNum = other.pageNum;
    }

    public searchOrdersByOrderNum_args deepCopy() {
      return new searchOrdersByOrderNum_args(this);
    }

    @Override
    public void clear() {
      this.orderNum = null;
      setPageNumIsSet(false);
      this.pageNum = 0;
    }

    public String getOrderNum() {
      return this.orderNum;
    }

    public searchOrdersByOrderNum_args setOrderNum(String orderNum) {
      this.orderNum = orderNum;
      return this;
    }

    public void unsetOrderNum() {
      this.orderNum = null;
    }

    /** Returns true if field orderNum is set (has been assigned a value) and false otherwise */
    public boolean isSetOrderNum() {
      return this.orderNum != null;
    }

    public void setOrderNumIsSet(boolean value) {
      if (!value) {
        this.orderNum = null;
      }
    }

    public int getPageNum() {
      return this.pageNum;
    }

    public searchOrdersByOrderNum_args setPageNum(int pageNum) {
      this.pageNum = pageNum;
      setPageNumIsSet(true);
      return this;
    }

    public void unsetPageNum() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGENUM_ISSET_ID);
    }

    /** Returns true if field pageNum is set (has been assigned a value) and false otherwise */
    public boolean isSetPageNum() {
      return EncodingUtils.testBit(__isset_bitfield, __PAGENUM_ISSET_ID);
    }

    public void setPageNumIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGENUM_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORDER_NUM:
        if (value == null) {
          unsetOrderNum();
        } else {
          setOrderNum((String)value);
        }
        break;

      case PAGE_NUM:
        if (value == null) {
          unsetPageNum();
        } else {
          setPageNum((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORDER_NUM:
        return getOrderNum();

      case PAGE_NUM:
        return getPageNum();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORDER_NUM:
        return isSetOrderNum();
      case PAGE_NUM:
        return isSetPageNum();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof searchOrdersByOrderNum_args)
        return this.equals((searchOrdersByOrderNum_args)that);
      return false;
    }

    public boolean equals(searchOrdersByOrderNum_args that) {
      if (that == null)
        return false;

      boolean this_present_orderNum = true && this.isSetOrderNum();
      boolean that_present_orderNum = true && that.isSetOrderNum();
      if (this_present_orderNum || that_present_orderNum) {
        if (!(this_present_orderNum && that_present_orderNum))
          return false;
        if (!this.orderNum.equals(that.orderNum))
          return false;
      }

      boolean this_present_pageNum = true;
      boolean that_present_pageNum = true;
      if (this_present_pageNum || that_present_pageNum) {
        if (!(this_present_pageNum && that_present_pageNum))
          return false;
        if (this.pageNum != that.pageNum)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_orderNum = true && (isSetOrderNum());
      list.add(present_orderNum);
      if (present_orderNum)
        list.add(orderNum);

      boolean present_pageNum = true;
      list.add(present_pageNum);
      if (present_pageNum)
        list.add(pageNum);

      return list.hashCode();
    }

    @Override
    public int compareTo(searchOrdersByOrderNum_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOrderNum()).compareTo(other.isSetOrderNum());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOrderNum()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderNum, other.orderNum);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPageNum()).compareTo(other.isSetPageNum());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageNum()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageNum, other.pageNum);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("searchOrdersByOrderNum_args(");
      boolean first = true;

      sb.append("orderNum:");
      if (this.orderNum == null) {
        sb.append("null");
      } else {
        sb.append(this.orderNum);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageNum:");
      sb.append(this.pageNum);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class searchOrdersByOrderNum_argsStandardSchemeFactory implements SchemeFactory {
      public searchOrdersByOrderNum_argsStandardScheme getScheme() {
        return new searchOrdersByOrderNum_argsStandardScheme();
      }
    }

    private static class searchOrdersByOrderNum_argsStandardScheme extends StandardScheme<searchOrdersByOrderNum_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, searchOrdersByOrderNum_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORDER_NUM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.orderNum = iprot.readString();
                struct.setOrderNumIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PAGE_NUM
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pageNum = iprot.readI32();
                struct.setPageNumIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, searchOrdersByOrderNum_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.orderNum != null) {
          oprot.writeFieldBegin(ORDER_NUM_FIELD_DESC);
          oprot.writeString(struct.orderNum);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PAGE_NUM_FIELD_DESC);
        oprot.writeI32(struct.pageNum);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class searchOrdersByOrderNum_argsTupleSchemeFactory implements SchemeFactory {
      public searchOrdersByOrderNum_argsTupleScheme getScheme() {
        return new searchOrdersByOrderNum_argsTupleScheme();
      }
    }

    private static class searchOrdersByOrderNum_argsTupleScheme extends TupleScheme<searchOrdersByOrderNum_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, searchOrdersByOrderNum_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOrderNum()) {
          optionals.set(0);
        }
        if (struct.isSetPageNum()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetOrderNum()) {
          oprot.writeString(struct.orderNum);
        }
        if (struct.isSetPageNum()) {
          oprot.writeI32(struct.pageNum);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, searchOrdersByOrderNum_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.orderNum = iprot.readString();
          struct.setOrderNumIsSet(true);
        }
        if (incoming.get(1)) {
          struct.pageNum = iprot.readI32();
          struct.setPageNumIsSet(true);
        }
      }
    }

  }

  public static class searchOrdersByOrderNum_result implements org.apache.thrift.TBase<searchOrdersByOrderNum_result, searchOrdersByOrderNum_result._Fields>, java.io.Serializable, Cloneable, Comparable<searchOrdersByOrderNum_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("searchOrdersByOrderNum_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new searchOrdersByOrderNum_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new searchOrdersByOrderNum_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(searchOrdersByOrderNum_result.class, metaDataMap);
    }

    public searchOrdersByOrderNum_result() {
    }

    public searchOrdersByOrderNum_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public searchOrdersByOrderNum_result(searchOrdersByOrderNum_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public searchOrdersByOrderNum_result deepCopy() {
      return new searchOrdersByOrderNum_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public searchOrdersByOrderNum_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof searchOrdersByOrderNum_result)
        return this.equals((searchOrdersByOrderNum_result)that);
      return false;
    }

    public boolean equals(searchOrdersByOrderNum_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(searchOrdersByOrderNum_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("searchOrdersByOrderNum_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class searchOrdersByOrderNum_resultStandardSchemeFactory implements SchemeFactory {
      public searchOrdersByOrderNum_resultStandardScheme getScheme() {
        return new searchOrdersByOrderNum_resultStandardScheme();
      }
    }

    private static class searchOrdersByOrderNum_resultStandardScheme extends StandardScheme<searchOrdersByOrderNum_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, searchOrdersByOrderNum_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, searchOrdersByOrderNum_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class searchOrdersByOrderNum_resultTupleSchemeFactory implements SchemeFactory {
      public searchOrdersByOrderNum_resultTupleScheme getScheme() {
        return new searchOrdersByOrderNum_resultTupleScheme();
      }
    }

    private static class searchOrdersByOrderNum_resultTupleScheme extends TupleScheme<searchOrdersByOrderNum_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, searchOrdersByOrderNum_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, searchOrdersByOrderNum_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class loadOrderItemsByOrderId_args implements org.apache.thrift.TBase<loadOrderItemsByOrderId_args, loadOrderItemsByOrderId_args._Fields>, java.io.Serializable, Cloneable, Comparable<loadOrderItemsByOrderId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("loadOrderItemsByOrderId_args");

    private static final org.apache.thrift.protocol.TField ORDER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("orderId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new loadOrderItemsByOrderId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new loadOrderItemsByOrderId_argsTupleSchemeFactory());
    }

    public String orderId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORDER_ID((short)1, "orderId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORDER_ID
            return ORDER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORDER_ID, new org.apache.thrift.meta_data.FieldMetaData("orderId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(loadOrderItemsByOrderId_args.class, metaDataMap);
    }

    public loadOrderItemsByOrderId_args() {
    }

    public loadOrderItemsByOrderId_args(
      String orderId)
    {
      this();
      this.orderId = orderId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public loadOrderItemsByOrderId_args(loadOrderItemsByOrderId_args other) {
      if (other.isSetOrderId()) {
        this.orderId = other.orderId;
      }
    }

    public loadOrderItemsByOrderId_args deepCopy() {
      return new loadOrderItemsByOrderId_args(this);
    }

    @Override
    public void clear() {
      this.orderId = null;
    }

    public String getOrderId() {
      return this.orderId;
    }

    public loadOrderItemsByOrderId_args setOrderId(String orderId) {
      this.orderId = orderId;
      return this;
    }

    public void unsetOrderId() {
      this.orderId = null;
    }

    /** Returns true if field orderId is set (has been assigned a value) and false otherwise */
    public boolean isSetOrderId() {
      return this.orderId != null;
    }

    public void setOrderIdIsSet(boolean value) {
      if (!value) {
        this.orderId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORDER_ID:
        if (value == null) {
          unsetOrderId();
        } else {
          setOrderId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORDER_ID:
        return getOrderId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORDER_ID:
        return isSetOrderId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof loadOrderItemsByOrderId_args)
        return this.equals((loadOrderItemsByOrderId_args)that);
      return false;
    }

    public boolean equals(loadOrderItemsByOrderId_args that) {
      if (that == null)
        return false;

      boolean this_present_orderId = true && this.isSetOrderId();
      boolean that_present_orderId = true && that.isSetOrderId();
      if (this_present_orderId || that_present_orderId) {
        if (!(this_present_orderId && that_present_orderId))
          return false;
        if (!this.orderId.equals(that.orderId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_orderId = true && (isSetOrderId());
      list.add(present_orderId);
      if (present_orderId)
        list.add(orderId);

      return list.hashCode();
    }

    @Override
    public int compareTo(loadOrderItemsByOrderId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOrderId()).compareTo(other.isSetOrderId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOrderId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderId, other.orderId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("loadOrderItemsByOrderId_args(");
      boolean first = true;

      sb.append("orderId:");
      if (this.orderId == null) {
        sb.append("null");
      } else {
        sb.append(this.orderId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class loadOrderItemsByOrderId_argsStandardSchemeFactory implements SchemeFactory {
      public loadOrderItemsByOrderId_argsStandardScheme getScheme() {
        return new loadOrderItemsByOrderId_argsStandardScheme();
      }
    }

    private static class loadOrderItemsByOrderId_argsStandardScheme extends StandardScheme<loadOrderItemsByOrderId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, loadOrderItemsByOrderId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORDER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.orderId = iprot.readString();
                struct.setOrderIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, loadOrderItemsByOrderId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.orderId != null) {
          oprot.writeFieldBegin(ORDER_ID_FIELD_DESC);
          oprot.writeString(struct.orderId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class loadOrderItemsByOrderId_argsTupleSchemeFactory implements SchemeFactory {
      public loadOrderItemsByOrderId_argsTupleScheme getScheme() {
        return new loadOrderItemsByOrderId_argsTupleScheme();
      }
    }

    private static class loadOrderItemsByOrderId_argsTupleScheme extends TupleScheme<loadOrderItemsByOrderId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, loadOrderItemsByOrderId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOrderId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetOrderId()) {
          oprot.writeString(struct.orderId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, loadOrderItemsByOrderId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.orderId = iprot.readString();
          struct.setOrderIdIsSet(true);
        }
      }
    }

  }

  public static class loadOrderItemsByOrderId_result implements org.apache.thrift.TBase<loadOrderItemsByOrderId_result, loadOrderItemsByOrderId_result._Fields>, java.io.Serializable, Cloneable, Comparable<loadOrderItemsByOrderId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("loadOrderItemsByOrderId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new loadOrderItemsByOrderId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new loadOrderItemsByOrderId_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(loadOrderItemsByOrderId_result.class, metaDataMap);
    }

    public loadOrderItemsByOrderId_result() {
    }

    public loadOrderItemsByOrderId_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public loadOrderItemsByOrderId_result(loadOrderItemsByOrderId_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public loadOrderItemsByOrderId_result deepCopy() {
      return new loadOrderItemsByOrderId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public loadOrderItemsByOrderId_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof loadOrderItemsByOrderId_result)
        return this.equals((loadOrderItemsByOrderId_result)that);
      return false;
    }

    public boolean equals(loadOrderItemsByOrderId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(loadOrderItemsByOrderId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("loadOrderItemsByOrderId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class loadOrderItemsByOrderId_resultStandardSchemeFactory implements SchemeFactory {
      public loadOrderItemsByOrderId_resultStandardScheme getScheme() {
        return new loadOrderItemsByOrderId_resultStandardScheme();
      }
    }

    private static class loadOrderItemsByOrderId_resultStandardScheme extends StandardScheme<loadOrderItemsByOrderId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, loadOrderItemsByOrderId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, loadOrderItemsByOrderId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class loadOrderItemsByOrderId_resultTupleSchemeFactory implements SchemeFactory {
      public loadOrderItemsByOrderId_resultTupleScheme getScheme() {
        return new loadOrderItemsByOrderId_resultTupleScheme();
      }
    }

    private static class loadOrderItemsByOrderId_resultTupleScheme extends TupleScheme<loadOrderItemsByOrderId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, loadOrderItemsByOrderId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, loadOrderItemsByOrderId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class loadOrderItemsByOrderIdForPageLit_args implements org.apache.thrift.TBase<loadOrderItemsByOrderIdForPageLit_args, loadOrderItemsByOrderIdForPageLit_args._Fields>, java.io.Serializable, Cloneable, Comparable<loadOrderItemsByOrderIdForPageLit_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("loadOrderItemsByOrderIdForPageLit_args");

    private static final org.apache.thrift.protocol.TField ORDER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("orderId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PAGE_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("pageNum", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new loadOrderItemsByOrderIdForPageLit_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new loadOrderItemsByOrderIdForPageLit_argsTupleSchemeFactory());
    }

    public String orderId; // required
    public int pageNum; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORDER_ID((short)1, "orderId"),
      PAGE_NUM((short)2, "pageNum");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORDER_ID
            return ORDER_ID;
          case 2: // PAGE_NUM
            return PAGE_NUM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PAGENUM_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORDER_ID, new org.apache.thrift.meta_data.FieldMetaData("orderId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PAGE_NUM, new org.apache.thrift.meta_data.FieldMetaData("pageNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(loadOrderItemsByOrderIdForPageLit_args.class, metaDataMap);
    }

    public loadOrderItemsByOrderIdForPageLit_args() {
    }

    public loadOrderItemsByOrderIdForPageLit_args(
      String orderId,
      int pageNum)
    {
      this();
      this.orderId = orderId;
      this.pageNum = pageNum;
      setPageNumIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public loadOrderItemsByOrderIdForPageLit_args(loadOrderItemsByOrderIdForPageLit_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetOrderId()) {
        this.orderId = other.orderId;
      }
      this.pageNum = other.pageNum;
    }

    public loadOrderItemsByOrderIdForPageLit_args deepCopy() {
      return new loadOrderItemsByOrderIdForPageLit_args(this);
    }

    @Override
    public void clear() {
      this.orderId = null;
      setPageNumIsSet(false);
      this.pageNum = 0;
    }

    public String getOrderId() {
      return this.orderId;
    }

    public loadOrderItemsByOrderIdForPageLit_args setOrderId(String orderId) {
      this.orderId = orderId;
      return this;
    }

    public void unsetOrderId() {
      this.orderId = null;
    }

    /** Returns true if field orderId is set (has been assigned a value) and false otherwise */
    public boolean isSetOrderId() {
      return this.orderId != null;
    }

    public void setOrderIdIsSet(boolean value) {
      if (!value) {
        this.orderId = null;
      }
    }

    public int getPageNum() {
      return this.pageNum;
    }

    public loadOrderItemsByOrderIdForPageLit_args setPageNum(int pageNum) {
      this.pageNum = pageNum;
      setPageNumIsSet(true);
      return this;
    }

    public void unsetPageNum() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGENUM_ISSET_ID);
    }

    /** Returns true if field pageNum is set (has been assigned a value) and false otherwise */
    public boolean isSetPageNum() {
      return EncodingUtils.testBit(__isset_bitfield, __PAGENUM_ISSET_ID);
    }

    public void setPageNumIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGENUM_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORDER_ID:
        if (value == null) {
          unsetOrderId();
        } else {
          setOrderId((String)value);
        }
        break;

      case PAGE_NUM:
        if (value == null) {
          unsetPageNum();
        } else {
          setPageNum((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORDER_ID:
        return getOrderId();

      case PAGE_NUM:
        return getPageNum();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORDER_ID:
        return isSetOrderId();
      case PAGE_NUM:
        return isSetPageNum();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof loadOrderItemsByOrderIdForPageLit_args)
        return this.equals((loadOrderItemsByOrderIdForPageLit_args)that);
      return false;
    }

    public boolean equals(loadOrderItemsByOrderIdForPageLit_args that) {
      if (that == null)
        return false;

      boolean this_present_orderId = true && this.isSetOrderId();
      boolean that_present_orderId = true && that.isSetOrderId();
      if (this_present_orderId || that_present_orderId) {
        if (!(this_present_orderId && that_present_orderId))
          return false;
        if (!this.orderId.equals(that.orderId))
          return false;
      }

      boolean this_present_pageNum = true;
      boolean that_present_pageNum = true;
      if (this_present_pageNum || that_present_pageNum) {
        if (!(this_present_pageNum && that_present_pageNum))
          return false;
        if (this.pageNum != that.pageNum)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_orderId = true && (isSetOrderId());
      list.add(present_orderId);
      if (present_orderId)
        list.add(orderId);

      boolean present_pageNum = true;
      list.add(present_pageNum);
      if (present_pageNum)
        list.add(pageNum);

      return list.hashCode();
    }

    @Override
    public int compareTo(loadOrderItemsByOrderIdForPageLit_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOrderId()).compareTo(other.isSetOrderId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOrderId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderId, other.orderId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPageNum()).compareTo(other.isSetPageNum());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageNum()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageNum, other.pageNum);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("loadOrderItemsByOrderIdForPageLit_args(");
      boolean first = true;

      sb.append("orderId:");
      if (this.orderId == null) {
        sb.append("null");
      } else {
        sb.append(this.orderId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageNum:");
      sb.append(this.pageNum);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class loadOrderItemsByOrderIdForPageLit_argsStandardSchemeFactory implements SchemeFactory {
      public loadOrderItemsByOrderIdForPageLit_argsStandardScheme getScheme() {
        return new loadOrderItemsByOrderIdForPageLit_argsStandardScheme();
      }
    }

    private static class loadOrderItemsByOrderIdForPageLit_argsStandardScheme extends StandardScheme<loadOrderItemsByOrderIdForPageLit_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, loadOrderItemsByOrderIdForPageLit_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORDER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.orderId = iprot.readString();
                struct.setOrderIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PAGE_NUM
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pageNum = iprot.readI32();
                struct.setPageNumIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, loadOrderItemsByOrderIdForPageLit_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.orderId != null) {
          oprot.writeFieldBegin(ORDER_ID_FIELD_DESC);
          oprot.writeString(struct.orderId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PAGE_NUM_FIELD_DESC);
        oprot.writeI32(struct.pageNum);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class loadOrderItemsByOrderIdForPageLit_argsTupleSchemeFactory implements SchemeFactory {
      public loadOrderItemsByOrderIdForPageLit_argsTupleScheme getScheme() {
        return new loadOrderItemsByOrderIdForPageLit_argsTupleScheme();
      }
    }

    private static class loadOrderItemsByOrderIdForPageLit_argsTupleScheme extends TupleScheme<loadOrderItemsByOrderIdForPageLit_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, loadOrderItemsByOrderIdForPageLit_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOrderId()) {
          optionals.set(0);
        }
        if (struct.isSetPageNum()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetOrderId()) {
          oprot.writeString(struct.orderId);
        }
        if (struct.isSetPageNum()) {
          oprot.writeI32(struct.pageNum);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, loadOrderItemsByOrderIdForPageLit_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.orderId = iprot.readString();
          struct.setOrderIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.pageNum = iprot.readI32();
          struct.setPageNumIsSet(true);
        }
      }
    }

  }

  public static class loadOrderItemsByOrderIdForPageLit_result implements org.apache.thrift.TBase<loadOrderItemsByOrderIdForPageLit_result, loadOrderItemsByOrderIdForPageLit_result._Fields>, java.io.Serializable, Cloneable, Comparable<loadOrderItemsByOrderIdForPageLit_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("loadOrderItemsByOrderIdForPageLit_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new loadOrderItemsByOrderIdForPageLit_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new loadOrderItemsByOrderIdForPageLit_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(loadOrderItemsByOrderIdForPageLit_result.class, metaDataMap);
    }

    public loadOrderItemsByOrderIdForPageLit_result() {
    }

    public loadOrderItemsByOrderIdForPageLit_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public loadOrderItemsByOrderIdForPageLit_result(loadOrderItemsByOrderIdForPageLit_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public loadOrderItemsByOrderIdForPageLit_result deepCopy() {
      return new loadOrderItemsByOrderIdForPageLit_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public loadOrderItemsByOrderIdForPageLit_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof loadOrderItemsByOrderIdForPageLit_result)
        return this.equals((loadOrderItemsByOrderIdForPageLit_result)that);
      return false;
    }

    public boolean equals(loadOrderItemsByOrderIdForPageLit_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(loadOrderItemsByOrderIdForPageLit_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("loadOrderItemsByOrderIdForPageLit_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class loadOrderItemsByOrderIdForPageLit_resultStandardSchemeFactory implements SchemeFactory {
      public loadOrderItemsByOrderIdForPageLit_resultStandardScheme getScheme() {
        return new loadOrderItemsByOrderIdForPageLit_resultStandardScheme();
      }
    }

    private static class loadOrderItemsByOrderIdForPageLit_resultStandardScheme extends StandardScheme<loadOrderItemsByOrderIdForPageLit_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, loadOrderItemsByOrderIdForPageLit_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, loadOrderItemsByOrderIdForPageLit_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class loadOrderItemsByOrderIdForPageLit_resultTupleSchemeFactory implements SchemeFactory {
      public loadOrderItemsByOrderIdForPageLit_resultTupleScheme getScheme() {
        return new loadOrderItemsByOrderIdForPageLit_resultTupleScheme();
      }
    }

    private static class loadOrderItemsByOrderIdForPageLit_resultTupleScheme extends TupleScheme<loadOrderItemsByOrderIdForPageLit_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, loadOrderItemsByOrderIdForPageLit_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, loadOrderItemsByOrderIdForPageLit_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
