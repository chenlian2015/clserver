/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cnd.greencube.server.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-03-25")
public class HealthyMemberService {

  /**
   * 健康会会员服务类
   * @author 胡晓光
   */
  public interface Iface {

    /**
     * 依据id得到健康会明细
     * @param healthyId -- 健康会会员id
     * 
     * @param healthyId
     */
    public String getHealthyById(String healthyId) throws org.apache.thrift.TException;

    /**
     * 提交申请(更新健康会信息)
     * @param applyJson -- 健康会会员信息申请json
     * 
     * @param userJson
     * @param memberJson
     * @param detailJson
     */
    public String submitApply(String userJson, String memberJson, String detailJson) throws org.apache.thrift.TException;

    /**
     * 修改健康会会员信息
     * @param applyJson -- 健康会会员信息json
     * 
     * @param userJson
     * @param memberJson
     * @param detailJson
     */
    public String updateHealthy(String userJson, String memberJson, String detailJson) throws org.apache.thrift.TException;

    /**
     * 审核通过健康会会员申请
     * @param healthyUserId -- 被审核的健康会会员id
     * @param auditUserId -- 审核者id
     * @param auditStatus -- 审核状态，1-审核通过， 0-审核不通过
     * 
     * @param healthyUserId
     * @param auditUserId
     * @param auditStatus
     */
    public String auditHealthyMemberApply(String healthyUserId, String auditUserId, int auditStatus) throws org.apache.thrift.TException;

    /**
     * 审核驳回健康会会员申请
     * @param healthyUserId -- 被审核的健康会会员id
     * @param auditUserId -- 审核者id
     * @param auditStatus -- 审核状态，1-审核通过， 0-审核不通过
     * 
     * @param healthyUserId
     * @param auditUserId
     * @param auditStatus
     */
    public String rejectHealthyMemberApply(String healthyUserId, String auditUserId, int auditStatus) throws org.apache.thrift.TException;

    /**
     * 返回申请的健康会会员数组
     * @param pageNum -- 页数
     * 
     * @param pageNum
     */
    public String loadAppliedHealthyMembersForPagelit(int pageNum) throws org.apache.thrift.TException;

    /**
     * 返回已审核过的健康会会员数组
     * @param pageNum -- 页数
     * 
     * @param pageNum
     */
    public String loadApprovedHealthyMembersForPagelit(int pageNum) throws org.apache.thrift.TException;

    /**
     * 向健康会会员发送站内信息
     * @param healthyUserId -- 健康会会员id
     * @param title -- 发送的信息的title
     * @param content -- 发送的内容
     * 
     * @param healthyUserId
     * @param title
     * @param content
     */
    public String sendInnerLetter(String healthyUserId, String title, String content) throws org.apache.thrift.TException;

    /**
     * 得到健康会成员详情
     * @param healthyId 健康会id
     * 
     * @param healthyId
     */
    public String getHealthyDetail(String healthyId) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void getHealthyById(String healthyId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void submitApply(String userJson, String memberJson, String detailJson, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateHealthy(String userJson, String memberJson, String detailJson, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void auditHealthyMemberApply(String healthyUserId, String auditUserId, int auditStatus, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void rejectHealthyMemberApply(String healthyUserId, String auditUserId, int auditStatus, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void loadAppliedHealthyMembersForPagelit(int pageNum, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void loadApprovedHealthyMembersForPagelit(int pageNum, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void sendInnerLetter(String healthyUserId, String title, String content, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getHealthyDetail(String healthyId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public String getHealthyById(String healthyId) throws org.apache.thrift.TException
    {
      send_getHealthyById(healthyId);
      return recv_getHealthyById();
    }

    public void send_getHealthyById(String healthyId) throws org.apache.thrift.TException
    {
      getHealthyById_args args = new getHealthyById_args();
      args.setHealthyId(healthyId);
      sendBase("getHealthyById", args);
    }

    public String recv_getHealthyById() throws org.apache.thrift.TException
    {
      getHealthyById_result result = new getHealthyById_result();
      receiveBase(result, "getHealthyById");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getHealthyById failed: unknown result");
    }

    public String submitApply(String userJson, String memberJson, String detailJson) throws org.apache.thrift.TException
    {
      send_submitApply(userJson, memberJson, detailJson);
      return recv_submitApply();
    }

    public void send_submitApply(String userJson, String memberJson, String detailJson) throws org.apache.thrift.TException
    {
      submitApply_args args = new submitApply_args();
      args.setUserJson(userJson);
      args.setMemberJson(memberJson);
      args.setDetailJson(detailJson);
      sendBase("submitApply", args);
    }

    public String recv_submitApply() throws org.apache.thrift.TException
    {
      submitApply_result result = new submitApply_result();
      receiveBase(result, "submitApply");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "submitApply failed: unknown result");
    }

    public String updateHealthy(String userJson, String memberJson, String detailJson) throws org.apache.thrift.TException
    {
      send_updateHealthy(userJson, memberJson, detailJson);
      return recv_updateHealthy();
    }

    public void send_updateHealthy(String userJson, String memberJson, String detailJson) throws org.apache.thrift.TException
    {
      updateHealthy_args args = new updateHealthy_args();
      args.setUserJson(userJson);
      args.setMemberJson(memberJson);
      args.setDetailJson(detailJson);
      sendBase("updateHealthy", args);
    }

    public String recv_updateHealthy() throws org.apache.thrift.TException
    {
      updateHealthy_result result = new updateHealthy_result();
      receiveBase(result, "updateHealthy");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateHealthy failed: unknown result");
    }

    public String auditHealthyMemberApply(String healthyUserId, String auditUserId, int auditStatus) throws org.apache.thrift.TException
    {
      send_auditHealthyMemberApply(healthyUserId, auditUserId, auditStatus);
      return recv_auditHealthyMemberApply();
    }

    public void send_auditHealthyMemberApply(String healthyUserId, String auditUserId, int auditStatus) throws org.apache.thrift.TException
    {
      auditHealthyMemberApply_args args = new auditHealthyMemberApply_args();
      args.setHealthyUserId(healthyUserId);
      args.setAuditUserId(auditUserId);
      args.setAuditStatus(auditStatus);
      sendBase("auditHealthyMemberApply", args);
    }

    public String recv_auditHealthyMemberApply() throws org.apache.thrift.TException
    {
      auditHealthyMemberApply_result result = new auditHealthyMemberApply_result();
      receiveBase(result, "auditHealthyMemberApply");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "auditHealthyMemberApply failed: unknown result");
    }

    public String rejectHealthyMemberApply(String healthyUserId, String auditUserId, int auditStatus) throws org.apache.thrift.TException
    {
      send_rejectHealthyMemberApply(healthyUserId, auditUserId, auditStatus);
      return recv_rejectHealthyMemberApply();
    }

    public void send_rejectHealthyMemberApply(String healthyUserId, String auditUserId, int auditStatus) throws org.apache.thrift.TException
    {
      rejectHealthyMemberApply_args args = new rejectHealthyMemberApply_args();
      args.setHealthyUserId(healthyUserId);
      args.setAuditUserId(auditUserId);
      args.setAuditStatus(auditStatus);
      sendBase("rejectHealthyMemberApply", args);
    }

    public String recv_rejectHealthyMemberApply() throws org.apache.thrift.TException
    {
      rejectHealthyMemberApply_result result = new rejectHealthyMemberApply_result();
      receiveBase(result, "rejectHealthyMemberApply");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "rejectHealthyMemberApply failed: unknown result");
    }

    public String loadAppliedHealthyMembersForPagelit(int pageNum) throws org.apache.thrift.TException
    {
      send_loadAppliedHealthyMembersForPagelit(pageNum);
      return recv_loadAppliedHealthyMembersForPagelit();
    }

    public void send_loadAppliedHealthyMembersForPagelit(int pageNum) throws org.apache.thrift.TException
    {
      loadAppliedHealthyMembersForPagelit_args args = new loadAppliedHealthyMembersForPagelit_args();
      args.setPageNum(pageNum);
      sendBase("loadAppliedHealthyMembersForPagelit", args);
    }

    public String recv_loadAppliedHealthyMembersForPagelit() throws org.apache.thrift.TException
    {
      loadAppliedHealthyMembersForPagelit_result result = new loadAppliedHealthyMembersForPagelit_result();
      receiveBase(result, "loadAppliedHealthyMembersForPagelit");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "loadAppliedHealthyMembersForPagelit failed: unknown result");
    }

    public String loadApprovedHealthyMembersForPagelit(int pageNum) throws org.apache.thrift.TException
    {
      send_loadApprovedHealthyMembersForPagelit(pageNum);
      return recv_loadApprovedHealthyMembersForPagelit();
    }

    public void send_loadApprovedHealthyMembersForPagelit(int pageNum) throws org.apache.thrift.TException
    {
      loadApprovedHealthyMembersForPagelit_args args = new loadApprovedHealthyMembersForPagelit_args();
      args.setPageNum(pageNum);
      sendBase("loadApprovedHealthyMembersForPagelit", args);
    }

    public String recv_loadApprovedHealthyMembersForPagelit() throws org.apache.thrift.TException
    {
      loadApprovedHealthyMembersForPagelit_result result = new loadApprovedHealthyMembersForPagelit_result();
      receiveBase(result, "loadApprovedHealthyMembersForPagelit");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "loadApprovedHealthyMembersForPagelit failed: unknown result");
    }

    public String sendInnerLetter(String healthyUserId, String title, String content) throws org.apache.thrift.TException
    {
      send_sendInnerLetter(healthyUserId, title, content);
      return recv_sendInnerLetter();
    }

    public void send_sendInnerLetter(String healthyUserId, String title, String content) throws org.apache.thrift.TException
    {
      sendInnerLetter_args args = new sendInnerLetter_args();
      args.setHealthyUserId(healthyUserId);
      args.setTitle(title);
      args.setContent(content);
      sendBase("sendInnerLetter", args);
    }

    public String recv_sendInnerLetter() throws org.apache.thrift.TException
    {
      sendInnerLetter_result result = new sendInnerLetter_result();
      receiveBase(result, "sendInnerLetter");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "sendInnerLetter failed: unknown result");
    }

    public String getHealthyDetail(String healthyId) throws org.apache.thrift.TException
    {
      send_getHealthyDetail(healthyId);
      return recv_getHealthyDetail();
    }

    public void send_getHealthyDetail(String healthyId) throws org.apache.thrift.TException
    {
      getHealthyDetail_args args = new getHealthyDetail_args();
      args.setHealthyId(healthyId);
      sendBase("getHealthyDetail", args);
    }

    public String recv_getHealthyDetail() throws org.apache.thrift.TException
    {
      getHealthyDetail_result result = new getHealthyDetail_result();
      receiveBase(result, "getHealthyDetail");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getHealthyDetail failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getHealthyById(String healthyId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getHealthyById_call method_call = new getHealthyById_call(healthyId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getHealthyById_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String healthyId;
      public getHealthyById_call(String healthyId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.healthyId = healthyId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getHealthyById", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getHealthyById_args args = new getHealthyById_args();
        args.setHealthyId(healthyId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getHealthyById();
      }
    }

    public void submitApply(String userJson, String memberJson, String detailJson, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      submitApply_call method_call = new submitApply_call(userJson, memberJson, detailJson, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class submitApply_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String userJson;
      private String memberJson;
      private String detailJson;
      public submitApply_call(String userJson, String memberJson, String detailJson, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userJson = userJson;
        this.memberJson = memberJson;
        this.detailJson = detailJson;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("submitApply", org.apache.thrift.protocol.TMessageType.CALL, 0));
        submitApply_args args = new submitApply_args();
        args.setUserJson(userJson);
        args.setMemberJson(memberJson);
        args.setDetailJson(detailJson);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_submitApply();
      }
    }

    public void updateHealthy(String userJson, String memberJson, String detailJson, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateHealthy_call method_call = new updateHealthy_call(userJson, memberJson, detailJson, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateHealthy_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String userJson;
      private String memberJson;
      private String detailJson;
      public updateHealthy_call(String userJson, String memberJson, String detailJson, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userJson = userJson;
        this.memberJson = memberJson;
        this.detailJson = detailJson;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateHealthy", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateHealthy_args args = new updateHealthy_args();
        args.setUserJson(userJson);
        args.setMemberJson(memberJson);
        args.setDetailJson(detailJson);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateHealthy();
      }
    }

    public void auditHealthyMemberApply(String healthyUserId, String auditUserId, int auditStatus, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      auditHealthyMemberApply_call method_call = new auditHealthyMemberApply_call(healthyUserId, auditUserId, auditStatus, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class auditHealthyMemberApply_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String healthyUserId;
      private String auditUserId;
      private int auditStatus;
      public auditHealthyMemberApply_call(String healthyUserId, String auditUserId, int auditStatus, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.healthyUserId = healthyUserId;
        this.auditUserId = auditUserId;
        this.auditStatus = auditStatus;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("auditHealthyMemberApply", org.apache.thrift.protocol.TMessageType.CALL, 0));
        auditHealthyMemberApply_args args = new auditHealthyMemberApply_args();
        args.setHealthyUserId(healthyUserId);
        args.setAuditUserId(auditUserId);
        args.setAuditStatus(auditStatus);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_auditHealthyMemberApply();
      }
    }

    public void rejectHealthyMemberApply(String healthyUserId, String auditUserId, int auditStatus, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      rejectHealthyMemberApply_call method_call = new rejectHealthyMemberApply_call(healthyUserId, auditUserId, auditStatus, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class rejectHealthyMemberApply_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String healthyUserId;
      private String auditUserId;
      private int auditStatus;
      public rejectHealthyMemberApply_call(String healthyUserId, String auditUserId, int auditStatus, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.healthyUserId = healthyUserId;
        this.auditUserId = auditUserId;
        this.auditStatus = auditStatus;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("rejectHealthyMemberApply", org.apache.thrift.protocol.TMessageType.CALL, 0));
        rejectHealthyMemberApply_args args = new rejectHealthyMemberApply_args();
        args.setHealthyUserId(healthyUserId);
        args.setAuditUserId(auditUserId);
        args.setAuditStatus(auditStatus);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_rejectHealthyMemberApply();
      }
    }

    public void loadAppliedHealthyMembersForPagelit(int pageNum, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      loadAppliedHealthyMembersForPagelit_call method_call = new loadAppliedHealthyMembersForPagelit_call(pageNum, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class loadAppliedHealthyMembersForPagelit_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int pageNum;
      public loadAppliedHealthyMembersForPagelit_call(int pageNum, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pageNum = pageNum;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("loadAppliedHealthyMembersForPagelit", org.apache.thrift.protocol.TMessageType.CALL, 0));
        loadAppliedHealthyMembersForPagelit_args args = new loadAppliedHealthyMembersForPagelit_args();
        args.setPageNum(pageNum);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_loadAppliedHealthyMembersForPagelit();
      }
    }

    public void loadApprovedHealthyMembersForPagelit(int pageNum, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      loadApprovedHealthyMembersForPagelit_call method_call = new loadApprovedHealthyMembersForPagelit_call(pageNum, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class loadApprovedHealthyMembersForPagelit_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int pageNum;
      public loadApprovedHealthyMembersForPagelit_call(int pageNum, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pageNum = pageNum;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("loadApprovedHealthyMembersForPagelit", org.apache.thrift.protocol.TMessageType.CALL, 0));
        loadApprovedHealthyMembersForPagelit_args args = new loadApprovedHealthyMembersForPagelit_args();
        args.setPageNum(pageNum);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_loadApprovedHealthyMembersForPagelit();
      }
    }

    public void sendInnerLetter(String healthyUserId, String title, String content, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      sendInnerLetter_call method_call = new sendInnerLetter_call(healthyUserId, title, content, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class sendInnerLetter_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String healthyUserId;
      private String title;
      private String content;
      public sendInnerLetter_call(String healthyUserId, String title, String content, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.healthyUserId = healthyUserId;
        this.title = title;
        this.content = content;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("sendInnerLetter", org.apache.thrift.protocol.TMessageType.CALL, 0));
        sendInnerLetter_args args = new sendInnerLetter_args();
        args.setHealthyUserId(healthyUserId);
        args.setTitle(title);
        args.setContent(content);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_sendInnerLetter();
      }
    }

    public void getHealthyDetail(String healthyId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getHealthyDetail_call method_call = new getHealthyDetail_call(healthyId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getHealthyDetail_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String healthyId;
      public getHealthyDetail_call(String healthyId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.healthyId = healthyId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getHealthyDetail", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getHealthyDetail_args args = new getHealthyDetail_args();
        args.setHealthyId(healthyId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getHealthyDetail();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getHealthyById", new getHealthyById());
      processMap.put("submitApply", new submitApply());
      processMap.put("updateHealthy", new updateHealthy());
      processMap.put("auditHealthyMemberApply", new auditHealthyMemberApply());
      processMap.put("rejectHealthyMemberApply", new rejectHealthyMemberApply());
      processMap.put("loadAppliedHealthyMembersForPagelit", new loadAppliedHealthyMembersForPagelit());
      processMap.put("loadApprovedHealthyMembersForPagelit", new loadApprovedHealthyMembersForPagelit());
      processMap.put("sendInnerLetter", new sendInnerLetter());
      processMap.put("getHealthyDetail", new getHealthyDetail());
      return processMap;
    }

    public static class getHealthyById<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getHealthyById_args> {
      public getHealthyById() {
        super("getHealthyById");
      }

      public getHealthyById_args getEmptyArgsInstance() {
        return new getHealthyById_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getHealthyById_result getResult(I iface, getHealthyById_args args) throws org.apache.thrift.TException {
        getHealthyById_result result = new getHealthyById_result();
        result.success = iface.getHealthyById(args.healthyId);
        return result;
      }
    }

    public static class submitApply<I extends Iface> extends org.apache.thrift.ProcessFunction<I, submitApply_args> {
      public submitApply() {
        super("submitApply");
      }

      public submitApply_args getEmptyArgsInstance() {
        return new submitApply_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public submitApply_result getResult(I iface, submitApply_args args) throws org.apache.thrift.TException {
        submitApply_result result = new submitApply_result();
        result.success = iface.submitApply(args.userJson, args.memberJson, args.detailJson);
        return result;
      }
    }

    public static class updateHealthy<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateHealthy_args> {
      public updateHealthy() {
        super("updateHealthy");
      }

      public updateHealthy_args getEmptyArgsInstance() {
        return new updateHealthy_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateHealthy_result getResult(I iface, updateHealthy_args args) throws org.apache.thrift.TException {
        updateHealthy_result result = new updateHealthy_result();
        result.success = iface.updateHealthy(args.userJson, args.memberJson, args.detailJson);
        return result;
      }
    }

    public static class auditHealthyMemberApply<I extends Iface> extends org.apache.thrift.ProcessFunction<I, auditHealthyMemberApply_args> {
      public auditHealthyMemberApply() {
        super("auditHealthyMemberApply");
      }

      public auditHealthyMemberApply_args getEmptyArgsInstance() {
        return new auditHealthyMemberApply_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public auditHealthyMemberApply_result getResult(I iface, auditHealthyMemberApply_args args) throws org.apache.thrift.TException {
        auditHealthyMemberApply_result result = new auditHealthyMemberApply_result();
        result.success = iface.auditHealthyMemberApply(args.healthyUserId, args.auditUserId, args.auditStatus);
        return result;
      }
    }

    public static class rejectHealthyMemberApply<I extends Iface> extends org.apache.thrift.ProcessFunction<I, rejectHealthyMemberApply_args> {
      public rejectHealthyMemberApply() {
        super("rejectHealthyMemberApply");
      }

      public rejectHealthyMemberApply_args getEmptyArgsInstance() {
        return new rejectHealthyMemberApply_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public rejectHealthyMemberApply_result getResult(I iface, rejectHealthyMemberApply_args args) throws org.apache.thrift.TException {
        rejectHealthyMemberApply_result result = new rejectHealthyMemberApply_result();
        result.success = iface.rejectHealthyMemberApply(args.healthyUserId, args.auditUserId, args.auditStatus);
        return result;
      }
    }

    public static class loadAppliedHealthyMembersForPagelit<I extends Iface> extends org.apache.thrift.ProcessFunction<I, loadAppliedHealthyMembersForPagelit_args> {
      public loadAppliedHealthyMembersForPagelit() {
        super("loadAppliedHealthyMembersForPagelit");
      }

      public loadAppliedHealthyMembersForPagelit_args getEmptyArgsInstance() {
        return new loadAppliedHealthyMembersForPagelit_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public loadAppliedHealthyMembersForPagelit_result getResult(I iface, loadAppliedHealthyMembersForPagelit_args args) throws org.apache.thrift.TException {
        loadAppliedHealthyMembersForPagelit_result result = new loadAppliedHealthyMembersForPagelit_result();
        result.success = iface.loadAppliedHealthyMembersForPagelit(args.pageNum);
        return result;
      }
    }

    public static class loadApprovedHealthyMembersForPagelit<I extends Iface> extends org.apache.thrift.ProcessFunction<I, loadApprovedHealthyMembersForPagelit_args> {
      public loadApprovedHealthyMembersForPagelit() {
        super("loadApprovedHealthyMembersForPagelit");
      }

      public loadApprovedHealthyMembersForPagelit_args getEmptyArgsInstance() {
        return new loadApprovedHealthyMembersForPagelit_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public loadApprovedHealthyMembersForPagelit_result getResult(I iface, loadApprovedHealthyMembersForPagelit_args args) throws org.apache.thrift.TException {
        loadApprovedHealthyMembersForPagelit_result result = new loadApprovedHealthyMembersForPagelit_result();
        result.success = iface.loadApprovedHealthyMembersForPagelit(args.pageNum);
        return result;
      }
    }

    public static class sendInnerLetter<I extends Iface> extends org.apache.thrift.ProcessFunction<I, sendInnerLetter_args> {
      public sendInnerLetter() {
        super("sendInnerLetter");
      }

      public sendInnerLetter_args getEmptyArgsInstance() {
        return new sendInnerLetter_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public sendInnerLetter_result getResult(I iface, sendInnerLetter_args args) throws org.apache.thrift.TException {
        sendInnerLetter_result result = new sendInnerLetter_result();
        result.success = iface.sendInnerLetter(args.healthyUserId, args.title, args.content);
        return result;
      }
    }

    public static class getHealthyDetail<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getHealthyDetail_args> {
      public getHealthyDetail() {
        super("getHealthyDetail");
      }

      public getHealthyDetail_args getEmptyArgsInstance() {
        return new getHealthyDetail_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getHealthyDetail_result getResult(I iface, getHealthyDetail_args args) throws org.apache.thrift.TException {
        getHealthyDetail_result result = new getHealthyDetail_result();
        result.success = iface.getHealthyDetail(args.healthyId);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("getHealthyById", new getHealthyById());
      processMap.put("submitApply", new submitApply());
      processMap.put("updateHealthy", new updateHealthy());
      processMap.put("auditHealthyMemberApply", new auditHealthyMemberApply());
      processMap.put("rejectHealthyMemberApply", new rejectHealthyMemberApply());
      processMap.put("loadAppliedHealthyMembersForPagelit", new loadAppliedHealthyMembersForPagelit());
      processMap.put("loadApprovedHealthyMembersForPagelit", new loadApprovedHealthyMembersForPagelit());
      processMap.put("sendInnerLetter", new sendInnerLetter());
      processMap.put("getHealthyDetail", new getHealthyDetail());
      return processMap;
    }

    public static class getHealthyById<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getHealthyById_args, String> {
      public getHealthyById() {
        super("getHealthyById");
      }

      public getHealthyById_args getEmptyArgsInstance() {
        return new getHealthyById_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            getHealthyById_result result = new getHealthyById_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getHealthyById_result result = new getHealthyById_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getHealthyById_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.getHealthyById(args.healthyId,resultHandler);
      }
    }

    public static class submitApply<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, submitApply_args, String> {
      public submitApply() {
        super("submitApply");
      }

      public submitApply_args getEmptyArgsInstance() {
        return new submitApply_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            submitApply_result result = new submitApply_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            submitApply_result result = new submitApply_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, submitApply_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.submitApply(args.userJson, args.memberJson, args.detailJson,resultHandler);
      }
    }

    public static class updateHealthy<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateHealthy_args, String> {
      public updateHealthy() {
        super("updateHealthy");
      }

      public updateHealthy_args getEmptyArgsInstance() {
        return new updateHealthy_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            updateHealthy_result result = new updateHealthy_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateHealthy_result result = new updateHealthy_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateHealthy_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.updateHealthy(args.userJson, args.memberJson, args.detailJson,resultHandler);
      }
    }

    public static class auditHealthyMemberApply<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, auditHealthyMemberApply_args, String> {
      public auditHealthyMemberApply() {
        super("auditHealthyMemberApply");
      }

      public auditHealthyMemberApply_args getEmptyArgsInstance() {
        return new auditHealthyMemberApply_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            auditHealthyMemberApply_result result = new auditHealthyMemberApply_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            auditHealthyMemberApply_result result = new auditHealthyMemberApply_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, auditHealthyMemberApply_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.auditHealthyMemberApply(args.healthyUserId, args.auditUserId, args.auditStatus,resultHandler);
      }
    }

    public static class rejectHealthyMemberApply<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, rejectHealthyMemberApply_args, String> {
      public rejectHealthyMemberApply() {
        super("rejectHealthyMemberApply");
      }

      public rejectHealthyMemberApply_args getEmptyArgsInstance() {
        return new rejectHealthyMemberApply_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            rejectHealthyMemberApply_result result = new rejectHealthyMemberApply_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            rejectHealthyMemberApply_result result = new rejectHealthyMemberApply_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, rejectHealthyMemberApply_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.rejectHealthyMemberApply(args.healthyUserId, args.auditUserId, args.auditStatus,resultHandler);
      }
    }

    public static class loadAppliedHealthyMembersForPagelit<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, loadAppliedHealthyMembersForPagelit_args, String> {
      public loadAppliedHealthyMembersForPagelit() {
        super("loadAppliedHealthyMembersForPagelit");
      }

      public loadAppliedHealthyMembersForPagelit_args getEmptyArgsInstance() {
        return new loadAppliedHealthyMembersForPagelit_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            loadAppliedHealthyMembersForPagelit_result result = new loadAppliedHealthyMembersForPagelit_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            loadAppliedHealthyMembersForPagelit_result result = new loadAppliedHealthyMembersForPagelit_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, loadAppliedHealthyMembersForPagelit_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.loadAppliedHealthyMembersForPagelit(args.pageNum,resultHandler);
      }
    }

    public static class loadApprovedHealthyMembersForPagelit<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, loadApprovedHealthyMembersForPagelit_args, String> {
      public loadApprovedHealthyMembersForPagelit() {
        super("loadApprovedHealthyMembersForPagelit");
      }

      public loadApprovedHealthyMembersForPagelit_args getEmptyArgsInstance() {
        return new loadApprovedHealthyMembersForPagelit_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            loadApprovedHealthyMembersForPagelit_result result = new loadApprovedHealthyMembersForPagelit_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            loadApprovedHealthyMembersForPagelit_result result = new loadApprovedHealthyMembersForPagelit_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, loadApprovedHealthyMembersForPagelit_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.loadApprovedHealthyMembersForPagelit(args.pageNum,resultHandler);
      }
    }

    public static class sendInnerLetter<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, sendInnerLetter_args, String> {
      public sendInnerLetter() {
        super("sendInnerLetter");
      }

      public sendInnerLetter_args getEmptyArgsInstance() {
        return new sendInnerLetter_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            sendInnerLetter_result result = new sendInnerLetter_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            sendInnerLetter_result result = new sendInnerLetter_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, sendInnerLetter_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.sendInnerLetter(args.healthyUserId, args.title, args.content,resultHandler);
      }
    }

    public static class getHealthyDetail<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getHealthyDetail_args, String> {
      public getHealthyDetail() {
        super("getHealthyDetail");
      }

      public getHealthyDetail_args getEmptyArgsInstance() {
        return new getHealthyDetail_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            getHealthyDetail_result result = new getHealthyDetail_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getHealthyDetail_result result = new getHealthyDetail_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getHealthyDetail_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.getHealthyDetail(args.healthyId,resultHandler);
      }
    }

  }

  public static class getHealthyById_args implements org.apache.thrift.TBase<getHealthyById_args, getHealthyById_args._Fields>, java.io.Serializable, Cloneable, Comparable<getHealthyById_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getHealthyById_args");

    private static final org.apache.thrift.protocol.TField HEALTHY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("healthyId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getHealthyById_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getHealthyById_argsTupleSchemeFactory());
    }

    public String healthyId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      HEALTHY_ID((short)1, "healthyId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // HEALTHY_ID
            return HEALTHY_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.HEALTHY_ID, new org.apache.thrift.meta_data.FieldMetaData("healthyId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getHealthyById_args.class, metaDataMap);
    }

    public getHealthyById_args() {
    }

    public getHealthyById_args(
      String healthyId)
    {
      this();
      this.healthyId = healthyId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getHealthyById_args(getHealthyById_args other) {
      if (other.isSetHealthyId()) {
        this.healthyId = other.healthyId;
      }
    }

    public getHealthyById_args deepCopy() {
      return new getHealthyById_args(this);
    }

    @Override
    public void clear() {
      this.healthyId = null;
    }

    public String getHealthyId() {
      return this.healthyId;
    }

    public getHealthyById_args setHealthyId(String healthyId) {
      this.healthyId = healthyId;
      return this;
    }

    public void unsetHealthyId() {
      this.healthyId = null;
    }

    /** Returns true if field healthyId is set (has been assigned a value) and false otherwise */
    public boolean isSetHealthyId() {
      return this.healthyId != null;
    }

    public void setHealthyIdIsSet(boolean value) {
      if (!value) {
        this.healthyId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case HEALTHY_ID:
        if (value == null) {
          unsetHealthyId();
        } else {
          setHealthyId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case HEALTHY_ID:
        return getHealthyId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case HEALTHY_ID:
        return isSetHealthyId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getHealthyById_args)
        return this.equals((getHealthyById_args)that);
      return false;
    }

    public boolean equals(getHealthyById_args that) {
      if (that == null)
        return false;

      boolean this_present_healthyId = true && this.isSetHealthyId();
      boolean that_present_healthyId = true && that.isSetHealthyId();
      if (this_present_healthyId || that_present_healthyId) {
        if (!(this_present_healthyId && that_present_healthyId))
          return false;
        if (!this.healthyId.equals(that.healthyId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_healthyId = true && (isSetHealthyId());
      list.add(present_healthyId);
      if (present_healthyId)
        list.add(healthyId);

      return list.hashCode();
    }

    @Override
    public int compareTo(getHealthyById_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetHealthyId()).compareTo(other.isSetHealthyId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHealthyId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.healthyId, other.healthyId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getHealthyById_args(");
      boolean first = true;

      sb.append("healthyId:");
      if (this.healthyId == null) {
        sb.append("null");
      } else {
        sb.append(this.healthyId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getHealthyById_argsStandardSchemeFactory implements SchemeFactory {
      public getHealthyById_argsStandardScheme getScheme() {
        return new getHealthyById_argsStandardScheme();
      }
    }

    private static class getHealthyById_argsStandardScheme extends StandardScheme<getHealthyById_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getHealthyById_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // HEALTHY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.healthyId = iprot.readString();
                struct.setHealthyIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getHealthyById_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.healthyId != null) {
          oprot.writeFieldBegin(HEALTHY_ID_FIELD_DESC);
          oprot.writeString(struct.healthyId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getHealthyById_argsTupleSchemeFactory implements SchemeFactory {
      public getHealthyById_argsTupleScheme getScheme() {
        return new getHealthyById_argsTupleScheme();
      }
    }

    private static class getHealthyById_argsTupleScheme extends TupleScheme<getHealthyById_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getHealthyById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetHealthyId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetHealthyId()) {
          oprot.writeString(struct.healthyId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getHealthyById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.healthyId = iprot.readString();
          struct.setHealthyIdIsSet(true);
        }
      }
    }

  }

  public static class getHealthyById_result implements org.apache.thrift.TBase<getHealthyById_result, getHealthyById_result._Fields>, java.io.Serializable, Cloneable, Comparable<getHealthyById_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getHealthyById_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getHealthyById_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getHealthyById_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getHealthyById_result.class, metaDataMap);
    }

    public getHealthyById_result() {
    }

    public getHealthyById_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getHealthyById_result(getHealthyById_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public getHealthyById_result deepCopy() {
      return new getHealthyById_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public getHealthyById_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getHealthyById_result)
        return this.equals((getHealthyById_result)that);
      return false;
    }

    public boolean equals(getHealthyById_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getHealthyById_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getHealthyById_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getHealthyById_resultStandardSchemeFactory implements SchemeFactory {
      public getHealthyById_resultStandardScheme getScheme() {
        return new getHealthyById_resultStandardScheme();
      }
    }

    private static class getHealthyById_resultStandardScheme extends StandardScheme<getHealthyById_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getHealthyById_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getHealthyById_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getHealthyById_resultTupleSchemeFactory implements SchemeFactory {
      public getHealthyById_resultTupleScheme getScheme() {
        return new getHealthyById_resultTupleScheme();
      }
    }

    private static class getHealthyById_resultTupleScheme extends TupleScheme<getHealthyById_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getHealthyById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getHealthyById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class submitApply_args implements org.apache.thrift.TBase<submitApply_args, submitApply_args._Fields>, java.io.Serializable, Cloneable, Comparable<submitApply_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("submitApply_args");

    private static final org.apache.thrift.protocol.TField USER_JSON_FIELD_DESC = new org.apache.thrift.protocol.TField("userJson", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField MEMBER_JSON_FIELD_DESC = new org.apache.thrift.protocol.TField("memberJson", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField DETAIL_JSON_FIELD_DESC = new org.apache.thrift.protocol.TField("detailJson", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new submitApply_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new submitApply_argsTupleSchemeFactory());
    }

    public String userJson; // required
    public String memberJson; // required
    public String detailJson; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_JSON((short)1, "userJson"),
      MEMBER_JSON((short)2, "memberJson"),
      DETAIL_JSON((short)3, "detailJson");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_JSON
            return USER_JSON;
          case 2: // MEMBER_JSON
            return MEMBER_JSON;
          case 3: // DETAIL_JSON
            return DETAIL_JSON;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_JSON, new org.apache.thrift.meta_data.FieldMetaData("userJson", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MEMBER_JSON, new org.apache.thrift.meta_data.FieldMetaData("memberJson", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DETAIL_JSON, new org.apache.thrift.meta_data.FieldMetaData("detailJson", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(submitApply_args.class, metaDataMap);
    }

    public submitApply_args() {
    }

    public submitApply_args(
      String userJson,
      String memberJson,
      String detailJson)
    {
      this();
      this.userJson = userJson;
      this.memberJson = memberJson;
      this.detailJson = detailJson;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public submitApply_args(submitApply_args other) {
      if (other.isSetUserJson()) {
        this.userJson = other.userJson;
      }
      if (other.isSetMemberJson()) {
        this.memberJson = other.memberJson;
      }
      if (other.isSetDetailJson()) {
        this.detailJson = other.detailJson;
      }
    }

    public submitApply_args deepCopy() {
      return new submitApply_args(this);
    }

    @Override
    public void clear() {
      this.userJson = null;
      this.memberJson = null;
      this.detailJson = null;
    }

    public String getUserJson() {
      return this.userJson;
    }

    public submitApply_args setUserJson(String userJson) {
      this.userJson = userJson;
      return this;
    }

    public void unsetUserJson() {
      this.userJson = null;
    }

    /** Returns true if field userJson is set (has been assigned a value) and false otherwise */
    public boolean isSetUserJson() {
      return this.userJson != null;
    }

    public void setUserJsonIsSet(boolean value) {
      if (!value) {
        this.userJson = null;
      }
    }

    public String getMemberJson() {
      return this.memberJson;
    }

    public submitApply_args setMemberJson(String memberJson) {
      this.memberJson = memberJson;
      return this;
    }

    public void unsetMemberJson() {
      this.memberJson = null;
    }

    /** Returns true if field memberJson is set (has been assigned a value) and false otherwise */
    public boolean isSetMemberJson() {
      return this.memberJson != null;
    }

    public void setMemberJsonIsSet(boolean value) {
      if (!value) {
        this.memberJson = null;
      }
    }

    public String getDetailJson() {
      return this.detailJson;
    }

    public submitApply_args setDetailJson(String detailJson) {
      this.detailJson = detailJson;
      return this;
    }

    public void unsetDetailJson() {
      this.detailJson = null;
    }

    /** Returns true if field detailJson is set (has been assigned a value) and false otherwise */
    public boolean isSetDetailJson() {
      return this.detailJson != null;
    }

    public void setDetailJsonIsSet(boolean value) {
      if (!value) {
        this.detailJson = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_JSON:
        if (value == null) {
          unsetUserJson();
        } else {
          setUserJson((String)value);
        }
        break;

      case MEMBER_JSON:
        if (value == null) {
          unsetMemberJson();
        } else {
          setMemberJson((String)value);
        }
        break;

      case DETAIL_JSON:
        if (value == null) {
          unsetDetailJson();
        } else {
          setDetailJson((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_JSON:
        return getUserJson();

      case MEMBER_JSON:
        return getMemberJson();

      case DETAIL_JSON:
        return getDetailJson();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_JSON:
        return isSetUserJson();
      case MEMBER_JSON:
        return isSetMemberJson();
      case DETAIL_JSON:
        return isSetDetailJson();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof submitApply_args)
        return this.equals((submitApply_args)that);
      return false;
    }

    public boolean equals(submitApply_args that) {
      if (that == null)
        return false;

      boolean this_present_userJson = true && this.isSetUserJson();
      boolean that_present_userJson = true && that.isSetUserJson();
      if (this_present_userJson || that_present_userJson) {
        if (!(this_present_userJson && that_present_userJson))
          return false;
        if (!this.userJson.equals(that.userJson))
          return false;
      }

      boolean this_present_memberJson = true && this.isSetMemberJson();
      boolean that_present_memberJson = true && that.isSetMemberJson();
      if (this_present_memberJson || that_present_memberJson) {
        if (!(this_present_memberJson && that_present_memberJson))
          return false;
        if (!this.memberJson.equals(that.memberJson))
          return false;
      }

      boolean this_present_detailJson = true && this.isSetDetailJson();
      boolean that_present_detailJson = true && that.isSetDetailJson();
      if (this_present_detailJson || that_present_detailJson) {
        if (!(this_present_detailJson && that_present_detailJson))
          return false;
        if (!this.detailJson.equals(that.detailJson))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_userJson = true && (isSetUserJson());
      list.add(present_userJson);
      if (present_userJson)
        list.add(userJson);

      boolean present_memberJson = true && (isSetMemberJson());
      list.add(present_memberJson);
      if (present_memberJson)
        list.add(memberJson);

      boolean present_detailJson = true && (isSetDetailJson());
      list.add(present_detailJson);
      if (present_detailJson)
        list.add(detailJson);

      return list.hashCode();
    }

    @Override
    public int compareTo(submitApply_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUserJson()).compareTo(other.isSetUserJson());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserJson()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userJson, other.userJson);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMemberJson()).compareTo(other.isSetMemberJson());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMemberJson()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.memberJson, other.memberJson);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDetailJson()).compareTo(other.isSetDetailJson());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDetailJson()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.detailJson, other.detailJson);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("submitApply_args(");
      boolean first = true;

      sb.append("userJson:");
      if (this.userJson == null) {
        sb.append("null");
      } else {
        sb.append(this.userJson);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("memberJson:");
      if (this.memberJson == null) {
        sb.append("null");
      } else {
        sb.append(this.memberJson);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("detailJson:");
      if (this.detailJson == null) {
        sb.append("null");
      } else {
        sb.append(this.detailJson);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class submitApply_argsStandardSchemeFactory implements SchemeFactory {
      public submitApply_argsStandardScheme getScheme() {
        return new submitApply_argsStandardScheme();
      }
    }

    private static class submitApply_argsStandardScheme extends StandardScheme<submitApply_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, submitApply_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_JSON
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userJson = iprot.readString();
                struct.setUserJsonIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // MEMBER_JSON
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.memberJson = iprot.readString();
                struct.setMemberJsonIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // DETAIL_JSON
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.detailJson = iprot.readString();
                struct.setDetailJsonIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, submitApply_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.userJson != null) {
          oprot.writeFieldBegin(USER_JSON_FIELD_DESC);
          oprot.writeString(struct.userJson);
          oprot.writeFieldEnd();
        }
        if (struct.memberJson != null) {
          oprot.writeFieldBegin(MEMBER_JSON_FIELD_DESC);
          oprot.writeString(struct.memberJson);
          oprot.writeFieldEnd();
        }
        if (struct.detailJson != null) {
          oprot.writeFieldBegin(DETAIL_JSON_FIELD_DESC);
          oprot.writeString(struct.detailJson);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class submitApply_argsTupleSchemeFactory implements SchemeFactory {
      public submitApply_argsTupleScheme getScheme() {
        return new submitApply_argsTupleScheme();
      }
    }

    private static class submitApply_argsTupleScheme extends TupleScheme<submitApply_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, submitApply_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUserJson()) {
          optionals.set(0);
        }
        if (struct.isSetMemberJson()) {
          optionals.set(1);
        }
        if (struct.isSetDetailJson()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetUserJson()) {
          oprot.writeString(struct.userJson);
        }
        if (struct.isSetMemberJson()) {
          oprot.writeString(struct.memberJson);
        }
        if (struct.isSetDetailJson()) {
          oprot.writeString(struct.detailJson);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, submitApply_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.userJson = iprot.readString();
          struct.setUserJsonIsSet(true);
        }
        if (incoming.get(1)) {
          struct.memberJson = iprot.readString();
          struct.setMemberJsonIsSet(true);
        }
        if (incoming.get(2)) {
          struct.detailJson = iprot.readString();
          struct.setDetailJsonIsSet(true);
        }
      }
    }

  }

  public static class submitApply_result implements org.apache.thrift.TBase<submitApply_result, submitApply_result._Fields>, java.io.Serializable, Cloneable, Comparable<submitApply_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("submitApply_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new submitApply_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new submitApply_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(submitApply_result.class, metaDataMap);
    }

    public submitApply_result() {
    }

    public submitApply_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public submitApply_result(submitApply_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public submitApply_result deepCopy() {
      return new submitApply_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public submitApply_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof submitApply_result)
        return this.equals((submitApply_result)that);
      return false;
    }

    public boolean equals(submitApply_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(submitApply_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("submitApply_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class submitApply_resultStandardSchemeFactory implements SchemeFactory {
      public submitApply_resultStandardScheme getScheme() {
        return new submitApply_resultStandardScheme();
      }
    }

    private static class submitApply_resultStandardScheme extends StandardScheme<submitApply_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, submitApply_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, submitApply_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class submitApply_resultTupleSchemeFactory implements SchemeFactory {
      public submitApply_resultTupleScheme getScheme() {
        return new submitApply_resultTupleScheme();
      }
    }

    private static class submitApply_resultTupleScheme extends TupleScheme<submitApply_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, submitApply_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, submitApply_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updateHealthy_args implements org.apache.thrift.TBase<updateHealthy_args, updateHealthy_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateHealthy_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateHealthy_args");

    private static final org.apache.thrift.protocol.TField USER_JSON_FIELD_DESC = new org.apache.thrift.protocol.TField("userJson", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField MEMBER_JSON_FIELD_DESC = new org.apache.thrift.protocol.TField("memberJson", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField DETAIL_JSON_FIELD_DESC = new org.apache.thrift.protocol.TField("detailJson", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateHealthy_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateHealthy_argsTupleSchemeFactory());
    }

    public String userJson; // required
    public String memberJson; // required
    public String detailJson; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_JSON((short)1, "userJson"),
      MEMBER_JSON((short)2, "memberJson"),
      DETAIL_JSON((short)3, "detailJson");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_JSON
            return USER_JSON;
          case 2: // MEMBER_JSON
            return MEMBER_JSON;
          case 3: // DETAIL_JSON
            return DETAIL_JSON;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_JSON, new org.apache.thrift.meta_data.FieldMetaData("userJson", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MEMBER_JSON, new org.apache.thrift.meta_data.FieldMetaData("memberJson", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DETAIL_JSON, new org.apache.thrift.meta_data.FieldMetaData("detailJson", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateHealthy_args.class, metaDataMap);
    }

    public updateHealthy_args() {
    }

    public updateHealthy_args(
      String userJson,
      String memberJson,
      String detailJson)
    {
      this();
      this.userJson = userJson;
      this.memberJson = memberJson;
      this.detailJson = detailJson;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateHealthy_args(updateHealthy_args other) {
      if (other.isSetUserJson()) {
        this.userJson = other.userJson;
      }
      if (other.isSetMemberJson()) {
        this.memberJson = other.memberJson;
      }
      if (other.isSetDetailJson()) {
        this.detailJson = other.detailJson;
      }
    }

    public updateHealthy_args deepCopy() {
      return new updateHealthy_args(this);
    }

    @Override
    public void clear() {
      this.userJson = null;
      this.memberJson = null;
      this.detailJson = null;
    }

    public String getUserJson() {
      return this.userJson;
    }

    public updateHealthy_args setUserJson(String userJson) {
      this.userJson = userJson;
      return this;
    }

    public void unsetUserJson() {
      this.userJson = null;
    }

    /** Returns true if field userJson is set (has been assigned a value) and false otherwise */
    public boolean isSetUserJson() {
      return this.userJson != null;
    }

    public void setUserJsonIsSet(boolean value) {
      if (!value) {
        this.userJson = null;
      }
    }

    public String getMemberJson() {
      return this.memberJson;
    }

    public updateHealthy_args setMemberJson(String memberJson) {
      this.memberJson = memberJson;
      return this;
    }

    public void unsetMemberJson() {
      this.memberJson = null;
    }

    /** Returns true if field memberJson is set (has been assigned a value) and false otherwise */
    public boolean isSetMemberJson() {
      return this.memberJson != null;
    }

    public void setMemberJsonIsSet(boolean value) {
      if (!value) {
        this.memberJson = null;
      }
    }

    public String getDetailJson() {
      return this.detailJson;
    }

    public updateHealthy_args setDetailJson(String detailJson) {
      this.detailJson = detailJson;
      return this;
    }

    public void unsetDetailJson() {
      this.detailJson = null;
    }

    /** Returns true if field detailJson is set (has been assigned a value) and false otherwise */
    public boolean isSetDetailJson() {
      return this.detailJson != null;
    }

    public void setDetailJsonIsSet(boolean value) {
      if (!value) {
        this.detailJson = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_JSON:
        if (value == null) {
          unsetUserJson();
        } else {
          setUserJson((String)value);
        }
        break;

      case MEMBER_JSON:
        if (value == null) {
          unsetMemberJson();
        } else {
          setMemberJson((String)value);
        }
        break;

      case DETAIL_JSON:
        if (value == null) {
          unsetDetailJson();
        } else {
          setDetailJson((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_JSON:
        return getUserJson();

      case MEMBER_JSON:
        return getMemberJson();

      case DETAIL_JSON:
        return getDetailJson();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_JSON:
        return isSetUserJson();
      case MEMBER_JSON:
        return isSetMemberJson();
      case DETAIL_JSON:
        return isSetDetailJson();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateHealthy_args)
        return this.equals((updateHealthy_args)that);
      return false;
    }

    public boolean equals(updateHealthy_args that) {
      if (that == null)
        return false;

      boolean this_present_userJson = true && this.isSetUserJson();
      boolean that_present_userJson = true && that.isSetUserJson();
      if (this_present_userJson || that_present_userJson) {
        if (!(this_present_userJson && that_present_userJson))
          return false;
        if (!this.userJson.equals(that.userJson))
          return false;
      }

      boolean this_present_memberJson = true && this.isSetMemberJson();
      boolean that_present_memberJson = true && that.isSetMemberJson();
      if (this_present_memberJson || that_present_memberJson) {
        if (!(this_present_memberJson && that_present_memberJson))
          return false;
        if (!this.memberJson.equals(that.memberJson))
          return false;
      }

      boolean this_present_detailJson = true && this.isSetDetailJson();
      boolean that_present_detailJson = true && that.isSetDetailJson();
      if (this_present_detailJson || that_present_detailJson) {
        if (!(this_present_detailJson && that_present_detailJson))
          return false;
        if (!this.detailJson.equals(that.detailJson))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_userJson = true && (isSetUserJson());
      list.add(present_userJson);
      if (present_userJson)
        list.add(userJson);

      boolean present_memberJson = true && (isSetMemberJson());
      list.add(present_memberJson);
      if (present_memberJson)
        list.add(memberJson);

      boolean present_detailJson = true && (isSetDetailJson());
      list.add(present_detailJson);
      if (present_detailJson)
        list.add(detailJson);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateHealthy_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUserJson()).compareTo(other.isSetUserJson());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserJson()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userJson, other.userJson);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMemberJson()).compareTo(other.isSetMemberJson());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMemberJson()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.memberJson, other.memberJson);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDetailJson()).compareTo(other.isSetDetailJson());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDetailJson()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.detailJson, other.detailJson);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateHealthy_args(");
      boolean first = true;

      sb.append("userJson:");
      if (this.userJson == null) {
        sb.append("null");
      } else {
        sb.append(this.userJson);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("memberJson:");
      if (this.memberJson == null) {
        sb.append("null");
      } else {
        sb.append(this.memberJson);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("detailJson:");
      if (this.detailJson == null) {
        sb.append("null");
      } else {
        sb.append(this.detailJson);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateHealthy_argsStandardSchemeFactory implements SchemeFactory {
      public updateHealthy_argsStandardScheme getScheme() {
        return new updateHealthy_argsStandardScheme();
      }
    }

    private static class updateHealthy_argsStandardScheme extends StandardScheme<updateHealthy_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateHealthy_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_JSON
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userJson = iprot.readString();
                struct.setUserJsonIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // MEMBER_JSON
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.memberJson = iprot.readString();
                struct.setMemberJsonIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // DETAIL_JSON
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.detailJson = iprot.readString();
                struct.setDetailJsonIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateHealthy_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.userJson != null) {
          oprot.writeFieldBegin(USER_JSON_FIELD_DESC);
          oprot.writeString(struct.userJson);
          oprot.writeFieldEnd();
        }
        if (struct.memberJson != null) {
          oprot.writeFieldBegin(MEMBER_JSON_FIELD_DESC);
          oprot.writeString(struct.memberJson);
          oprot.writeFieldEnd();
        }
        if (struct.detailJson != null) {
          oprot.writeFieldBegin(DETAIL_JSON_FIELD_DESC);
          oprot.writeString(struct.detailJson);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateHealthy_argsTupleSchemeFactory implements SchemeFactory {
      public updateHealthy_argsTupleScheme getScheme() {
        return new updateHealthy_argsTupleScheme();
      }
    }

    private static class updateHealthy_argsTupleScheme extends TupleScheme<updateHealthy_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateHealthy_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUserJson()) {
          optionals.set(0);
        }
        if (struct.isSetMemberJson()) {
          optionals.set(1);
        }
        if (struct.isSetDetailJson()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetUserJson()) {
          oprot.writeString(struct.userJson);
        }
        if (struct.isSetMemberJson()) {
          oprot.writeString(struct.memberJson);
        }
        if (struct.isSetDetailJson()) {
          oprot.writeString(struct.detailJson);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateHealthy_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.userJson = iprot.readString();
          struct.setUserJsonIsSet(true);
        }
        if (incoming.get(1)) {
          struct.memberJson = iprot.readString();
          struct.setMemberJsonIsSet(true);
        }
        if (incoming.get(2)) {
          struct.detailJson = iprot.readString();
          struct.setDetailJsonIsSet(true);
        }
      }
    }

  }

  public static class updateHealthy_result implements org.apache.thrift.TBase<updateHealthy_result, updateHealthy_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateHealthy_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateHealthy_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateHealthy_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateHealthy_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateHealthy_result.class, metaDataMap);
    }

    public updateHealthy_result() {
    }

    public updateHealthy_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateHealthy_result(updateHealthy_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public updateHealthy_result deepCopy() {
      return new updateHealthy_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public updateHealthy_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateHealthy_result)
        return this.equals((updateHealthy_result)that);
      return false;
    }

    public boolean equals(updateHealthy_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateHealthy_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateHealthy_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateHealthy_resultStandardSchemeFactory implements SchemeFactory {
      public updateHealthy_resultStandardScheme getScheme() {
        return new updateHealthy_resultStandardScheme();
      }
    }

    private static class updateHealthy_resultStandardScheme extends StandardScheme<updateHealthy_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateHealthy_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateHealthy_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateHealthy_resultTupleSchemeFactory implements SchemeFactory {
      public updateHealthy_resultTupleScheme getScheme() {
        return new updateHealthy_resultTupleScheme();
      }
    }

    private static class updateHealthy_resultTupleScheme extends TupleScheme<updateHealthy_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateHealthy_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateHealthy_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class auditHealthyMemberApply_args implements org.apache.thrift.TBase<auditHealthyMemberApply_args, auditHealthyMemberApply_args._Fields>, java.io.Serializable, Cloneable, Comparable<auditHealthyMemberApply_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("auditHealthyMemberApply_args");

    private static final org.apache.thrift.protocol.TField HEALTHY_USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("healthyUserId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField AUDIT_USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("auditUserId", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField AUDIT_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("auditStatus", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new auditHealthyMemberApply_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new auditHealthyMemberApply_argsTupleSchemeFactory());
    }

    public String healthyUserId; // required
    public String auditUserId; // required
    public int auditStatus; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      HEALTHY_USER_ID((short)1, "healthyUserId"),
      AUDIT_USER_ID((short)2, "auditUserId"),
      AUDIT_STATUS((short)3, "auditStatus");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // HEALTHY_USER_ID
            return HEALTHY_USER_ID;
          case 2: // AUDIT_USER_ID
            return AUDIT_USER_ID;
          case 3: // AUDIT_STATUS
            return AUDIT_STATUS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __AUDITSTATUS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.HEALTHY_USER_ID, new org.apache.thrift.meta_data.FieldMetaData("healthyUserId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.AUDIT_USER_ID, new org.apache.thrift.meta_data.FieldMetaData("auditUserId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.AUDIT_STATUS, new org.apache.thrift.meta_data.FieldMetaData("auditStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(auditHealthyMemberApply_args.class, metaDataMap);
    }

    public auditHealthyMemberApply_args() {
    }

    public auditHealthyMemberApply_args(
      String healthyUserId,
      String auditUserId,
      int auditStatus)
    {
      this();
      this.healthyUserId = healthyUserId;
      this.auditUserId = auditUserId;
      this.auditStatus = auditStatus;
      setAuditStatusIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public auditHealthyMemberApply_args(auditHealthyMemberApply_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetHealthyUserId()) {
        this.healthyUserId = other.healthyUserId;
      }
      if (other.isSetAuditUserId()) {
        this.auditUserId = other.auditUserId;
      }
      this.auditStatus = other.auditStatus;
    }

    public auditHealthyMemberApply_args deepCopy() {
      return new auditHealthyMemberApply_args(this);
    }

    @Override
    public void clear() {
      this.healthyUserId = null;
      this.auditUserId = null;
      setAuditStatusIsSet(false);
      this.auditStatus = 0;
    }

    public String getHealthyUserId() {
      return this.healthyUserId;
    }

    public auditHealthyMemberApply_args setHealthyUserId(String healthyUserId) {
      this.healthyUserId = healthyUserId;
      return this;
    }

    public void unsetHealthyUserId() {
      this.healthyUserId = null;
    }

    /** Returns true if field healthyUserId is set (has been assigned a value) and false otherwise */
    public boolean isSetHealthyUserId() {
      return this.healthyUserId != null;
    }

    public void setHealthyUserIdIsSet(boolean value) {
      if (!value) {
        this.healthyUserId = null;
      }
    }

    public String getAuditUserId() {
      return this.auditUserId;
    }

    public auditHealthyMemberApply_args setAuditUserId(String auditUserId) {
      this.auditUserId = auditUserId;
      return this;
    }

    public void unsetAuditUserId() {
      this.auditUserId = null;
    }

    /** Returns true if field auditUserId is set (has been assigned a value) and false otherwise */
    public boolean isSetAuditUserId() {
      return this.auditUserId != null;
    }

    public void setAuditUserIdIsSet(boolean value) {
      if (!value) {
        this.auditUserId = null;
      }
    }

    public int getAuditStatus() {
      return this.auditStatus;
    }

    public auditHealthyMemberApply_args setAuditStatus(int auditStatus) {
      this.auditStatus = auditStatus;
      setAuditStatusIsSet(true);
      return this;
    }

    public void unsetAuditStatus() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AUDITSTATUS_ISSET_ID);
    }

    /** Returns true if field auditStatus is set (has been assigned a value) and false otherwise */
    public boolean isSetAuditStatus() {
      return EncodingUtils.testBit(__isset_bitfield, __AUDITSTATUS_ISSET_ID);
    }

    public void setAuditStatusIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AUDITSTATUS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case HEALTHY_USER_ID:
        if (value == null) {
          unsetHealthyUserId();
        } else {
          setHealthyUserId((String)value);
        }
        break;

      case AUDIT_USER_ID:
        if (value == null) {
          unsetAuditUserId();
        } else {
          setAuditUserId((String)value);
        }
        break;

      case AUDIT_STATUS:
        if (value == null) {
          unsetAuditStatus();
        } else {
          setAuditStatus((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case HEALTHY_USER_ID:
        return getHealthyUserId();

      case AUDIT_USER_ID:
        return getAuditUserId();

      case AUDIT_STATUS:
        return getAuditStatus();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case HEALTHY_USER_ID:
        return isSetHealthyUserId();
      case AUDIT_USER_ID:
        return isSetAuditUserId();
      case AUDIT_STATUS:
        return isSetAuditStatus();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof auditHealthyMemberApply_args)
        return this.equals((auditHealthyMemberApply_args)that);
      return false;
    }

    public boolean equals(auditHealthyMemberApply_args that) {
      if (that == null)
        return false;

      boolean this_present_healthyUserId = true && this.isSetHealthyUserId();
      boolean that_present_healthyUserId = true && that.isSetHealthyUserId();
      if (this_present_healthyUserId || that_present_healthyUserId) {
        if (!(this_present_healthyUserId && that_present_healthyUserId))
          return false;
        if (!this.healthyUserId.equals(that.healthyUserId))
          return false;
      }

      boolean this_present_auditUserId = true && this.isSetAuditUserId();
      boolean that_present_auditUserId = true && that.isSetAuditUserId();
      if (this_present_auditUserId || that_present_auditUserId) {
        if (!(this_present_auditUserId && that_present_auditUserId))
          return false;
        if (!this.auditUserId.equals(that.auditUserId))
          return false;
      }

      boolean this_present_auditStatus = true;
      boolean that_present_auditStatus = true;
      if (this_present_auditStatus || that_present_auditStatus) {
        if (!(this_present_auditStatus && that_present_auditStatus))
          return false;
        if (this.auditStatus != that.auditStatus)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_healthyUserId = true && (isSetHealthyUserId());
      list.add(present_healthyUserId);
      if (present_healthyUserId)
        list.add(healthyUserId);

      boolean present_auditUserId = true && (isSetAuditUserId());
      list.add(present_auditUserId);
      if (present_auditUserId)
        list.add(auditUserId);

      boolean present_auditStatus = true;
      list.add(present_auditStatus);
      if (present_auditStatus)
        list.add(auditStatus);

      return list.hashCode();
    }

    @Override
    public int compareTo(auditHealthyMemberApply_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetHealthyUserId()).compareTo(other.isSetHealthyUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHealthyUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.healthyUserId, other.healthyUserId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAuditUserId()).compareTo(other.isSetAuditUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuditUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.auditUserId, other.auditUserId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAuditStatus()).compareTo(other.isSetAuditStatus());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuditStatus()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.auditStatus, other.auditStatus);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("auditHealthyMemberApply_args(");
      boolean first = true;

      sb.append("healthyUserId:");
      if (this.healthyUserId == null) {
        sb.append("null");
      } else {
        sb.append(this.healthyUserId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("auditUserId:");
      if (this.auditUserId == null) {
        sb.append("null");
      } else {
        sb.append(this.auditUserId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("auditStatus:");
      sb.append(this.auditStatus);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class auditHealthyMemberApply_argsStandardSchemeFactory implements SchemeFactory {
      public auditHealthyMemberApply_argsStandardScheme getScheme() {
        return new auditHealthyMemberApply_argsStandardScheme();
      }
    }

    private static class auditHealthyMemberApply_argsStandardScheme extends StandardScheme<auditHealthyMemberApply_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, auditHealthyMemberApply_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // HEALTHY_USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.healthyUserId = iprot.readString();
                struct.setHealthyUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // AUDIT_USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.auditUserId = iprot.readString();
                struct.setAuditUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // AUDIT_STATUS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.auditStatus = iprot.readI32();
                struct.setAuditStatusIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, auditHealthyMemberApply_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.healthyUserId != null) {
          oprot.writeFieldBegin(HEALTHY_USER_ID_FIELD_DESC);
          oprot.writeString(struct.healthyUserId);
          oprot.writeFieldEnd();
        }
        if (struct.auditUserId != null) {
          oprot.writeFieldBegin(AUDIT_USER_ID_FIELD_DESC);
          oprot.writeString(struct.auditUserId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(AUDIT_STATUS_FIELD_DESC);
        oprot.writeI32(struct.auditStatus);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class auditHealthyMemberApply_argsTupleSchemeFactory implements SchemeFactory {
      public auditHealthyMemberApply_argsTupleScheme getScheme() {
        return new auditHealthyMemberApply_argsTupleScheme();
      }
    }

    private static class auditHealthyMemberApply_argsTupleScheme extends TupleScheme<auditHealthyMemberApply_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, auditHealthyMemberApply_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetHealthyUserId()) {
          optionals.set(0);
        }
        if (struct.isSetAuditUserId()) {
          optionals.set(1);
        }
        if (struct.isSetAuditStatus()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetHealthyUserId()) {
          oprot.writeString(struct.healthyUserId);
        }
        if (struct.isSetAuditUserId()) {
          oprot.writeString(struct.auditUserId);
        }
        if (struct.isSetAuditStatus()) {
          oprot.writeI32(struct.auditStatus);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, auditHealthyMemberApply_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.healthyUserId = iprot.readString();
          struct.setHealthyUserIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.auditUserId = iprot.readString();
          struct.setAuditUserIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.auditStatus = iprot.readI32();
          struct.setAuditStatusIsSet(true);
        }
      }
    }

  }

  public static class auditHealthyMemberApply_result implements org.apache.thrift.TBase<auditHealthyMemberApply_result, auditHealthyMemberApply_result._Fields>, java.io.Serializable, Cloneable, Comparable<auditHealthyMemberApply_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("auditHealthyMemberApply_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new auditHealthyMemberApply_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new auditHealthyMemberApply_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(auditHealthyMemberApply_result.class, metaDataMap);
    }

    public auditHealthyMemberApply_result() {
    }

    public auditHealthyMemberApply_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public auditHealthyMemberApply_result(auditHealthyMemberApply_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public auditHealthyMemberApply_result deepCopy() {
      return new auditHealthyMemberApply_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public auditHealthyMemberApply_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof auditHealthyMemberApply_result)
        return this.equals((auditHealthyMemberApply_result)that);
      return false;
    }

    public boolean equals(auditHealthyMemberApply_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(auditHealthyMemberApply_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("auditHealthyMemberApply_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class auditHealthyMemberApply_resultStandardSchemeFactory implements SchemeFactory {
      public auditHealthyMemberApply_resultStandardScheme getScheme() {
        return new auditHealthyMemberApply_resultStandardScheme();
      }
    }

    private static class auditHealthyMemberApply_resultStandardScheme extends StandardScheme<auditHealthyMemberApply_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, auditHealthyMemberApply_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, auditHealthyMemberApply_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class auditHealthyMemberApply_resultTupleSchemeFactory implements SchemeFactory {
      public auditHealthyMemberApply_resultTupleScheme getScheme() {
        return new auditHealthyMemberApply_resultTupleScheme();
      }
    }

    private static class auditHealthyMemberApply_resultTupleScheme extends TupleScheme<auditHealthyMemberApply_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, auditHealthyMemberApply_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, auditHealthyMemberApply_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class rejectHealthyMemberApply_args implements org.apache.thrift.TBase<rejectHealthyMemberApply_args, rejectHealthyMemberApply_args._Fields>, java.io.Serializable, Cloneable, Comparable<rejectHealthyMemberApply_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("rejectHealthyMemberApply_args");

    private static final org.apache.thrift.protocol.TField HEALTHY_USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("healthyUserId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField AUDIT_USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("auditUserId", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField AUDIT_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("auditStatus", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new rejectHealthyMemberApply_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new rejectHealthyMemberApply_argsTupleSchemeFactory());
    }

    public String healthyUserId; // required
    public String auditUserId; // required
    public int auditStatus; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      HEALTHY_USER_ID((short)1, "healthyUserId"),
      AUDIT_USER_ID((short)2, "auditUserId"),
      AUDIT_STATUS((short)3, "auditStatus");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // HEALTHY_USER_ID
            return HEALTHY_USER_ID;
          case 2: // AUDIT_USER_ID
            return AUDIT_USER_ID;
          case 3: // AUDIT_STATUS
            return AUDIT_STATUS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __AUDITSTATUS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.HEALTHY_USER_ID, new org.apache.thrift.meta_data.FieldMetaData("healthyUserId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.AUDIT_USER_ID, new org.apache.thrift.meta_data.FieldMetaData("auditUserId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.AUDIT_STATUS, new org.apache.thrift.meta_data.FieldMetaData("auditStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(rejectHealthyMemberApply_args.class, metaDataMap);
    }

    public rejectHealthyMemberApply_args() {
    }

    public rejectHealthyMemberApply_args(
      String healthyUserId,
      String auditUserId,
      int auditStatus)
    {
      this();
      this.healthyUserId = healthyUserId;
      this.auditUserId = auditUserId;
      this.auditStatus = auditStatus;
      setAuditStatusIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public rejectHealthyMemberApply_args(rejectHealthyMemberApply_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetHealthyUserId()) {
        this.healthyUserId = other.healthyUserId;
      }
      if (other.isSetAuditUserId()) {
        this.auditUserId = other.auditUserId;
      }
      this.auditStatus = other.auditStatus;
    }

    public rejectHealthyMemberApply_args deepCopy() {
      return new rejectHealthyMemberApply_args(this);
    }

    @Override
    public void clear() {
      this.healthyUserId = null;
      this.auditUserId = null;
      setAuditStatusIsSet(false);
      this.auditStatus = 0;
    }

    public String getHealthyUserId() {
      return this.healthyUserId;
    }

    public rejectHealthyMemberApply_args setHealthyUserId(String healthyUserId) {
      this.healthyUserId = healthyUserId;
      return this;
    }

    public void unsetHealthyUserId() {
      this.healthyUserId = null;
    }

    /** Returns true if field healthyUserId is set (has been assigned a value) and false otherwise */
    public boolean isSetHealthyUserId() {
      return this.healthyUserId != null;
    }

    public void setHealthyUserIdIsSet(boolean value) {
      if (!value) {
        this.healthyUserId = null;
      }
    }

    public String getAuditUserId() {
      return this.auditUserId;
    }

    public rejectHealthyMemberApply_args setAuditUserId(String auditUserId) {
      this.auditUserId = auditUserId;
      return this;
    }

    public void unsetAuditUserId() {
      this.auditUserId = null;
    }

    /** Returns true if field auditUserId is set (has been assigned a value) and false otherwise */
    public boolean isSetAuditUserId() {
      return this.auditUserId != null;
    }

    public void setAuditUserIdIsSet(boolean value) {
      if (!value) {
        this.auditUserId = null;
      }
    }

    public int getAuditStatus() {
      return this.auditStatus;
    }

    public rejectHealthyMemberApply_args setAuditStatus(int auditStatus) {
      this.auditStatus = auditStatus;
      setAuditStatusIsSet(true);
      return this;
    }

    public void unsetAuditStatus() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AUDITSTATUS_ISSET_ID);
    }

    /** Returns true if field auditStatus is set (has been assigned a value) and false otherwise */
    public boolean isSetAuditStatus() {
      return EncodingUtils.testBit(__isset_bitfield, __AUDITSTATUS_ISSET_ID);
    }

    public void setAuditStatusIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AUDITSTATUS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case HEALTHY_USER_ID:
        if (value == null) {
          unsetHealthyUserId();
        } else {
          setHealthyUserId((String)value);
        }
        break;

      case AUDIT_USER_ID:
        if (value == null) {
          unsetAuditUserId();
        } else {
          setAuditUserId((String)value);
        }
        break;

      case AUDIT_STATUS:
        if (value == null) {
          unsetAuditStatus();
        } else {
          setAuditStatus((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case HEALTHY_USER_ID:
        return getHealthyUserId();

      case AUDIT_USER_ID:
        return getAuditUserId();

      case AUDIT_STATUS:
        return getAuditStatus();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case HEALTHY_USER_ID:
        return isSetHealthyUserId();
      case AUDIT_USER_ID:
        return isSetAuditUserId();
      case AUDIT_STATUS:
        return isSetAuditStatus();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof rejectHealthyMemberApply_args)
        return this.equals((rejectHealthyMemberApply_args)that);
      return false;
    }

    public boolean equals(rejectHealthyMemberApply_args that) {
      if (that == null)
        return false;

      boolean this_present_healthyUserId = true && this.isSetHealthyUserId();
      boolean that_present_healthyUserId = true && that.isSetHealthyUserId();
      if (this_present_healthyUserId || that_present_healthyUserId) {
        if (!(this_present_healthyUserId && that_present_healthyUserId))
          return false;
        if (!this.healthyUserId.equals(that.healthyUserId))
          return false;
      }

      boolean this_present_auditUserId = true && this.isSetAuditUserId();
      boolean that_present_auditUserId = true && that.isSetAuditUserId();
      if (this_present_auditUserId || that_present_auditUserId) {
        if (!(this_present_auditUserId && that_present_auditUserId))
          return false;
        if (!this.auditUserId.equals(that.auditUserId))
          return false;
      }

      boolean this_present_auditStatus = true;
      boolean that_present_auditStatus = true;
      if (this_present_auditStatus || that_present_auditStatus) {
        if (!(this_present_auditStatus && that_present_auditStatus))
          return false;
        if (this.auditStatus != that.auditStatus)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_healthyUserId = true && (isSetHealthyUserId());
      list.add(present_healthyUserId);
      if (present_healthyUserId)
        list.add(healthyUserId);

      boolean present_auditUserId = true && (isSetAuditUserId());
      list.add(present_auditUserId);
      if (present_auditUserId)
        list.add(auditUserId);

      boolean present_auditStatus = true;
      list.add(present_auditStatus);
      if (present_auditStatus)
        list.add(auditStatus);

      return list.hashCode();
    }

    @Override
    public int compareTo(rejectHealthyMemberApply_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetHealthyUserId()).compareTo(other.isSetHealthyUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHealthyUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.healthyUserId, other.healthyUserId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAuditUserId()).compareTo(other.isSetAuditUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuditUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.auditUserId, other.auditUserId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAuditStatus()).compareTo(other.isSetAuditStatus());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuditStatus()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.auditStatus, other.auditStatus);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("rejectHealthyMemberApply_args(");
      boolean first = true;

      sb.append("healthyUserId:");
      if (this.healthyUserId == null) {
        sb.append("null");
      } else {
        sb.append(this.healthyUserId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("auditUserId:");
      if (this.auditUserId == null) {
        sb.append("null");
      } else {
        sb.append(this.auditUserId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("auditStatus:");
      sb.append(this.auditStatus);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class rejectHealthyMemberApply_argsStandardSchemeFactory implements SchemeFactory {
      public rejectHealthyMemberApply_argsStandardScheme getScheme() {
        return new rejectHealthyMemberApply_argsStandardScheme();
      }
    }

    private static class rejectHealthyMemberApply_argsStandardScheme extends StandardScheme<rejectHealthyMemberApply_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, rejectHealthyMemberApply_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // HEALTHY_USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.healthyUserId = iprot.readString();
                struct.setHealthyUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // AUDIT_USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.auditUserId = iprot.readString();
                struct.setAuditUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // AUDIT_STATUS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.auditStatus = iprot.readI32();
                struct.setAuditStatusIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, rejectHealthyMemberApply_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.healthyUserId != null) {
          oprot.writeFieldBegin(HEALTHY_USER_ID_FIELD_DESC);
          oprot.writeString(struct.healthyUserId);
          oprot.writeFieldEnd();
        }
        if (struct.auditUserId != null) {
          oprot.writeFieldBegin(AUDIT_USER_ID_FIELD_DESC);
          oprot.writeString(struct.auditUserId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(AUDIT_STATUS_FIELD_DESC);
        oprot.writeI32(struct.auditStatus);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class rejectHealthyMemberApply_argsTupleSchemeFactory implements SchemeFactory {
      public rejectHealthyMemberApply_argsTupleScheme getScheme() {
        return new rejectHealthyMemberApply_argsTupleScheme();
      }
    }

    private static class rejectHealthyMemberApply_argsTupleScheme extends TupleScheme<rejectHealthyMemberApply_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, rejectHealthyMemberApply_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetHealthyUserId()) {
          optionals.set(0);
        }
        if (struct.isSetAuditUserId()) {
          optionals.set(1);
        }
        if (struct.isSetAuditStatus()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetHealthyUserId()) {
          oprot.writeString(struct.healthyUserId);
        }
        if (struct.isSetAuditUserId()) {
          oprot.writeString(struct.auditUserId);
        }
        if (struct.isSetAuditStatus()) {
          oprot.writeI32(struct.auditStatus);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, rejectHealthyMemberApply_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.healthyUserId = iprot.readString();
          struct.setHealthyUserIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.auditUserId = iprot.readString();
          struct.setAuditUserIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.auditStatus = iprot.readI32();
          struct.setAuditStatusIsSet(true);
        }
      }
    }

  }

  public static class rejectHealthyMemberApply_result implements org.apache.thrift.TBase<rejectHealthyMemberApply_result, rejectHealthyMemberApply_result._Fields>, java.io.Serializable, Cloneable, Comparable<rejectHealthyMemberApply_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("rejectHealthyMemberApply_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new rejectHealthyMemberApply_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new rejectHealthyMemberApply_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(rejectHealthyMemberApply_result.class, metaDataMap);
    }

    public rejectHealthyMemberApply_result() {
    }

    public rejectHealthyMemberApply_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public rejectHealthyMemberApply_result(rejectHealthyMemberApply_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public rejectHealthyMemberApply_result deepCopy() {
      return new rejectHealthyMemberApply_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public rejectHealthyMemberApply_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof rejectHealthyMemberApply_result)
        return this.equals((rejectHealthyMemberApply_result)that);
      return false;
    }

    public boolean equals(rejectHealthyMemberApply_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(rejectHealthyMemberApply_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("rejectHealthyMemberApply_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class rejectHealthyMemberApply_resultStandardSchemeFactory implements SchemeFactory {
      public rejectHealthyMemberApply_resultStandardScheme getScheme() {
        return new rejectHealthyMemberApply_resultStandardScheme();
      }
    }

    private static class rejectHealthyMemberApply_resultStandardScheme extends StandardScheme<rejectHealthyMemberApply_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, rejectHealthyMemberApply_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, rejectHealthyMemberApply_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class rejectHealthyMemberApply_resultTupleSchemeFactory implements SchemeFactory {
      public rejectHealthyMemberApply_resultTupleScheme getScheme() {
        return new rejectHealthyMemberApply_resultTupleScheme();
      }
    }

    private static class rejectHealthyMemberApply_resultTupleScheme extends TupleScheme<rejectHealthyMemberApply_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, rejectHealthyMemberApply_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, rejectHealthyMemberApply_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class loadAppliedHealthyMembersForPagelit_args implements org.apache.thrift.TBase<loadAppliedHealthyMembersForPagelit_args, loadAppliedHealthyMembersForPagelit_args._Fields>, java.io.Serializable, Cloneable, Comparable<loadAppliedHealthyMembersForPagelit_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("loadAppliedHealthyMembersForPagelit_args");

    private static final org.apache.thrift.protocol.TField PAGE_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("pageNum", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new loadAppliedHealthyMembersForPagelit_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new loadAppliedHealthyMembersForPagelit_argsTupleSchemeFactory());
    }

    public int pageNum; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PAGE_NUM((short)1, "pageNum");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PAGE_NUM
            return PAGE_NUM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PAGENUM_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PAGE_NUM, new org.apache.thrift.meta_data.FieldMetaData("pageNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(loadAppliedHealthyMembersForPagelit_args.class, metaDataMap);
    }

    public loadAppliedHealthyMembersForPagelit_args() {
    }

    public loadAppliedHealthyMembersForPagelit_args(
      int pageNum)
    {
      this();
      this.pageNum = pageNum;
      setPageNumIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public loadAppliedHealthyMembersForPagelit_args(loadAppliedHealthyMembersForPagelit_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.pageNum = other.pageNum;
    }

    public loadAppliedHealthyMembersForPagelit_args deepCopy() {
      return new loadAppliedHealthyMembersForPagelit_args(this);
    }

    @Override
    public void clear() {
      setPageNumIsSet(false);
      this.pageNum = 0;
    }

    public int getPageNum() {
      return this.pageNum;
    }

    public loadAppliedHealthyMembersForPagelit_args setPageNum(int pageNum) {
      this.pageNum = pageNum;
      setPageNumIsSet(true);
      return this;
    }

    public void unsetPageNum() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGENUM_ISSET_ID);
    }

    /** Returns true if field pageNum is set (has been assigned a value) and false otherwise */
    public boolean isSetPageNum() {
      return EncodingUtils.testBit(__isset_bitfield, __PAGENUM_ISSET_ID);
    }

    public void setPageNumIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGENUM_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PAGE_NUM:
        if (value == null) {
          unsetPageNum();
        } else {
          setPageNum((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PAGE_NUM:
        return getPageNum();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PAGE_NUM:
        return isSetPageNum();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof loadAppliedHealthyMembersForPagelit_args)
        return this.equals((loadAppliedHealthyMembersForPagelit_args)that);
      return false;
    }

    public boolean equals(loadAppliedHealthyMembersForPagelit_args that) {
      if (that == null)
        return false;

      boolean this_present_pageNum = true;
      boolean that_present_pageNum = true;
      if (this_present_pageNum || that_present_pageNum) {
        if (!(this_present_pageNum && that_present_pageNum))
          return false;
        if (this.pageNum != that.pageNum)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_pageNum = true;
      list.add(present_pageNum);
      if (present_pageNum)
        list.add(pageNum);

      return list.hashCode();
    }

    @Override
    public int compareTo(loadAppliedHealthyMembersForPagelit_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPageNum()).compareTo(other.isSetPageNum());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageNum()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageNum, other.pageNum);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("loadAppliedHealthyMembersForPagelit_args(");
      boolean first = true;

      sb.append("pageNum:");
      sb.append(this.pageNum);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class loadAppliedHealthyMembersForPagelit_argsStandardSchemeFactory implements SchemeFactory {
      public loadAppliedHealthyMembersForPagelit_argsStandardScheme getScheme() {
        return new loadAppliedHealthyMembersForPagelit_argsStandardScheme();
      }
    }

    private static class loadAppliedHealthyMembersForPagelit_argsStandardScheme extends StandardScheme<loadAppliedHealthyMembersForPagelit_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, loadAppliedHealthyMembersForPagelit_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PAGE_NUM
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pageNum = iprot.readI32();
                struct.setPageNumIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, loadAppliedHealthyMembersForPagelit_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(PAGE_NUM_FIELD_DESC);
        oprot.writeI32(struct.pageNum);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class loadAppliedHealthyMembersForPagelit_argsTupleSchemeFactory implements SchemeFactory {
      public loadAppliedHealthyMembersForPagelit_argsTupleScheme getScheme() {
        return new loadAppliedHealthyMembersForPagelit_argsTupleScheme();
      }
    }

    private static class loadAppliedHealthyMembersForPagelit_argsTupleScheme extends TupleScheme<loadAppliedHealthyMembersForPagelit_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, loadAppliedHealthyMembersForPagelit_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPageNum()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetPageNum()) {
          oprot.writeI32(struct.pageNum);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, loadAppliedHealthyMembersForPagelit_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.pageNum = iprot.readI32();
          struct.setPageNumIsSet(true);
        }
      }
    }

  }

  public static class loadAppliedHealthyMembersForPagelit_result implements org.apache.thrift.TBase<loadAppliedHealthyMembersForPagelit_result, loadAppliedHealthyMembersForPagelit_result._Fields>, java.io.Serializable, Cloneable, Comparable<loadAppliedHealthyMembersForPagelit_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("loadAppliedHealthyMembersForPagelit_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new loadAppliedHealthyMembersForPagelit_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new loadAppliedHealthyMembersForPagelit_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(loadAppliedHealthyMembersForPagelit_result.class, metaDataMap);
    }

    public loadAppliedHealthyMembersForPagelit_result() {
    }

    public loadAppliedHealthyMembersForPagelit_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public loadAppliedHealthyMembersForPagelit_result(loadAppliedHealthyMembersForPagelit_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public loadAppliedHealthyMembersForPagelit_result deepCopy() {
      return new loadAppliedHealthyMembersForPagelit_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public loadAppliedHealthyMembersForPagelit_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof loadAppliedHealthyMembersForPagelit_result)
        return this.equals((loadAppliedHealthyMembersForPagelit_result)that);
      return false;
    }

    public boolean equals(loadAppliedHealthyMembersForPagelit_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(loadAppliedHealthyMembersForPagelit_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("loadAppliedHealthyMembersForPagelit_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class loadAppliedHealthyMembersForPagelit_resultStandardSchemeFactory implements SchemeFactory {
      public loadAppliedHealthyMembersForPagelit_resultStandardScheme getScheme() {
        return new loadAppliedHealthyMembersForPagelit_resultStandardScheme();
      }
    }

    private static class loadAppliedHealthyMembersForPagelit_resultStandardScheme extends StandardScheme<loadAppliedHealthyMembersForPagelit_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, loadAppliedHealthyMembersForPagelit_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, loadAppliedHealthyMembersForPagelit_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class loadAppliedHealthyMembersForPagelit_resultTupleSchemeFactory implements SchemeFactory {
      public loadAppliedHealthyMembersForPagelit_resultTupleScheme getScheme() {
        return new loadAppliedHealthyMembersForPagelit_resultTupleScheme();
      }
    }

    private static class loadAppliedHealthyMembersForPagelit_resultTupleScheme extends TupleScheme<loadAppliedHealthyMembersForPagelit_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, loadAppliedHealthyMembersForPagelit_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, loadAppliedHealthyMembersForPagelit_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class loadApprovedHealthyMembersForPagelit_args implements org.apache.thrift.TBase<loadApprovedHealthyMembersForPagelit_args, loadApprovedHealthyMembersForPagelit_args._Fields>, java.io.Serializable, Cloneable, Comparable<loadApprovedHealthyMembersForPagelit_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("loadApprovedHealthyMembersForPagelit_args");

    private static final org.apache.thrift.protocol.TField PAGE_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("pageNum", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new loadApprovedHealthyMembersForPagelit_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new loadApprovedHealthyMembersForPagelit_argsTupleSchemeFactory());
    }

    public int pageNum; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PAGE_NUM((short)1, "pageNum");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PAGE_NUM
            return PAGE_NUM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PAGENUM_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PAGE_NUM, new org.apache.thrift.meta_data.FieldMetaData("pageNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(loadApprovedHealthyMembersForPagelit_args.class, metaDataMap);
    }

    public loadApprovedHealthyMembersForPagelit_args() {
    }

    public loadApprovedHealthyMembersForPagelit_args(
      int pageNum)
    {
      this();
      this.pageNum = pageNum;
      setPageNumIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public loadApprovedHealthyMembersForPagelit_args(loadApprovedHealthyMembersForPagelit_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.pageNum = other.pageNum;
    }

    public loadApprovedHealthyMembersForPagelit_args deepCopy() {
      return new loadApprovedHealthyMembersForPagelit_args(this);
    }

    @Override
    public void clear() {
      setPageNumIsSet(false);
      this.pageNum = 0;
    }

    public int getPageNum() {
      return this.pageNum;
    }

    public loadApprovedHealthyMembersForPagelit_args setPageNum(int pageNum) {
      this.pageNum = pageNum;
      setPageNumIsSet(true);
      return this;
    }

    public void unsetPageNum() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGENUM_ISSET_ID);
    }

    /** Returns true if field pageNum is set (has been assigned a value) and false otherwise */
    public boolean isSetPageNum() {
      return EncodingUtils.testBit(__isset_bitfield, __PAGENUM_ISSET_ID);
    }

    public void setPageNumIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGENUM_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PAGE_NUM:
        if (value == null) {
          unsetPageNum();
        } else {
          setPageNum((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PAGE_NUM:
        return getPageNum();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PAGE_NUM:
        return isSetPageNum();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof loadApprovedHealthyMembersForPagelit_args)
        return this.equals((loadApprovedHealthyMembersForPagelit_args)that);
      return false;
    }

    public boolean equals(loadApprovedHealthyMembersForPagelit_args that) {
      if (that == null)
        return false;

      boolean this_present_pageNum = true;
      boolean that_present_pageNum = true;
      if (this_present_pageNum || that_present_pageNum) {
        if (!(this_present_pageNum && that_present_pageNum))
          return false;
        if (this.pageNum != that.pageNum)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_pageNum = true;
      list.add(present_pageNum);
      if (present_pageNum)
        list.add(pageNum);

      return list.hashCode();
    }

    @Override
    public int compareTo(loadApprovedHealthyMembersForPagelit_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPageNum()).compareTo(other.isSetPageNum());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageNum()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageNum, other.pageNum);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("loadApprovedHealthyMembersForPagelit_args(");
      boolean first = true;

      sb.append("pageNum:");
      sb.append(this.pageNum);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class loadApprovedHealthyMembersForPagelit_argsStandardSchemeFactory implements SchemeFactory {
      public loadApprovedHealthyMembersForPagelit_argsStandardScheme getScheme() {
        return new loadApprovedHealthyMembersForPagelit_argsStandardScheme();
      }
    }

    private static class loadApprovedHealthyMembersForPagelit_argsStandardScheme extends StandardScheme<loadApprovedHealthyMembersForPagelit_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, loadApprovedHealthyMembersForPagelit_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PAGE_NUM
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pageNum = iprot.readI32();
                struct.setPageNumIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, loadApprovedHealthyMembersForPagelit_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(PAGE_NUM_FIELD_DESC);
        oprot.writeI32(struct.pageNum);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class loadApprovedHealthyMembersForPagelit_argsTupleSchemeFactory implements SchemeFactory {
      public loadApprovedHealthyMembersForPagelit_argsTupleScheme getScheme() {
        return new loadApprovedHealthyMembersForPagelit_argsTupleScheme();
      }
    }

    private static class loadApprovedHealthyMembersForPagelit_argsTupleScheme extends TupleScheme<loadApprovedHealthyMembersForPagelit_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, loadApprovedHealthyMembersForPagelit_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPageNum()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetPageNum()) {
          oprot.writeI32(struct.pageNum);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, loadApprovedHealthyMembersForPagelit_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.pageNum = iprot.readI32();
          struct.setPageNumIsSet(true);
        }
      }
    }

  }

  public static class loadApprovedHealthyMembersForPagelit_result implements org.apache.thrift.TBase<loadApprovedHealthyMembersForPagelit_result, loadApprovedHealthyMembersForPagelit_result._Fields>, java.io.Serializable, Cloneable, Comparable<loadApprovedHealthyMembersForPagelit_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("loadApprovedHealthyMembersForPagelit_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new loadApprovedHealthyMembersForPagelit_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new loadApprovedHealthyMembersForPagelit_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(loadApprovedHealthyMembersForPagelit_result.class, metaDataMap);
    }

    public loadApprovedHealthyMembersForPagelit_result() {
    }

    public loadApprovedHealthyMembersForPagelit_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public loadApprovedHealthyMembersForPagelit_result(loadApprovedHealthyMembersForPagelit_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public loadApprovedHealthyMembersForPagelit_result deepCopy() {
      return new loadApprovedHealthyMembersForPagelit_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public loadApprovedHealthyMembersForPagelit_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof loadApprovedHealthyMembersForPagelit_result)
        return this.equals((loadApprovedHealthyMembersForPagelit_result)that);
      return false;
    }

    public boolean equals(loadApprovedHealthyMembersForPagelit_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(loadApprovedHealthyMembersForPagelit_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("loadApprovedHealthyMembersForPagelit_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class loadApprovedHealthyMembersForPagelit_resultStandardSchemeFactory implements SchemeFactory {
      public loadApprovedHealthyMembersForPagelit_resultStandardScheme getScheme() {
        return new loadApprovedHealthyMembersForPagelit_resultStandardScheme();
      }
    }

    private static class loadApprovedHealthyMembersForPagelit_resultStandardScheme extends StandardScheme<loadApprovedHealthyMembersForPagelit_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, loadApprovedHealthyMembersForPagelit_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, loadApprovedHealthyMembersForPagelit_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class loadApprovedHealthyMembersForPagelit_resultTupleSchemeFactory implements SchemeFactory {
      public loadApprovedHealthyMembersForPagelit_resultTupleScheme getScheme() {
        return new loadApprovedHealthyMembersForPagelit_resultTupleScheme();
      }
    }

    private static class loadApprovedHealthyMembersForPagelit_resultTupleScheme extends TupleScheme<loadApprovedHealthyMembersForPagelit_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, loadApprovedHealthyMembersForPagelit_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, loadApprovedHealthyMembersForPagelit_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class sendInnerLetter_args implements org.apache.thrift.TBase<sendInnerLetter_args, sendInnerLetter_args._Fields>, java.io.Serializable, Cloneable, Comparable<sendInnerLetter_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sendInnerLetter_args");

    private static final org.apache.thrift.protocol.TField HEALTHY_USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("healthyUserId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("title", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("content", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new sendInnerLetter_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new sendInnerLetter_argsTupleSchemeFactory());
    }

    public String healthyUserId; // required
    public String title; // required
    public String content; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      HEALTHY_USER_ID((short)1, "healthyUserId"),
      TITLE((short)2, "title"),
      CONTENT((short)3, "content");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // HEALTHY_USER_ID
            return HEALTHY_USER_ID;
          case 2: // TITLE
            return TITLE;
          case 3: // CONTENT
            return CONTENT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.HEALTHY_USER_ID, new org.apache.thrift.meta_data.FieldMetaData("healthyUserId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TITLE, new org.apache.thrift.meta_data.FieldMetaData("title", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CONTENT, new org.apache.thrift.meta_data.FieldMetaData("content", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sendInnerLetter_args.class, metaDataMap);
    }

    public sendInnerLetter_args() {
    }

    public sendInnerLetter_args(
      String healthyUserId,
      String title,
      String content)
    {
      this();
      this.healthyUserId = healthyUserId;
      this.title = title;
      this.content = content;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendInnerLetter_args(sendInnerLetter_args other) {
      if (other.isSetHealthyUserId()) {
        this.healthyUserId = other.healthyUserId;
      }
      if (other.isSetTitle()) {
        this.title = other.title;
      }
      if (other.isSetContent()) {
        this.content = other.content;
      }
    }

    public sendInnerLetter_args deepCopy() {
      return new sendInnerLetter_args(this);
    }

    @Override
    public void clear() {
      this.healthyUserId = null;
      this.title = null;
      this.content = null;
    }

    public String getHealthyUserId() {
      return this.healthyUserId;
    }

    public sendInnerLetter_args setHealthyUserId(String healthyUserId) {
      this.healthyUserId = healthyUserId;
      return this;
    }

    public void unsetHealthyUserId() {
      this.healthyUserId = null;
    }

    /** Returns true if field healthyUserId is set (has been assigned a value) and false otherwise */
    public boolean isSetHealthyUserId() {
      return this.healthyUserId != null;
    }

    public void setHealthyUserIdIsSet(boolean value) {
      if (!value) {
        this.healthyUserId = null;
      }
    }

    public String getTitle() {
      return this.title;
    }

    public sendInnerLetter_args setTitle(String title) {
      this.title = title;
      return this;
    }

    public void unsetTitle() {
      this.title = null;
    }

    /** Returns true if field title is set (has been assigned a value) and false otherwise */
    public boolean isSetTitle() {
      return this.title != null;
    }

    public void setTitleIsSet(boolean value) {
      if (!value) {
        this.title = null;
      }
    }

    public String getContent() {
      return this.content;
    }

    public sendInnerLetter_args setContent(String content) {
      this.content = content;
      return this;
    }

    public void unsetContent() {
      this.content = null;
    }

    /** Returns true if field content is set (has been assigned a value) and false otherwise */
    public boolean isSetContent() {
      return this.content != null;
    }

    public void setContentIsSet(boolean value) {
      if (!value) {
        this.content = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case HEALTHY_USER_ID:
        if (value == null) {
          unsetHealthyUserId();
        } else {
          setHealthyUserId((String)value);
        }
        break;

      case TITLE:
        if (value == null) {
          unsetTitle();
        } else {
          setTitle((String)value);
        }
        break;

      case CONTENT:
        if (value == null) {
          unsetContent();
        } else {
          setContent((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case HEALTHY_USER_ID:
        return getHealthyUserId();

      case TITLE:
        return getTitle();

      case CONTENT:
        return getContent();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case HEALTHY_USER_ID:
        return isSetHealthyUserId();
      case TITLE:
        return isSetTitle();
      case CONTENT:
        return isSetContent();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sendInnerLetter_args)
        return this.equals((sendInnerLetter_args)that);
      return false;
    }

    public boolean equals(sendInnerLetter_args that) {
      if (that == null)
        return false;

      boolean this_present_healthyUserId = true && this.isSetHealthyUserId();
      boolean that_present_healthyUserId = true && that.isSetHealthyUserId();
      if (this_present_healthyUserId || that_present_healthyUserId) {
        if (!(this_present_healthyUserId && that_present_healthyUserId))
          return false;
        if (!this.healthyUserId.equals(that.healthyUserId))
          return false;
      }

      boolean this_present_title = true && this.isSetTitle();
      boolean that_present_title = true && that.isSetTitle();
      if (this_present_title || that_present_title) {
        if (!(this_present_title && that_present_title))
          return false;
        if (!this.title.equals(that.title))
          return false;
      }

      boolean this_present_content = true && this.isSetContent();
      boolean that_present_content = true && that.isSetContent();
      if (this_present_content || that_present_content) {
        if (!(this_present_content && that_present_content))
          return false;
        if (!this.content.equals(that.content))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_healthyUserId = true && (isSetHealthyUserId());
      list.add(present_healthyUserId);
      if (present_healthyUserId)
        list.add(healthyUserId);

      boolean present_title = true && (isSetTitle());
      list.add(present_title);
      if (present_title)
        list.add(title);

      boolean present_content = true && (isSetContent());
      list.add(present_content);
      if (present_content)
        list.add(content);

      return list.hashCode();
    }

    @Override
    public int compareTo(sendInnerLetter_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetHealthyUserId()).compareTo(other.isSetHealthyUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHealthyUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.healthyUserId, other.healthyUserId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTitle()).compareTo(other.isSetTitle());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTitle()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.title, other.title);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetContent()).compareTo(other.isSetContent());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetContent()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.content, other.content);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("sendInnerLetter_args(");
      boolean first = true;

      sb.append("healthyUserId:");
      if (this.healthyUserId == null) {
        sb.append("null");
      } else {
        sb.append(this.healthyUserId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("title:");
      if (this.title == null) {
        sb.append("null");
      } else {
        sb.append(this.title);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("content:");
      if (this.content == null) {
        sb.append("null");
      } else {
        sb.append(this.content);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sendInnerLetter_argsStandardSchemeFactory implements SchemeFactory {
      public sendInnerLetter_argsStandardScheme getScheme() {
        return new sendInnerLetter_argsStandardScheme();
      }
    }

    private static class sendInnerLetter_argsStandardScheme extends StandardScheme<sendInnerLetter_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sendInnerLetter_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // HEALTHY_USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.healthyUserId = iprot.readString();
                struct.setHealthyUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TITLE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.title = iprot.readString();
                struct.setTitleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // CONTENT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.content = iprot.readString();
                struct.setContentIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sendInnerLetter_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.healthyUserId != null) {
          oprot.writeFieldBegin(HEALTHY_USER_ID_FIELD_DESC);
          oprot.writeString(struct.healthyUserId);
          oprot.writeFieldEnd();
        }
        if (struct.title != null) {
          oprot.writeFieldBegin(TITLE_FIELD_DESC);
          oprot.writeString(struct.title);
          oprot.writeFieldEnd();
        }
        if (struct.content != null) {
          oprot.writeFieldBegin(CONTENT_FIELD_DESC);
          oprot.writeString(struct.content);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sendInnerLetter_argsTupleSchemeFactory implements SchemeFactory {
      public sendInnerLetter_argsTupleScheme getScheme() {
        return new sendInnerLetter_argsTupleScheme();
      }
    }

    private static class sendInnerLetter_argsTupleScheme extends TupleScheme<sendInnerLetter_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sendInnerLetter_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetHealthyUserId()) {
          optionals.set(0);
        }
        if (struct.isSetTitle()) {
          optionals.set(1);
        }
        if (struct.isSetContent()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetHealthyUserId()) {
          oprot.writeString(struct.healthyUserId);
        }
        if (struct.isSetTitle()) {
          oprot.writeString(struct.title);
        }
        if (struct.isSetContent()) {
          oprot.writeString(struct.content);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sendInnerLetter_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.healthyUserId = iprot.readString();
          struct.setHealthyUserIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.title = iprot.readString();
          struct.setTitleIsSet(true);
        }
        if (incoming.get(2)) {
          struct.content = iprot.readString();
          struct.setContentIsSet(true);
        }
      }
    }

  }

  public static class sendInnerLetter_result implements org.apache.thrift.TBase<sendInnerLetter_result, sendInnerLetter_result._Fields>, java.io.Serializable, Cloneable, Comparable<sendInnerLetter_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sendInnerLetter_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new sendInnerLetter_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new sendInnerLetter_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sendInnerLetter_result.class, metaDataMap);
    }

    public sendInnerLetter_result() {
    }

    public sendInnerLetter_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendInnerLetter_result(sendInnerLetter_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public sendInnerLetter_result deepCopy() {
      return new sendInnerLetter_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public sendInnerLetter_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sendInnerLetter_result)
        return this.equals((sendInnerLetter_result)that);
      return false;
    }

    public boolean equals(sendInnerLetter_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(sendInnerLetter_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("sendInnerLetter_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sendInnerLetter_resultStandardSchemeFactory implements SchemeFactory {
      public sendInnerLetter_resultStandardScheme getScheme() {
        return new sendInnerLetter_resultStandardScheme();
      }
    }

    private static class sendInnerLetter_resultStandardScheme extends StandardScheme<sendInnerLetter_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sendInnerLetter_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sendInnerLetter_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sendInnerLetter_resultTupleSchemeFactory implements SchemeFactory {
      public sendInnerLetter_resultTupleScheme getScheme() {
        return new sendInnerLetter_resultTupleScheme();
      }
    }

    private static class sendInnerLetter_resultTupleScheme extends TupleScheme<sendInnerLetter_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sendInnerLetter_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sendInnerLetter_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getHealthyDetail_args implements org.apache.thrift.TBase<getHealthyDetail_args, getHealthyDetail_args._Fields>, java.io.Serializable, Cloneable, Comparable<getHealthyDetail_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getHealthyDetail_args");

    private static final org.apache.thrift.protocol.TField HEALTHY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("healthyId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getHealthyDetail_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getHealthyDetail_argsTupleSchemeFactory());
    }

    public String healthyId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      HEALTHY_ID((short)1, "healthyId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // HEALTHY_ID
            return HEALTHY_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.HEALTHY_ID, new org.apache.thrift.meta_data.FieldMetaData("healthyId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getHealthyDetail_args.class, metaDataMap);
    }

    public getHealthyDetail_args() {
    }

    public getHealthyDetail_args(
      String healthyId)
    {
      this();
      this.healthyId = healthyId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getHealthyDetail_args(getHealthyDetail_args other) {
      if (other.isSetHealthyId()) {
        this.healthyId = other.healthyId;
      }
    }

    public getHealthyDetail_args deepCopy() {
      return new getHealthyDetail_args(this);
    }

    @Override
    public void clear() {
      this.healthyId = null;
    }

    public String getHealthyId() {
      return this.healthyId;
    }

    public getHealthyDetail_args setHealthyId(String healthyId) {
      this.healthyId = healthyId;
      return this;
    }

    public void unsetHealthyId() {
      this.healthyId = null;
    }

    /** Returns true if field healthyId is set (has been assigned a value) and false otherwise */
    public boolean isSetHealthyId() {
      return this.healthyId != null;
    }

    public void setHealthyIdIsSet(boolean value) {
      if (!value) {
        this.healthyId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case HEALTHY_ID:
        if (value == null) {
          unsetHealthyId();
        } else {
          setHealthyId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case HEALTHY_ID:
        return getHealthyId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case HEALTHY_ID:
        return isSetHealthyId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getHealthyDetail_args)
        return this.equals((getHealthyDetail_args)that);
      return false;
    }

    public boolean equals(getHealthyDetail_args that) {
      if (that == null)
        return false;

      boolean this_present_healthyId = true && this.isSetHealthyId();
      boolean that_present_healthyId = true && that.isSetHealthyId();
      if (this_present_healthyId || that_present_healthyId) {
        if (!(this_present_healthyId && that_present_healthyId))
          return false;
        if (!this.healthyId.equals(that.healthyId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_healthyId = true && (isSetHealthyId());
      list.add(present_healthyId);
      if (present_healthyId)
        list.add(healthyId);

      return list.hashCode();
    }

    @Override
    public int compareTo(getHealthyDetail_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetHealthyId()).compareTo(other.isSetHealthyId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHealthyId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.healthyId, other.healthyId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getHealthyDetail_args(");
      boolean first = true;

      sb.append("healthyId:");
      if (this.healthyId == null) {
        sb.append("null");
      } else {
        sb.append(this.healthyId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getHealthyDetail_argsStandardSchemeFactory implements SchemeFactory {
      public getHealthyDetail_argsStandardScheme getScheme() {
        return new getHealthyDetail_argsStandardScheme();
      }
    }

    private static class getHealthyDetail_argsStandardScheme extends StandardScheme<getHealthyDetail_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getHealthyDetail_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // HEALTHY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.healthyId = iprot.readString();
                struct.setHealthyIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getHealthyDetail_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.healthyId != null) {
          oprot.writeFieldBegin(HEALTHY_ID_FIELD_DESC);
          oprot.writeString(struct.healthyId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getHealthyDetail_argsTupleSchemeFactory implements SchemeFactory {
      public getHealthyDetail_argsTupleScheme getScheme() {
        return new getHealthyDetail_argsTupleScheme();
      }
    }

    private static class getHealthyDetail_argsTupleScheme extends TupleScheme<getHealthyDetail_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getHealthyDetail_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetHealthyId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetHealthyId()) {
          oprot.writeString(struct.healthyId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getHealthyDetail_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.healthyId = iprot.readString();
          struct.setHealthyIdIsSet(true);
        }
      }
    }

  }

  public static class getHealthyDetail_result implements org.apache.thrift.TBase<getHealthyDetail_result, getHealthyDetail_result._Fields>, java.io.Serializable, Cloneable, Comparable<getHealthyDetail_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getHealthyDetail_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getHealthyDetail_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getHealthyDetail_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getHealthyDetail_result.class, metaDataMap);
    }

    public getHealthyDetail_result() {
    }

    public getHealthyDetail_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getHealthyDetail_result(getHealthyDetail_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public getHealthyDetail_result deepCopy() {
      return new getHealthyDetail_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public getHealthyDetail_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getHealthyDetail_result)
        return this.equals((getHealthyDetail_result)that);
      return false;
    }

    public boolean equals(getHealthyDetail_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getHealthyDetail_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getHealthyDetail_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getHealthyDetail_resultStandardSchemeFactory implements SchemeFactory {
      public getHealthyDetail_resultStandardScheme getScheme() {
        return new getHealthyDetail_resultStandardScheme();
      }
    }

    private static class getHealthyDetail_resultStandardScheme extends StandardScheme<getHealthyDetail_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getHealthyDetail_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getHealthyDetail_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getHealthyDetail_resultTupleSchemeFactory implements SchemeFactory {
      public getHealthyDetail_resultTupleScheme getScheme() {
        return new getHealthyDetail_resultTupleScheme();
      }
    }

    private static class getHealthyDetail_resultTupleScheme extends TupleScheme<getHealthyDetail_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getHealthyDetail_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getHealthyDetail_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
