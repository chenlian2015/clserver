/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cnd.greencube.server.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-03-25")
public class MeetingService {

  /**
   * 会议服务类
   * @author 会议服务
   */
  public interface Iface {

    /**
     * 创建一个会议室
     * @param meetingName -- 会议名称
     * @param password -- 密码
     * @param topic -- 会议议题
     * @param maxPersonCount -- 最大与会人员数
     * @param meetingModel -- 会议模式 1-视频会议，2-传统会议模式
     * @param type 1-公共会议室，2-私人会议室
     * @param status 0-未开始，1-已开始，2-已结束
     * @param creatorId -- 创建者id
     * @param beginTime -- 开始时间
     * @param endTime -- 结束时间
     * 
     * @param meetingName
     * @param password
     * @param topic
     * @param maxPersonCount
     * @param meetingModel
     * @param type
     * @param status
     * @param creatorId
     * @param beginTime
     * @param endTime
     */
    public String createMeetRoot(String meetingName, String password, String topic, int maxPersonCount, int meetingModel, int type, int status, String creatorId, String beginTime, String endTime) throws org.apache.thrift.TException;

    /**
     * 开始一个会议
     * @param meetingId -- 会议室id
     * @return 返回成功与否标志
     * 
     * @param meetingId
     */
    public String startMeeting(String meetingId) throws org.apache.thrift.TException;

    /**
     * 关闭会议室
     * @param meetingId -- 会议室id
     * @return 返回成功与否标志
     * 
     * @param meetingId
     */
    public String closeMeeting(String meetingId) throws org.apache.thrift.TException;

    /**
     * 进入会议室
     * @param meetingId -- 会议id
     * @param userid -- 进入会议室人的id
     * @return -- 返回成功与否标志
     * 
     * @param meetingId
     * @param userid
     */
    public String enterMeeting(String meetingId, String userid) throws org.apache.thrift.TException;

    /**
     * 退出会议室
     * @param meetingId -- 会议室id
     * @param userid -- 退出会议室人的id
     * @return 返回成功与否标志
     * 
     * @param meetingId
     * @param userid
     */
    public String quitMeeting(String meetingId, String userid) throws org.apache.thrift.TException;

    /**
     * 要求一个人进入会议室
     * @param meetingId -- 会议室id
     * @param userId -- 用户id
     * @return 返回成功与否标志
     * 
     * @param meetingId
     * @param userId
     */
    public String inviteUser(String meetingId, String userId) throws org.apache.thrift.TException;

    /**
     * 设置会议室密码
     * @param meetingId -- 会议室id
     * @param password -- 会议室密码
     * @return 返回成功与否标志
     * 
     * @param meetingId
     * @param password
     */
    public String setMeetingPassword(String meetingId, String password) throws org.apache.thrift.TException;

    /**
     * 获取会议室消息
     * @param meetingId -- 会议室id
     * @return -- 返回成消息json数组
     * 
     * @param meetingId
     * @param pageNum
     */
    public String loadMeetingMessage(String meetingId, int pageNum) throws org.apache.thrift.TException;

    /**
     * 发送文本消息
     * @param mettingid -- 会议室id
     * @param parentMessageId -- 父消息id
     * @param posterId -- 发布者id
     * @param content -- 消息内容
     * @return 返回成功与否标志
     * 
     * @param meetingId
     * @param parentMessageid
     * @param posterId
     * @param content
     */
    public String postTextMessage(String meetingId, String parentMessageid, String posterId, String content) throws org.apache.thrift.TException;

    /**
     * 发送文本消息
     * @param mettingid -- 会议室id
     * @param parentMessageId -- 父消息id
     * @param posterId -- 发布者id
     * @param content -- 消息内容
     * @return 返回成功与否标志
     * 
     * @param meetingid
     * @param parentMessageid
     * @param posterId
     */
    public String postVoiceMessage(String meetingid, String parentMessageid, String posterId) throws org.apache.thrift.TException;

    /**
     * 对消息点赞
     * @param messageid -- 消息id
     * @return 返回成功与否标志
     * 
     * @param messageid
     */
    public String supportMessage(String messageid) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void createMeetRoot(String meetingName, String password, String topic, int maxPersonCount, int meetingModel, int type, int status, String creatorId, String beginTime, String endTime, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void startMeeting(String meetingId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void closeMeeting(String meetingId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void enterMeeting(String meetingId, String userid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void quitMeeting(String meetingId, String userid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void inviteUser(String meetingId, String userId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void setMeetingPassword(String meetingId, String password, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void loadMeetingMessage(String meetingId, int pageNum, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void postTextMessage(String meetingId, String parentMessageid, String posterId, String content, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void postVoiceMessage(String meetingid, String parentMessageid, String posterId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void supportMessage(String messageid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public String createMeetRoot(String meetingName, String password, String topic, int maxPersonCount, int meetingModel, int type, int status, String creatorId, String beginTime, String endTime) throws org.apache.thrift.TException
    {
      send_createMeetRoot(meetingName, password, topic, maxPersonCount, meetingModel, type, status, creatorId, beginTime, endTime);
      return recv_createMeetRoot();
    }

    public void send_createMeetRoot(String meetingName, String password, String topic, int maxPersonCount, int meetingModel, int type, int status, String creatorId, String beginTime, String endTime) throws org.apache.thrift.TException
    {
      createMeetRoot_args args = new createMeetRoot_args();
      args.setMeetingName(meetingName);
      args.setPassword(password);
      args.setTopic(topic);
      args.setMaxPersonCount(maxPersonCount);
      args.setMeetingModel(meetingModel);
      args.setType(type);
      args.setStatus(status);
      args.setCreatorId(creatorId);
      args.setBeginTime(beginTime);
      args.setEndTime(endTime);
      sendBase("createMeetRoot", args);
    }

    public String recv_createMeetRoot() throws org.apache.thrift.TException
    {
      createMeetRoot_result result = new createMeetRoot_result();
      receiveBase(result, "createMeetRoot");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "createMeetRoot failed: unknown result");
    }

    public String startMeeting(String meetingId) throws org.apache.thrift.TException
    {
      send_startMeeting(meetingId);
      return recv_startMeeting();
    }

    public void send_startMeeting(String meetingId) throws org.apache.thrift.TException
    {
      startMeeting_args args = new startMeeting_args();
      args.setMeetingId(meetingId);
      sendBase("startMeeting", args);
    }

    public String recv_startMeeting() throws org.apache.thrift.TException
    {
      startMeeting_result result = new startMeeting_result();
      receiveBase(result, "startMeeting");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "startMeeting failed: unknown result");
    }

    public String closeMeeting(String meetingId) throws org.apache.thrift.TException
    {
      send_closeMeeting(meetingId);
      return recv_closeMeeting();
    }

    public void send_closeMeeting(String meetingId) throws org.apache.thrift.TException
    {
      closeMeeting_args args = new closeMeeting_args();
      args.setMeetingId(meetingId);
      sendBase("closeMeeting", args);
    }

    public String recv_closeMeeting() throws org.apache.thrift.TException
    {
      closeMeeting_result result = new closeMeeting_result();
      receiveBase(result, "closeMeeting");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "closeMeeting failed: unknown result");
    }

    public String enterMeeting(String meetingId, String userid) throws org.apache.thrift.TException
    {
      send_enterMeeting(meetingId, userid);
      return recv_enterMeeting();
    }

    public void send_enterMeeting(String meetingId, String userid) throws org.apache.thrift.TException
    {
      enterMeeting_args args = new enterMeeting_args();
      args.setMeetingId(meetingId);
      args.setUserid(userid);
      sendBase("enterMeeting", args);
    }

    public String recv_enterMeeting() throws org.apache.thrift.TException
    {
      enterMeeting_result result = new enterMeeting_result();
      receiveBase(result, "enterMeeting");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "enterMeeting failed: unknown result");
    }

    public String quitMeeting(String meetingId, String userid) throws org.apache.thrift.TException
    {
      send_quitMeeting(meetingId, userid);
      return recv_quitMeeting();
    }

    public void send_quitMeeting(String meetingId, String userid) throws org.apache.thrift.TException
    {
      quitMeeting_args args = new quitMeeting_args();
      args.setMeetingId(meetingId);
      args.setUserid(userid);
      sendBase("quitMeeting", args);
    }

    public String recv_quitMeeting() throws org.apache.thrift.TException
    {
      quitMeeting_result result = new quitMeeting_result();
      receiveBase(result, "quitMeeting");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "quitMeeting failed: unknown result");
    }

    public String inviteUser(String meetingId, String userId) throws org.apache.thrift.TException
    {
      send_inviteUser(meetingId, userId);
      return recv_inviteUser();
    }

    public void send_inviteUser(String meetingId, String userId) throws org.apache.thrift.TException
    {
      inviteUser_args args = new inviteUser_args();
      args.setMeetingId(meetingId);
      args.setUserId(userId);
      sendBase("inviteUser", args);
    }

    public String recv_inviteUser() throws org.apache.thrift.TException
    {
      inviteUser_result result = new inviteUser_result();
      receiveBase(result, "inviteUser");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "inviteUser failed: unknown result");
    }

    public String setMeetingPassword(String meetingId, String password) throws org.apache.thrift.TException
    {
      send_setMeetingPassword(meetingId, password);
      return recv_setMeetingPassword();
    }

    public void send_setMeetingPassword(String meetingId, String password) throws org.apache.thrift.TException
    {
      setMeetingPassword_args args = new setMeetingPassword_args();
      args.setMeetingId(meetingId);
      args.setPassword(password);
      sendBase("setMeetingPassword", args);
    }

    public String recv_setMeetingPassword() throws org.apache.thrift.TException
    {
      setMeetingPassword_result result = new setMeetingPassword_result();
      receiveBase(result, "setMeetingPassword");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "setMeetingPassword failed: unknown result");
    }

    public String loadMeetingMessage(String meetingId, int pageNum) throws org.apache.thrift.TException
    {
      send_loadMeetingMessage(meetingId, pageNum);
      return recv_loadMeetingMessage();
    }

    public void send_loadMeetingMessage(String meetingId, int pageNum) throws org.apache.thrift.TException
    {
      loadMeetingMessage_args args = new loadMeetingMessage_args();
      args.setMeetingId(meetingId);
      args.setPageNum(pageNum);
      sendBase("loadMeetingMessage", args);
    }

    public String recv_loadMeetingMessage() throws org.apache.thrift.TException
    {
      loadMeetingMessage_result result = new loadMeetingMessage_result();
      receiveBase(result, "loadMeetingMessage");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "loadMeetingMessage failed: unknown result");
    }

    public String postTextMessage(String meetingId, String parentMessageid, String posterId, String content) throws org.apache.thrift.TException
    {
      send_postTextMessage(meetingId, parentMessageid, posterId, content);
      return recv_postTextMessage();
    }

    public void send_postTextMessage(String meetingId, String parentMessageid, String posterId, String content) throws org.apache.thrift.TException
    {
      postTextMessage_args args = new postTextMessage_args();
      args.setMeetingId(meetingId);
      args.setParentMessageid(parentMessageid);
      args.setPosterId(posterId);
      args.setContent(content);
      sendBase("postTextMessage", args);
    }

    public String recv_postTextMessage() throws org.apache.thrift.TException
    {
      postTextMessage_result result = new postTextMessage_result();
      receiveBase(result, "postTextMessage");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "postTextMessage failed: unknown result");
    }

    public String postVoiceMessage(String meetingid, String parentMessageid, String posterId) throws org.apache.thrift.TException
    {
      send_postVoiceMessage(meetingid, parentMessageid, posterId);
      return recv_postVoiceMessage();
    }

    public void send_postVoiceMessage(String meetingid, String parentMessageid, String posterId) throws org.apache.thrift.TException
    {
      postVoiceMessage_args args = new postVoiceMessage_args();
      args.setMeetingid(meetingid);
      args.setParentMessageid(parentMessageid);
      args.setPosterId(posterId);
      sendBase("postVoiceMessage", args);
    }

    public String recv_postVoiceMessage() throws org.apache.thrift.TException
    {
      postVoiceMessage_result result = new postVoiceMessage_result();
      receiveBase(result, "postVoiceMessage");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "postVoiceMessage failed: unknown result");
    }

    public String supportMessage(String messageid) throws org.apache.thrift.TException
    {
      send_supportMessage(messageid);
      return recv_supportMessage();
    }

    public void send_supportMessage(String messageid) throws org.apache.thrift.TException
    {
      supportMessage_args args = new supportMessage_args();
      args.setMessageid(messageid);
      sendBase("supportMessage", args);
    }

    public String recv_supportMessage() throws org.apache.thrift.TException
    {
      supportMessage_result result = new supportMessage_result();
      receiveBase(result, "supportMessage");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "supportMessage failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void createMeetRoot(String meetingName, String password, String topic, int maxPersonCount, int meetingModel, int type, int status, String creatorId, String beginTime, String endTime, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      createMeetRoot_call method_call = new createMeetRoot_call(meetingName, password, topic, maxPersonCount, meetingModel, type, status, creatorId, beginTime, endTime, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class createMeetRoot_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String meetingName;
      private String password;
      private String topic;
      private int maxPersonCount;
      private int meetingModel;
      private int type;
      private int status;
      private String creatorId;
      private String beginTime;
      private String endTime;
      public createMeetRoot_call(String meetingName, String password, String topic, int maxPersonCount, int meetingModel, int type, int status, String creatorId, String beginTime, String endTime, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.meetingName = meetingName;
        this.password = password;
        this.topic = topic;
        this.maxPersonCount = maxPersonCount;
        this.meetingModel = meetingModel;
        this.type = type;
        this.status = status;
        this.creatorId = creatorId;
        this.beginTime = beginTime;
        this.endTime = endTime;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createMeetRoot", org.apache.thrift.protocol.TMessageType.CALL, 0));
        createMeetRoot_args args = new createMeetRoot_args();
        args.setMeetingName(meetingName);
        args.setPassword(password);
        args.setTopic(topic);
        args.setMaxPersonCount(maxPersonCount);
        args.setMeetingModel(meetingModel);
        args.setType(type);
        args.setStatus(status);
        args.setCreatorId(creatorId);
        args.setBeginTime(beginTime);
        args.setEndTime(endTime);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_createMeetRoot();
      }
    }

    public void startMeeting(String meetingId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      startMeeting_call method_call = new startMeeting_call(meetingId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class startMeeting_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String meetingId;
      public startMeeting_call(String meetingId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.meetingId = meetingId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("startMeeting", org.apache.thrift.protocol.TMessageType.CALL, 0));
        startMeeting_args args = new startMeeting_args();
        args.setMeetingId(meetingId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_startMeeting();
      }
    }

    public void closeMeeting(String meetingId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      closeMeeting_call method_call = new closeMeeting_call(meetingId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class closeMeeting_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String meetingId;
      public closeMeeting_call(String meetingId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.meetingId = meetingId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("closeMeeting", org.apache.thrift.protocol.TMessageType.CALL, 0));
        closeMeeting_args args = new closeMeeting_args();
        args.setMeetingId(meetingId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_closeMeeting();
      }
    }

    public void enterMeeting(String meetingId, String userid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      enterMeeting_call method_call = new enterMeeting_call(meetingId, userid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class enterMeeting_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String meetingId;
      private String userid;
      public enterMeeting_call(String meetingId, String userid, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.meetingId = meetingId;
        this.userid = userid;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("enterMeeting", org.apache.thrift.protocol.TMessageType.CALL, 0));
        enterMeeting_args args = new enterMeeting_args();
        args.setMeetingId(meetingId);
        args.setUserid(userid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_enterMeeting();
      }
    }

    public void quitMeeting(String meetingId, String userid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      quitMeeting_call method_call = new quitMeeting_call(meetingId, userid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class quitMeeting_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String meetingId;
      private String userid;
      public quitMeeting_call(String meetingId, String userid, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.meetingId = meetingId;
        this.userid = userid;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("quitMeeting", org.apache.thrift.protocol.TMessageType.CALL, 0));
        quitMeeting_args args = new quitMeeting_args();
        args.setMeetingId(meetingId);
        args.setUserid(userid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_quitMeeting();
      }
    }

    public void inviteUser(String meetingId, String userId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      inviteUser_call method_call = new inviteUser_call(meetingId, userId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class inviteUser_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String meetingId;
      private String userId;
      public inviteUser_call(String meetingId, String userId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.meetingId = meetingId;
        this.userId = userId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("inviteUser", org.apache.thrift.protocol.TMessageType.CALL, 0));
        inviteUser_args args = new inviteUser_args();
        args.setMeetingId(meetingId);
        args.setUserId(userId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_inviteUser();
      }
    }

    public void setMeetingPassword(String meetingId, String password, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      setMeetingPassword_call method_call = new setMeetingPassword_call(meetingId, password, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class setMeetingPassword_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String meetingId;
      private String password;
      public setMeetingPassword_call(String meetingId, String password, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.meetingId = meetingId;
        this.password = password;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setMeetingPassword", org.apache.thrift.protocol.TMessageType.CALL, 0));
        setMeetingPassword_args args = new setMeetingPassword_args();
        args.setMeetingId(meetingId);
        args.setPassword(password);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_setMeetingPassword();
      }
    }

    public void loadMeetingMessage(String meetingId, int pageNum, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      loadMeetingMessage_call method_call = new loadMeetingMessage_call(meetingId, pageNum, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class loadMeetingMessage_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String meetingId;
      private int pageNum;
      public loadMeetingMessage_call(String meetingId, int pageNum, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.meetingId = meetingId;
        this.pageNum = pageNum;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("loadMeetingMessage", org.apache.thrift.protocol.TMessageType.CALL, 0));
        loadMeetingMessage_args args = new loadMeetingMessage_args();
        args.setMeetingId(meetingId);
        args.setPageNum(pageNum);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_loadMeetingMessage();
      }
    }

    public void postTextMessage(String meetingId, String parentMessageid, String posterId, String content, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      postTextMessage_call method_call = new postTextMessage_call(meetingId, parentMessageid, posterId, content, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class postTextMessage_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String meetingId;
      private String parentMessageid;
      private String posterId;
      private String content;
      public postTextMessage_call(String meetingId, String parentMessageid, String posterId, String content, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.meetingId = meetingId;
        this.parentMessageid = parentMessageid;
        this.posterId = posterId;
        this.content = content;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("postTextMessage", org.apache.thrift.protocol.TMessageType.CALL, 0));
        postTextMessage_args args = new postTextMessage_args();
        args.setMeetingId(meetingId);
        args.setParentMessageid(parentMessageid);
        args.setPosterId(posterId);
        args.setContent(content);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_postTextMessage();
      }
    }

    public void postVoiceMessage(String meetingid, String parentMessageid, String posterId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      postVoiceMessage_call method_call = new postVoiceMessage_call(meetingid, parentMessageid, posterId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class postVoiceMessage_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String meetingid;
      private String parentMessageid;
      private String posterId;
      public postVoiceMessage_call(String meetingid, String parentMessageid, String posterId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.meetingid = meetingid;
        this.parentMessageid = parentMessageid;
        this.posterId = posterId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("postVoiceMessage", org.apache.thrift.protocol.TMessageType.CALL, 0));
        postVoiceMessage_args args = new postVoiceMessage_args();
        args.setMeetingid(meetingid);
        args.setParentMessageid(parentMessageid);
        args.setPosterId(posterId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_postVoiceMessage();
      }
    }

    public void supportMessage(String messageid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      supportMessage_call method_call = new supportMessage_call(messageid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class supportMessage_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String messageid;
      public supportMessage_call(String messageid, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.messageid = messageid;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("supportMessage", org.apache.thrift.protocol.TMessageType.CALL, 0));
        supportMessage_args args = new supportMessage_args();
        args.setMessageid(messageid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_supportMessage();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("createMeetRoot", new createMeetRoot());
      processMap.put("startMeeting", new startMeeting());
      processMap.put("closeMeeting", new closeMeeting());
      processMap.put("enterMeeting", new enterMeeting());
      processMap.put("quitMeeting", new quitMeeting());
      processMap.put("inviteUser", new inviteUser());
      processMap.put("setMeetingPassword", new setMeetingPassword());
      processMap.put("loadMeetingMessage", new loadMeetingMessage());
      processMap.put("postTextMessage", new postTextMessage());
      processMap.put("postVoiceMessage", new postVoiceMessage());
      processMap.put("supportMessage", new supportMessage());
      return processMap;
    }

    public static class createMeetRoot<I extends Iface> extends org.apache.thrift.ProcessFunction<I, createMeetRoot_args> {
      public createMeetRoot() {
        super("createMeetRoot");
      }

      public createMeetRoot_args getEmptyArgsInstance() {
        return new createMeetRoot_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public createMeetRoot_result getResult(I iface, createMeetRoot_args args) throws org.apache.thrift.TException {
        createMeetRoot_result result = new createMeetRoot_result();
        result.success = iface.createMeetRoot(args.meetingName, args.password, args.topic, args.maxPersonCount, args.meetingModel, args.type, args.status, args.creatorId, args.beginTime, args.endTime);
        return result;
      }
    }

    public static class startMeeting<I extends Iface> extends org.apache.thrift.ProcessFunction<I, startMeeting_args> {
      public startMeeting() {
        super("startMeeting");
      }

      public startMeeting_args getEmptyArgsInstance() {
        return new startMeeting_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public startMeeting_result getResult(I iface, startMeeting_args args) throws org.apache.thrift.TException {
        startMeeting_result result = new startMeeting_result();
        result.success = iface.startMeeting(args.meetingId);
        return result;
      }
    }

    public static class closeMeeting<I extends Iface> extends org.apache.thrift.ProcessFunction<I, closeMeeting_args> {
      public closeMeeting() {
        super("closeMeeting");
      }

      public closeMeeting_args getEmptyArgsInstance() {
        return new closeMeeting_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public closeMeeting_result getResult(I iface, closeMeeting_args args) throws org.apache.thrift.TException {
        closeMeeting_result result = new closeMeeting_result();
        result.success = iface.closeMeeting(args.meetingId);
        return result;
      }
    }

    public static class enterMeeting<I extends Iface> extends org.apache.thrift.ProcessFunction<I, enterMeeting_args> {
      public enterMeeting() {
        super("enterMeeting");
      }

      public enterMeeting_args getEmptyArgsInstance() {
        return new enterMeeting_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public enterMeeting_result getResult(I iface, enterMeeting_args args) throws org.apache.thrift.TException {
        enterMeeting_result result = new enterMeeting_result();
        result.success = iface.enterMeeting(args.meetingId, args.userid);
        return result;
      }
    }

    public static class quitMeeting<I extends Iface> extends org.apache.thrift.ProcessFunction<I, quitMeeting_args> {
      public quitMeeting() {
        super("quitMeeting");
      }

      public quitMeeting_args getEmptyArgsInstance() {
        return new quitMeeting_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public quitMeeting_result getResult(I iface, quitMeeting_args args) throws org.apache.thrift.TException {
        quitMeeting_result result = new quitMeeting_result();
        result.success = iface.quitMeeting(args.meetingId, args.userid);
        return result;
      }
    }

    public static class inviteUser<I extends Iface> extends org.apache.thrift.ProcessFunction<I, inviteUser_args> {
      public inviteUser() {
        super("inviteUser");
      }

      public inviteUser_args getEmptyArgsInstance() {
        return new inviteUser_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public inviteUser_result getResult(I iface, inviteUser_args args) throws org.apache.thrift.TException {
        inviteUser_result result = new inviteUser_result();
        result.success = iface.inviteUser(args.meetingId, args.userId);
        return result;
      }
    }

    public static class setMeetingPassword<I extends Iface> extends org.apache.thrift.ProcessFunction<I, setMeetingPassword_args> {
      public setMeetingPassword() {
        super("setMeetingPassword");
      }

      public setMeetingPassword_args getEmptyArgsInstance() {
        return new setMeetingPassword_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public setMeetingPassword_result getResult(I iface, setMeetingPassword_args args) throws org.apache.thrift.TException {
        setMeetingPassword_result result = new setMeetingPassword_result();
        result.success = iface.setMeetingPassword(args.meetingId, args.password);
        return result;
      }
    }

    public static class loadMeetingMessage<I extends Iface> extends org.apache.thrift.ProcessFunction<I, loadMeetingMessage_args> {
      public loadMeetingMessage() {
        super("loadMeetingMessage");
      }

      public loadMeetingMessage_args getEmptyArgsInstance() {
        return new loadMeetingMessage_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public loadMeetingMessage_result getResult(I iface, loadMeetingMessage_args args) throws org.apache.thrift.TException {
        loadMeetingMessage_result result = new loadMeetingMessage_result();
        result.success = iface.loadMeetingMessage(args.meetingId, args.pageNum);
        return result;
      }
    }

    public static class postTextMessage<I extends Iface> extends org.apache.thrift.ProcessFunction<I, postTextMessage_args> {
      public postTextMessage() {
        super("postTextMessage");
      }

      public postTextMessage_args getEmptyArgsInstance() {
        return new postTextMessage_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public postTextMessage_result getResult(I iface, postTextMessage_args args) throws org.apache.thrift.TException {
        postTextMessage_result result = new postTextMessage_result();
        result.success = iface.postTextMessage(args.meetingId, args.parentMessageid, args.posterId, args.content);
        return result;
      }
    }

    public static class postVoiceMessage<I extends Iface> extends org.apache.thrift.ProcessFunction<I, postVoiceMessage_args> {
      public postVoiceMessage() {
        super("postVoiceMessage");
      }

      public postVoiceMessage_args getEmptyArgsInstance() {
        return new postVoiceMessage_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public postVoiceMessage_result getResult(I iface, postVoiceMessage_args args) throws org.apache.thrift.TException {
        postVoiceMessage_result result = new postVoiceMessage_result();
        result.success = iface.postVoiceMessage(args.meetingid, args.parentMessageid, args.posterId);
        return result;
      }
    }

    public static class supportMessage<I extends Iface> extends org.apache.thrift.ProcessFunction<I, supportMessage_args> {
      public supportMessage() {
        super("supportMessage");
      }

      public supportMessage_args getEmptyArgsInstance() {
        return new supportMessage_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public supportMessage_result getResult(I iface, supportMessage_args args) throws org.apache.thrift.TException {
        supportMessage_result result = new supportMessage_result();
        result.success = iface.supportMessage(args.messageid);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("createMeetRoot", new createMeetRoot());
      processMap.put("startMeeting", new startMeeting());
      processMap.put("closeMeeting", new closeMeeting());
      processMap.put("enterMeeting", new enterMeeting());
      processMap.put("quitMeeting", new quitMeeting());
      processMap.put("inviteUser", new inviteUser());
      processMap.put("setMeetingPassword", new setMeetingPassword());
      processMap.put("loadMeetingMessage", new loadMeetingMessage());
      processMap.put("postTextMessage", new postTextMessage());
      processMap.put("postVoiceMessage", new postVoiceMessage());
      processMap.put("supportMessage", new supportMessage());
      return processMap;
    }

    public static class createMeetRoot<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, createMeetRoot_args, String> {
      public createMeetRoot() {
        super("createMeetRoot");
      }

      public createMeetRoot_args getEmptyArgsInstance() {
        return new createMeetRoot_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            createMeetRoot_result result = new createMeetRoot_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            createMeetRoot_result result = new createMeetRoot_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, createMeetRoot_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.createMeetRoot(args.meetingName, args.password, args.topic, args.maxPersonCount, args.meetingModel, args.type, args.status, args.creatorId, args.beginTime, args.endTime,resultHandler);
      }
    }

    public static class startMeeting<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, startMeeting_args, String> {
      public startMeeting() {
        super("startMeeting");
      }

      public startMeeting_args getEmptyArgsInstance() {
        return new startMeeting_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            startMeeting_result result = new startMeeting_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            startMeeting_result result = new startMeeting_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, startMeeting_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.startMeeting(args.meetingId,resultHandler);
      }
    }

    public static class closeMeeting<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, closeMeeting_args, String> {
      public closeMeeting() {
        super("closeMeeting");
      }

      public closeMeeting_args getEmptyArgsInstance() {
        return new closeMeeting_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            closeMeeting_result result = new closeMeeting_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            closeMeeting_result result = new closeMeeting_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, closeMeeting_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.closeMeeting(args.meetingId,resultHandler);
      }
    }

    public static class enterMeeting<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, enterMeeting_args, String> {
      public enterMeeting() {
        super("enterMeeting");
      }

      public enterMeeting_args getEmptyArgsInstance() {
        return new enterMeeting_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            enterMeeting_result result = new enterMeeting_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            enterMeeting_result result = new enterMeeting_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, enterMeeting_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.enterMeeting(args.meetingId, args.userid,resultHandler);
      }
    }

    public static class quitMeeting<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, quitMeeting_args, String> {
      public quitMeeting() {
        super("quitMeeting");
      }

      public quitMeeting_args getEmptyArgsInstance() {
        return new quitMeeting_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            quitMeeting_result result = new quitMeeting_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            quitMeeting_result result = new quitMeeting_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, quitMeeting_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.quitMeeting(args.meetingId, args.userid,resultHandler);
      }
    }

    public static class inviteUser<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, inviteUser_args, String> {
      public inviteUser() {
        super("inviteUser");
      }

      public inviteUser_args getEmptyArgsInstance() {
        return new inviteUser_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            inviteUser_result result = new inviteUser_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            inviteUser_result result = new inviteUser_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, inviteUser_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.inviteUser(args.meetingId, args.userId,resultHandler);
      }
    }

    public static class setMeetingPassword<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, setMeetingPassword_args, String> {
      public setMeetingPassword() {
        super("setMeetingPassword");
      }

      public setMeetingPassword_args getEmptyArgsInstance() {
        return new setMeetingPassword_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            setMeetingPassword_result result = new setMeetingPassword_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            setMeetingPassword_result result = new setMeetingPassword_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, setMeetingPassword_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.setMeetingPassword(args.meetingId, args.password,resultHandler);
      }
    }

    public static class loadMeetingMessage<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, loadMeetingMessage_args, String> {
      public loadMeetingMessage() {
        super("loadMeetingMessage");
      }

      public loadMeetingMessage_args getEmptyArgsInstance() {
        return new loadMeetingMessage_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            loadMeetingMessage_result result = new loadMeetingMessage_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            loadMeetingMessage_result result = new loadMeetingMessage_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, loadMeetingMessage_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.loadMeetingMessage(args.meetingId, args.pageNum,resultHandler);
      }
    }

    public static class postTextMessage<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, postTextMessage_args, String> {
      public postTextMessage() {
        super("postTextMessage");
      }

      public postTextMessage_args getEmptyArgsInstance() {
        return new postTextMessage_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            postTextMessage_result result = new postTextMessage_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            postTextMessage_result result = new postTextMessage_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, postTextMessage_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.postTextMessage(args.meetingId, args.parentMessageid, args.posterId, args.content,resultHandler);
      }
    }

    public static class postVoiceMessage<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, postVoiceMessage_args, String> {
      public postVoiceMessage() {
        super("postVoiceMessage");
      }

      public postVoiceMessage_args getEmptyArgsInstance() {
        return new postVoiceMessage_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            postVoiceMessage_result result = new postVoiceMessage_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            postVoiceMessage_result result = new postVoiceMessage_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, postVoiceMessage_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.postVoiceMessage(args.meetingid, args.parentMessageid, args.posterId,resultHandler);
      }
    }

    public static class supportMessage<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, supportMessage_args, String> {
      public supportMessage() {
        super("supportMessage");
      }

      public supportMessage_args getEmptyArgsInstance() {
        return new supportMessage_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            supportMessage_result result = new supportMessage_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            supportMessage_result result = new supportMessage_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, supportMessage_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.supportMessage(args.messageid,resultHandler);
      }
    }

  }

  public static class createMeetRoot_args implements org.apache.thrift.TBase<createMeetRoot_args, createMeetRoot_args._Fields>, java.io.Serializable, Cloneable, Comparable<createMeetRoot_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createMeetRoot_args");

    private static final org.apache.thrift.protocol.TField MEETING_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("meetingName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("password", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField TOPIC_FIELD_DESC = new org.apache.thrift.protocol.TField("topic", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField MAX_PERSON_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("maxPersonCount", org.apache.thrift.protocol.TType.I32, (short)4);
    private static final org.apache.thrift.protocol.TField MEETING_MODEL_FIELD_DESC = new org.apache.thrift.protocol.TField("meetingModel", org.apache.thrift.protocol.TType.I32, (short)5);
    private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)6);
    private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)7);
    private static final org.apache.thrift.protocol.TField CREATOR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("creatorId", org.apache.thrift.protocol.TType.STRING, (short)8);
    private static final org.apache.thrift.protocol.TField BEGIN_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("beginTime", org.apache.thrift.protocol.TType.STRING, (short)9);
    private static final org.apache.thrift.protocol.TField END_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("endTime", org.apache.thrift.protocol.TType.STRING, (short)10);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createMeetRoot_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createMeetRoot_argsTupleSchemeFactory());
    }

    public String meetingName; // required
    public String password; // required
    public String topic; // required
    public int maxPersonCount; // required
    public int meetingModel; // required
    public int type; // required
    public int status; // required
    public String creatorId; // required
    public String beginTime; // required
    public String endTime; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MEETING_NAME((short)1, "meetingName"),
      PASSWORD((short)2, "password"),
      TOPIC((short)3, "topic"),
      MAX_PERSON_COUNT((short)4, "maxPersonCount"),
      MEETING_MODEL((short)5, "meetingModel"),
      TYPE((short)6, "type"),
      STATUS((short)7, "status"),
      CREATOR_ID((short)8, "creatorId"),
      BEGIN_TIME((short)9, "beginTime"),
      END_TIME((short)10, "endTime");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MEETING_NAME
            return MEETING_NAME;
          case 2: // PASSWORD
            return PASSWORD;
          case 3: // TOPIC
            return TOPIC;
          case 4: // MAX_PERSON_COUNT
            return MAX_PERSON_COUNT;
          case 5: // MEETING_MODEL
            return MEETING_MODEL;
          case 6: // TYPE
            return TYPE;
          case 7: // STATUS
            return STATUS;
          case 8: // CREATOR_ID
            return CREATOR_ID;
          case 9: // BEGIN_TIME
            return BEGIN_TIME;
          case 10: // END_TIME
            return END_TIME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __MAXPERSONCOUNT_ISSET_ID = 0;
    private static final int __MEETINGMODEL_ISSET_ID = 1;
    private static final int __TYPE_ISSET_ID = 2;
    private static final int __STATUS_ISSET_ID = 3;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MEETING_NAME, new org.apache.thrift.meta_data.FieldMetaData("meetingName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("password", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TOPIC, new org.apache.thrift.meta_data.FieldMetaData("topic", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MAX_PERSON_COUNT, new org.apache.thrift.meta_data.FieldMetaData("maxPersonCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.MEETING_MODEL, new org.apache.thrift.meta_data.FieldMetaData("meetingModel", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.CREATOR_ID, new org.apache.thrift.meta_data.FieldMetaData("creatorId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.BEGIN_TIME, new org.apache.thrift.meta_data.FieldMetaData("beginTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.END_TIME, new org.apache.thrift.meta_data.FieldMetaData("endTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createMeetRoot_args.class, metaDataMap);
    }

    public createMeetRoot_args() {
    }

    public createMeetRoot_args(
      String meetingName,
      String password,
      String topic,
      int maxPersonCount,
      int meetingModel,
      int type,
      int status,
      String creatorId,
      String beginTime,
      String endTime)
    {
      this();
      this.meetingName = meetingName;
      this.password = password;
      this.topic = topic;
      this.maxPersonCount = maxPersonCount;
      setMaxPersonCountIsSet(true);
      this.meetingModel = meetingModel;
      setMeetingModelIsSet(true);
      this.type = type;
      setTypeIsSet(true);
      this.status = status;
      setStatusIsSet(true);
      this.creatorId = creatorId;
      this.beginTime = beginTime;
      this.endTime = endTime;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createMeetRoot_args(createMeetRoot_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetMeetingName()) {
        this.meetingName = other.meetingName;
      }
      if (other.isSetPassword()) {
        this.password = other.password;
      }
      if (other.isSetTopic()) {
        this.topic = other.topic;
      }
      this.maxPersonCount = other.maxPersonCount;
      this.meetingModel = other.meetingModel;
      this.type = other.type;
      this.status = other.status;
      if (other.isSetCreatorId()) {
        this.creatorId = other.creatorId;
      }
      if (other.isSetBeginTime()) {
        this.beginTime = other.beginTime;
      }
      if (other.isSetEndTime()) {
        this.endTime = other.endTime;
      }
    }

    public createMeetRoot_args deepCopy() {
      return new createMeetRoot_args(this);
    }

    @Override
    public void clear() {
      this.meetingName = null;
      this.password = null;
      this.topic = null;
      setMaxPersonCountIsSet(false);
      this.maxPersonCount = 0;
      setMeetingModelIsSet(false);
      this.meetingModel = 0;
      setTypeIsSet(false);
      this.type = 0;
      setStatusIsSet(false);
      this.status = 0;
      this.creatorId = null;
      this.beginTime = null;
      this.endTime = null;
    }

    public String getMeetingName() {
      return this.meetingName;
    }

    public createMeetRoot_args setMeetingName(String meetingName) {
      this.meetingName = meetingName;
      return this;
    }

    public void unsetMeetingName() {
      this.meetingName = null;
    }

    /** Returns true if field meetingName is set (has been assigned a value) and false otherwise */
    public boolean isSetMeetingName() {
      return this.meetingName != null;
    }

    public void setMeetingNameIsSet(boolean value) {
      if (!value) {
        this.meetingName = null;
      }
    }

    public String getPassword() {
      return this.password;
    }

    public createMeetRoot_args setPassword(String password) {
      this.password = password;
      return this;
    }

    public void unsetPassword() {
      this.password = null;
    }

    /** Returns true if field password is set (has been assigned a value) and false otherwise */
    public boolean isSetPassword() {
      return this.password != null;
    }

    public void setPasswordIsSet(boolean value) {
      if (!value) {
        this.password = null;
      }
    }

    public String getTopic() {
      return this.topic;
    }

    public createMeetRoot_args setTopic(String topic) {
      this.topic = topic;
      return this;
    }

    public void unsetTopic() {
      this.topic = null;
    }

    /** Returns true if field topic is set (has been assigned a value) and false otherwise */
    public boolean isSetTopic() {
      return this.topic != null;
    }

    public void setTopicIsSet(boolean value) {
      if (!value) {
        this.topic = null;
      }
    }

    public int getMaxPersonCount() {
      return this.maxPersonCount;
    }

    public createMeetRoot_args setMaxPersonCount(int maxPersonCount) {
      this.maxPersonCount = maxPersonCount;
      setMaxPersonCountIsSet(true);
      return this;
    }

    public void unsetMaxPersonCount() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAXPERSONCOUNT_ISSET_ID);
    }

    /** Returns true if field maxPersonCount is set (has been assigned a value) and false otherwise */
    public boolean isSetMaxPersonCount() {
      return EncodingUtils.testBit(__isset_bitfield, __MAXPERSONCOUNT_ISSET_ID);
    }

    public void setMaxPersonCountIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAXPERSONCOUNT_ISSET_ID, value);
    }

    public int getMeetingModel() {
      return this.meetingModel;
    }

    public createMeetRoot_args setMeetingModel(int meetingModel) {
      this.meetingModel = meetingModel;
      setMeetingModelIsSet(true);
      return this;
    }

    public void unsetMeetingModel() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MEETINGMODEL_ISSET_ID);
    }

    /** Returns true if field meetingModel is set (has been assigned a value) and false otherwise */
    public boolean isSetMeetingModel() {
      return EncodingUtils.testBit(__isset_bitfield, __MEETINGMODEL_ISSET_ID);
    }

    public void setMeetingModelIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MEETINGMODEL_ISSET_ID, value);
    }

    public int getType() {
      return this.type;
    }

    public createMeetRoot_args setType(int type) {
      this.type = type;
      setTypeIsSet(true);
      return this;
    }

    public void unsetType() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TYPE_ISSET_ID);
    }

    /** Returns true if field type is set (has been assigned a value) and false otherwise */
    public boolean isSetType() {
      return EncodingUtils.testBit(__isset_bitfield, __TYPE_ISSET_ID);
    }

    public void setTypeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TYPE_ISSET_ID, value);
    }

    public int getStatus() {
      return this.status;
    }

    public createMeetRoot_args setStatus(int status) {
      this.status = status;
      setStatusIsSet(true);
      return this;
    }

    public void unsetStatus() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
    }

    /** Returns true if field status is set (has been assigned a value) and false otherwise */
    public boolean isSetStatus() {
      return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
    }

    public void setStatusIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
    }

    public String getCreatorId() {
      return this.creatorId;
    }

    public createMeetRoot_args setCreatorId(String creatorId) {
      this.creatorId = creatorId;
      return this;
    }

    public void unsetCreatorId() {
      this.creatorId = null;
    }

    /** Returns true if field creatorId is set (has been assigned a value) and false otherwise */
    public boolean isSetCreatorId() {
      return this.creatorId != null;
    }

    public void setCreatorIdIsSet(boolean value) {
      if (!value) {
        this.creatorId = null;
      }
    }

    public String getBeginTime() {
      return this.beginTime;
    }

    public createMeetRoot_args setBeginTime(String beginTime) {
      this.beginTime = beginTime;
      return this;
    }

    public void unsetBeginTime() {
      this.beginTime = null;
    }

    /** Returns true if field beginTime is set (has been assigned a value) and false otherwise */
    public boolean isSetBeginTime() {
      return this.beginTime != null;
    }

    public void setBeginTimeIsSet(boolean value) {
      if (!value) {
        this.beginTime = null;
      }
    }

    public String getEndTime() {
      return this.endTime;
    }

    public createMeetRoot_args setEndTime(String endTime) {
      this.endTime = endTime;
      return this;
    }

    public void unsetEndTime() {
      this.endTime = null;
    }

    /** Returns true if field endTime is set (has been assigned a value) and false otherwise */
    public boolean isSetEndTime() {
      return this.endTime != null;
    }

    public void setEndTimeIsSet(boolean value) {
      if (!value) {
        this.endTime = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MEETING_NAME:
        if (value == null) {
          unsetMeetingName();
        } else {
          setMeetingName((String)value);
        }
        break;

      case PASSWORD:
        if (value == null) {
          unsetPassword();
        } else {
          setPassword((String)value);
        }
        break;

      case TOPIC:
        if (value == null) {
          unsetTopic();
        } else {
          setTopic((String)value);
        }
        break;

      case MAX_PERSON_COUNT:
        if (value == null) {
          unsetMaxPersonCount();
        } else {
          setMaxPersonCount((Integer)value);
        }
        break;

      case MEETING_MODEL:
        if (value == null) {
          unsetMeetingModel();
        } else {
          setMeetingModel((Integer)value);
        }
        break;

      case TYPE:
        if (value == null) {
          unsetType();
        } else {
          setType((Integer)value);
        }
        break;

      case STATUS:
        if (value == null) {
          unsetStatus();
        } else {
          setStatus((Integer)value);
        }
        break;

      case CREATOR_ID:
        if (value == null) {
          unsetCreatorId();
        } else {
          setCreatorId((String)value);
        }
        break;

      case BEGIN_TIME:
        if (value == null) {
          unsetBeginTime();
        } else {
          setBeginTime((String)value);
        }
        break;

      case END_TIME:
        if (value == null) {
          unsetEndTime();
        } else {
          setEndTime((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MEETING_NAME:
        return getMeetingName();

      case PASSWORD:
        return getPassword();

      case TOPIC:
        return getTopic();

      case MAX_PERSON_COUNT:
        return getMaxPersonCount();

      case MEETING_MODEL:
        return getMeetingModel();

      case TYPE:
        return getType();

      case STATUS:
        return getStatus();

      case CREATOR_ID:
        return getCreatorId();

      case BEGIN_TIME:
        return getBeginTime();

      case END_TIME:
        return getEndTime();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MEETING_NAME:
        return isSetMeetingName();
      case PASSWORD:
        return isSetPassword();
      case TOPIC:
        return isSetTopic();
      case MAX_PERSON_COUNT:
        return isSetMaxPersonCount();
      case MEETING_MODEL:
        return isSetMeetingModel();
      case TYPE:
        return isSetType();
      case STATUS:
        return isSetStatus();
      case CREATOR_ID:
        return isSetCreatorId();
      case BEGIN_TIME:
        return isSetBeginTime();
      case END_TIME:
        return isSetEndTime();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createMeetRoot_args)
        return this.equals((createMeetRoot_args)that);
      return false;
    }

    public boolean equals(createMeetRoot_args that) {
      if (that == null)
        return false;

      boolean this_present_meetingName = true && this.isSetMeetingName();
      boolean that_present_meetingName = true && that.isSetMeetingName();
      if (this_present_meetingName || that_present_meetingName) {
        if (!(this_present_meetingName && that_present_meetingName))
          return false;
        if (!this.meetingName.equals(that.meetingName))
          return false;
      }

      boolean this_present_password = true && this.isSetPassword();
      boolean that_present_password = true && that.isSetPassword();
      if (this_present_password || that_present_password) {
        if (!(this_present_password && that_present_password))
          return false;
        if (!this.password.equals(that.password))
          return false;
      }

      boolean this_present_topic = true && this.isSetTopic();
      boolean that_present_topic = true && that.isSetTopic();
      if (this_present_topic || that_present_topic) {
        if (!(this_present_topic && that_present_topic))
          return false;
        if (!this.topic.equals(that.topic))
          return false;
      }

      boolean this_present_maxPersonCount = true;
      boolean that_present_maxPersonCount = true;
      if (this_present_maxPersonCount || that_present_maxPersonCount) {
        if (!(this_present_maxPersonCount && that_present_maxPersonCount))
          return false;
        if (this.maxPersonCount != that.maxPersonCount)
          return false;
      }

      boolean this_present_meetingModel = true;
      boolean that_present_meetingModel = true;
      if (this_present_meetingModel || that_present_meetingModel) {
        if (!(this_present_meetingModel && that_present_meetingModel))
          return false;
        if (this.meetingModel != that.meetingModel)
          return false;
      }

      boolean this_present_type = true;
      boolean that_present_type = true;
      if (this_present_type || that_present_type) {
        if (!(this_present_type && that_present_type))
          return false;
        if (this.type != that.type)
          return false;
      }

      boolean this_present_status = true;
      boolean that_present_status = true;
      if (this_present_status || that_present_status) {
        if (!(this_present_status && that_present_status))
          return false;
        if (this.status != that.status)
          return false;
      }

      boolean this_present_creatorId = true && this.isSetCreatorId();
      boolean that_present_creatorId = true && that.isSetCreatorId();
      if (this_present_creatorId || that_present_creatorId) {
        if (!(this_present_creatorId && that_present_creatorId))
          return false;
        if (!this.creatorId.equals(that.creatorId))
          return false;
      }

      boolean this_present_beginTime = true && this.isSetBeginTime();
      boolean that_present_beginTime = true && that.isSetBeginTime();
      if (this_present_beginTime || that_present_beginTime) {
        if (!(this_present_beginTime && that_present_beginTime))
          return false;
        if (!this.beginTime.equals(that.beginTime))
          return false;
      }

      boolean this_present_endTime = true && this.isSetEndTime();
      boolean that_present_endTime = true && that.isSetEndTime();
      if (this_present_endTime || that_present_endTime) {
        if (!(this_present_endTime && that_present_endTime))
          return false;
        if (!this.endTime.equals(that.endTime))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_meetingName = true && (isSetMeetingName());
      list.add(present_meetingName);
      if (present_meetingName)
        list.add(meetingName);

      boolean present_password = true && (isSetPassword());
      list.add(present_password);
      if (present_password)
        list.add(password);

      boolean present_topic = true && (isSetTopic());
      list.add(present_topic);
      if (present_topic)
        list.add(topic);

      boolean present_maxPersonCount = true;
      list.add(present_maxPersonCount);
      if (present_maxPersonCount)
        list.add(maxPersonCount);

      boolean present_meetingModel = true;
      list.add(present_meetingModel);
      if (present_meetingModel)
        list.add(meetingModel);

      boolean present_type = true;
      list.add(present_type);
      if (present_type)
        list.add(type);

      boolean present_status = true;
      list.add(present_status);
      if (present_status)
        list.add(status);

      boolean present_creatorId = true && (isSetCreatorId());
      list.add(present_creatorId);
      if (present_creatorId)
        list.add(creatorId);

      boolean present_beginTime = true && (isSetBeginTime());
      list.add(present_beginTime);
      if (present_beginTime)
        list.add(beginTime);

      boolean present_endTime = true && (isSetEndTime());
      list.add(present_endTime);
      if (present_endTime)
        list.add(endTime);

      return list.hashCode();
    }

    @Override
    public int compareTo(createMeetRoot_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetMeetingName()).compareTo(other.isSetMeetingName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMeetingName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.meetingName, other.meetingName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPassword()).compareTo(other.isSetPassword());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPassword()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.password, other.password);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTopic()).compareTo(other.isSetTopic());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTopic()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.topic, other.topic);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMaxPersonCount()).compareTo(other.isSetMaxPersonCount());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMaxPersonCount()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxPersonCount, other.maxPersonCount);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMeetingModel()).compareTo(other.isSetMeetingModel());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMeetingModel()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.meetingModel, other.meetingModel);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStatus()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCreatorId()).compareTo(other.isSetCreatorId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCreatorId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.creatorId, other.creatorId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBeginTime()).compareTo(other.isSetBeginTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBeginTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.beginTime, other.beginTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEndTime()).compareTo(other.isSetEndTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEndTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endTime, other.endTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createMeetRoot_args(");
      boolean first = true;

      sb.append("meetingName:");
      if (this.meetingName == null) {
        sb.append("null");
      } else {
        sb.append(this.meetingName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("password:");
      if (this.password == null) {
        sb.append("null");
      } else {
        sb.append(this.password);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("topic:");
      if (this.topic == null) {
        sb.append("null");
      } else {
        sb.append(this.topic);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("maxPersonCount:");
      sb.append(this.maxPersonCount);
      first = false;
      if (!first) sb.append(", ");
      sb.append("meetingModel:");
      sb.append(this.meetingModel);
      first = false;
      if (!first) sb.append(", ");
      sb.append("type:");
      sb.append(this.type);
      first = false;
      if (!first) sb.append(", ");
      sb.append("status:");
      sb.append(this.status);
      first = false;
      if (!first) sb.append(", ");
      sb.append("creatorId:");
      if (this.creatorId == null) {
        sb.append("null");
      } else {
        sb.append(this.creatorId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("beginTime:");
      if (this.beginTime == null) {
        sb.append("null");
      } else {
        sb.append(this.beginTime);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("endTime:");
      if (this.endTime == null) {
        sb.append("null");
      } else {
        sb.append(this.endTime);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createMeetRoot_argsStandardSchemeFactory implements SchemeFactory {
      public createMeetRoot_argsStandardScheme getScheme() {
        return new createMeetRoot_argsStandardScheme();
      }
    }

    private static class createMeetRoot_argsStandardScheme extends StandardScheme<createMeetRoot_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createMeetRoot_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MEETING_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.meetingName = iprot.readString();
                struct.setMeetingNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PASSWORD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.password = iprot.readString();
                struct.setPasswordIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TOPIC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.topic = iprot.readString();
                struct.setTopicIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // MAX_PERSON_COUNT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.maxPersonCount = iprot.readI32();
                struct.setMaxPersonCountIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // MEETING_MODEL
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.meetingModel = iprot.readI32();
                struct.setMeetingModelIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.type = iprot.readI32();
                struct.setTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // STATUS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.status = iprot.readI32();
                struct.setStatusIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 8: // CREATOR_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.creatorId = iprot.readString();
                struct.setCreatorIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 9: // BEGIN_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.beginTime = iprot.readString();
                struct.setBeginTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 10: // END_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.endTime = iprot.readString();
                struct.setEndTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createMeetRoot_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.meetingName != null) {
          oprot.writeFieldBegin(MEETING_NAME_FIELD_DESC);
          oprot.writeString(struct.meetingName);
          oprot.writeFieldEnd();
        }
        if (struct.password != null) {
          oprot.writeFieldBegin(PASSWORD_FIELD_DESC);
          oprot.writeString(struct.password);
          oprot.writeFieldEnd();
        }
        if (struct.topic != null) {
          oprot.writeFieldBegin(TOPIC_FIELD_DESC);
          oprot.writeString(struct.topic);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(MAX_PERSON_COUNT_FIELD_DESC);
        oprot.writeI32(struct.maxPersonCount);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(MEETING_MODEL_FIELD_DESC);
        oprot.writeI32(struct.meetingModel);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeI32(struct.type);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(STATUS_FIELD_DESC);
        oprot.writeI32(struct.status);
        oprot.writeFieldEnd();
        if (struct.creatorId != null) {
          oprot.writeFieldBegin(CREATOR_ID_FIELD_DESC);
          oprot.writeString(struct.creatorId);
          oprot.writeFieldEnd();
        }
        if (struct.beginTime != null) {
          oprot.writeFieldBegin(BEGIN_TIME_FIELD_DESC);
          oprot.writeString(struct.beginTime);
          oprot.writeFieldEnd();
        }
        if (struct.endTime != null) {
          oprot.writeFieldBegin(END_TIME_FIELD_DESC);
          oprot.writeString(struct.endTime);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createMeetRoot_argsTupleSchemeFactory implements SchemeFactory {
      public createMeetRoot_argsTupleScheme getScheme() {
        return new createMeetRoot_argsTupleScheme();
      }
    }

    private static class createMeetRoot_argsTupleScheme extends TupleScheme<createMeetRoot_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createMeetRoot_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMeetingName()) {
          optionals.set(0);
        }
        if (struct.isSetPassword()) {
          optionals.set(1);
        }
        if (struct.isSetTopic()) {
          optionals.set(2);
        }
        if (struct.isSetMaxPersonCount()) {
          optionals.set(3);
        }
        if (struct.isSetMeetingModel()) {
          optionals.set(4);
        }
        if (struct.isSetType()) {
          optionals.set(5);
        }
        if (struct.isSetStatus()) {
          optionals.set(6);
        }
        if (struct.isSetCreatorId()) {
          optionals.set(7);
        }
        if (struct.isSetBeginTime()) {
          optionals.set(8);
        }
        if (struct.isSetEndTime()) {
          optionals.set(9);
        }
        oprot.writeBitSet(optionals, 10);
        if (struct.isSetMeetingName()) {
          oprot.writeString(struct.meetingName);
        }
        if (struct.isSetPassword()) {
          oprot.writeString(struct.password);
        }
        if (struct.isSetTopic()) {
          oprot.writeString(struct.topic);
        }
        if (struct.isSetMaxPersonCount()) {
          oprot.writeI32(struct.maxPersonCount);
        }
        if (struct.isSetMeetingModel()) {
          oprot.writeI32(struct.meetingModel);
        }
        if (struct.isSetType()) {
          oprot.writeI32(struct.type);
        }
        if (struct.isSetStatus()) {
          oprot.writeI32(struct.status);
        }
        if (struct.isSetCreatorId()) {
          oprot.writeString(struct.creatorId);
        }
        if (struct.isSetBeginTime()) {
          oprot.writeString(struct.beginTime);
        }
        if (struct.isSetEndTime()) {
          oprot.writeString(struct.endTime);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createMeetRoot_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(10);
        if (incoming.get(0)) {
          struct.meetingName = iprot.readString();
          struct.setMeetingNameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.password = iprot.readString();
          struct.setPasswordIsSet(true);
        }
        if (incoming.get(2)) {
          struct.topic = iprot.readString();
          struct.setTopicIsSet(true);
        }
        if (incoming.get(3)) {
          struct.maxPersonCount = iprot.readI32();
          struct.setMaxPersonCountIsSet(true);
        }
        if (incoming.get(4)) {
          struct.meetingModel = iprot.readI32();
          struct.setMeetingModelIsSet(true);
        }
        if (incoming.get(5)) {
          struct.type = iprot.readI32();
          struct.setTypeIsSet(true);
        }
        if (incoming.get(6)) {
          struct.status = iprot.readI32();
          struct.setStatusIsSet(true);
        }
        if (incoming.get(7)) {
          struct.creatorId = iprot.readString();
          struct.setCreatorIdIsSet(true);
        }
        if (incoming.get(8)) {
          struct.beginTime = iprot.readString();
          struct.setBeginTimeIsSet(true);
        }
        if (incoming.get(9)) {
          struct.endTime = iprot.readString();
          struct.setEndTimeIsSet(true);
        }
      }
    }

  }

  public static class createMeetRoot_result implements org.apache.thrift.TBase<createMeetRoot_result, createMeetRoot_result._Fields>, java.io.Serializable, Cloneable, Comparable<createMeetRoot_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createMeetRoot_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createMeetRoot_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createMeetRoot_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createMeetRoot_result.class, metaDataMap);
    }

    public createMeetRoot_result() {
    }

    public createMeetRoot_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createMeetRoot_result(createMeetRoot_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public createMeetRoot_result deepCopy() {
      return new createMeetRoot_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public createMeetRoot_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createMeetRoot_result)
        return this.equals((createMeetRoot_result)that);
      return false;
    }

    public boolean equals(createMeetRoot_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(createMeetRoot_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createMeetRoot_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createMeetRoot_resultStandardSchemeFactory implements SchemeFactory {
      public createMeetRoot_resultStandardScheme getScheme() {
        return new createMeetRoot_resultStandardScheme();
      }
    }

    private static class createMeetRoot_resultStandardScheme extends StandardScheme<createMeetRoot_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createMeetRoot_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createMeetRoot_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createMeetRoot_resultTupleSchemeFactory implements SchemeFactory {
      public createMeetRoot_resultTupleScheme getScheme() {
        return new createMeetRoot_resultTupleScheme();
      }
    }

    private static class createMeetRoot_resultTupleScheme extends TupleScheme<createMeetRoot_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createMeetRoot_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createMeetRoot_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class startMeeting_args implements org.apache.thrift.TBase<startMeeting_args, startMeeting_args._Fields>, java.io.Serializable, Cloneable, Comparable<startMeeting_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("startMeeting_args");

    private static final org.apache.thrift.protocol.TField MEETING_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("meetingId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new startMeeting_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new startMeeting_argsTupleSchemeFactory());
    }

    public String meetingId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MEETING_ID((short)1, "meetingId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MEETING_ID
            return MEETING_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MEETING_ID, new org.apache.thrift.meta_data.FieldMetaData("meetingId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(startMeeting_args.class, metaDataMap);
    }

    public startMeeting_args() {
    }

    public startMeeting_args(
      String meetingId)
    {
      this();
      this.meetingId = meetingId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public startMeeting_args(startMeeting_args other) {
      if (other.isSetMeetingId()) {
        this.meetingId = other.meetingId;
      }
    }

    public startMeeting_args deepCopy() {
      return new startMeeting_args(this);
    }

    @Override
    public void clear() {
      this.meetingId = null;
    }

    public String getMeetingId() {
      return this.meetingId;
    }

    public startMeeting_args setMeetingId(String meetingId) {
      this.meetingId = meetingId;
      return this;
    }

    public void unsetMeetingId() {
      this.meetingId = null;
    }

    /** Returns true if field meetingId is set (has been assigned a value) and false otherwise */
    public boolean isSetMeetingId() {
      return this.meetingId != null;
    }

    public void setMeetingIdIsSet(boolean value) {
      if (!value) {
        this.meetingId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MEETING_ID:
        if (value == null) {
          unsetMeetingId();
        } else {
          setMeetingId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MEETING_ID:
        return getMeetingId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MEETING_ID:
        return isSetMeetingId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof startMeeting_args)
        return this.equals((startMeeting_args)that);
      return false;
    }

    public boolean equals(startMeeting_args that) {
      if (that == null)
        return false;

      boolean this_present_meetingId = true && this.isSetMeetingId();
      boolean that_present_meetingId = true && that.isSetMeetingId();
      if (this_present_meetingId || that_present_meetingId) {
        if (!(this_present_meetingId && that_present_meetingId))
          return false;
        if (!this.meetingId.equals(that.meetingId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_meetingId = true && (isSetMeetingId());
      list.add(present_meetingId);
      if (present_meetingId)
        list.add(meetingId);

      return list.hashCode();
    }

    @Override
    public int compareTo(startMeeting_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetMeetingId()).compareTo(other.isSetMeetingId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMeetingId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.meetingId, other.meetingId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("startMeeting_args(");
      boolean first = true;

      sb.append("meetingId:");
      if (this.meetingId == null) {
        sb.append("null");
      } else {
        sb.append(this.meetingId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class startMeeting_argsStandardSchemeFactory implements SchemeFactory {
      public startMeeting_argsStandardScheme getScheme() {
        return new startMeeting_argsStandardScheme();
      }
    }

    private static class startMeeting_argsStandardScheme extends StandardScheme<startMeeting_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, startMeeting_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MEETING_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.meetingId = iprot.readString();
                struct.setMeetingIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, startMeeting_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.meetingId != null) {
          oprot.writeFieldBegin(MEETING_ID_FIELD_DESC);
          oprot.writeString(struct.meetingId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class startMeeting_argsTupleSchemeFactory implements SchemeFactory {
      public startMeeting_argsTupleScheme getScheme() {
        return new startMeeting_argsTupleScheme();
      }
    }

    private static class startMeeting_argsTupleScheme extends TupleScheme<startMeeting_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, startMeeting_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMeetingId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetMeetingId()) {
          oprot.writeString(struct.meetingId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, startMeeting_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.meetingId = iprot.readString();
          struct.setMeetingIdIsSet(true);
        }
      }
    }

  }

  public static class startMeeting_result implements org.apache.thrift.TBase<startMeeting_result, startMeeting_result._Fields>, java.io.Serializable, Cloneable, Comparable<startMeeting_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("startMeeting_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new startMeeting_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new startMeeting_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(startMeeting_result.class, metaDataMap);
    }

    public startMeeting_result() {
    }

    public startMeeting_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public startMeeting_result(startMeeting_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public startMeeting_result deepCopy() {
      return new startMeeting_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public startMeeting_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof startMeeting_result)
        return this.equals((startMeeting_result)that);
      return false;
    }

    public boolean equals(startMeeting_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(startMeeting_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("startMeeting_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class startMeeting_resultStandardSchemeFactory implements SchemeFactory {
      public startMeeting_resultStandardScheme getScheme() {
        return new startMeeting_resultStandardScheme();
      }
    }

    private static class startMeeting_resultStandardScheme extends StandardScheme<startMeeting_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, startMeeting_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, startMeeting_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class startMeeting_resultTupleSchemeFactory implements SchemeFactory {
      public startMeeting_resultTupleScheme getScheme() {
        return new startMeeting_resultTupleScheme();
      }
    }

    private static class startMeeting_resultTupleScheme extends TupleScheme<startMeeting_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, startMeeting_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, startMeeting_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class closeMeeting_args implements org.apache.thrift.TBase<closeMeeting_args, closeMeeting_args._Fields>, java.io.Serializable, Cloneable, Comparable<closeMeeting_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("closeMeeting_args");

    private static final org.apache.thrift.protocol.TField MEETING_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("meetingId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new closeMeeting_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new closeMeeting_argsTupleSchemeFactory());
    }

    public String meetingId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MEETING_ID((short)1, "meetingId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MEETING_ID
            return MEETING_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MEETING_ID, new org.apache.thrift.meta_data.FieldMetaData("meetingId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(closeMeeting_args.class, metaDataMap);
    }

    public closeMeeting_args() {
    }

    public closeMeeting_args(
      String meetingId)
    {
      this();
      this.meetingId = meetingId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public closeMeeting_args(closeMeeting_args other) {
      if (other.isSetMeetingId()) {
        this.meetingId = other.meetingId;
      }
    }

    public closeMeeting_args deepCopy() {
      return new closeMeeting_args(this);
    }

    @Override
    public void clear() {
      this.meetingId = null;
    }

    public String getMeetingId() {
      return this.meetingId;
    }

    public closeMeeting_args setMeetingId(String meetingId) {
      this.meetingId = meetingId;
      return this;
    }

    public void unsetMeetingId() {
      this.meetingId = null;
    }

    /** Returns true if field meetingId is set (has been assigned a value) and false otherwise */
    public boolean isSetMeetingId() {
      return this.meetingId != null;
    }

    public void setMeetingIdIsSet(boolean value) {
      if (!value) {
        this.meetingId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MEETING_ID:
        if (value == null) {
          unsetMeetingId();
        } else {
          setMeetingId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MEETING_ID:
        return getMeetingId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MEETING_ID:
        return isSetMeetingId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof closeMeeting_args)
        return this.equals((closeMeeting_args)that);
      return false;
    }

    public boolean equals(closeMeeting_args that) {
      if (that == null)
        return false;

      boolean this_present_meetingId = true && this.isSetMeetingId();
      boolean that_present_meetingId = true && that.isSetMeetingId();
      if (this_present_meetingId || that_present_meetingId) {
        if (!(this_present_meetingId && that_present_meetingId))
          return false;
        if (!this.meetingId.equals(that.meetingId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_meetingId = true && (isSetMeetingId());
      list.add(present_meetingId);
      if (present_meetingId)
        list.add(meetingId);

      return list.hashCode();
    }

    @Override
    public int compareTo(closeMeeting_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetMeetingId()).compareTo(other.isSetMeetingId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMeetingId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.meetingId, other.meetingId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("closeMeeting_args(");
      boolean first = true;

      sb.append("meetingId:");
      if (this.meetingId == null) {
        sb.append("null");
      } else {
        sb.append(this.meetingId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class closeMeeting_argsStandardSchemeFactory implements SchemeFactory {
      public closeMeeting_argsStandardScheme getScheme() {
        return new closeMeeting_argsStandardScheme();
      }
    }

    private static class closeMeeting_argsStandardScheme extends StandardScheme<closeMeeting_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, closeMeeting_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MEETING_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.meetingId = iprot.readString();
                struct.setMeetingIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, closeMeeting_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.meetingId != null) {
          oprot.writeFieldBegin(MEETING_ID_FIELD_DESC);
          oprot.writeString(struct.meetingId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class closeMeeting_argsTupleSchemeFactory implements SchemeFactory {
      public closeMeeting_argsTupleScheme getScheme() {
        return new closeMeeting_argsTupleScheme();
      }
    }

    private static class closeMeeting_argsTupleScheme extends TupleScheme<closeMeeting_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, closeMeeting_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMeetingId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetMeetingId()) {
          oprot.writeString(struct.meetingId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, closeMeeting_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.meetingId = iprot.readString();
          struct.setMeetingIdIsSet(true);
        }
      }
    }

  }

  public static class closeMeeting_result implements org.apache.thrift.TBase<closeMeeting_result, closeMeeting_result._Fields>, java.io.Serializable, Cloneable, Comparable<closeMeeting_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("closeMeeting_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new closeMeeting_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new closeMeeting_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(closeMeeting_result.class, metaDataMap);
    }

    public closeMeeting_result() {
    }

    public closeMeeting_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public closeMeeting_result(closeMeeting_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public closeMeeting_result deepCopy() {
      return new closeMeeting_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public closeMeeting_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof closeMeeting_result)
        return this.equals((closeMeeting_result)that);
      return false;
    }

    public boolean equals(closeMeeting_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(closeMeeting_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("closeMeeting_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class closeMeeting_resultStandardSchemeFactory implements SchemeFactory {
      public closeMeeting_resultStandardScheme getScheme() {
        return new closeMeeting_resultStandardScheme();
      }
    }

    private static class closeMeeting_resultStandardScheme extends StandardScheme<closeMeeting_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, closeMeeting_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, closeMeeting_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class closeMeeting_resultTupleSchemeFactory implements SchemeFactory {
      public closeMeeting_resultTupleScheme getScheme() {
        return new closeMeeting_resultTupleScheme();
      }
    }

    private static class closeMeeting_resultTupleScheme extends TupleScheme<closeMeeting_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, closeMeeting_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, closeMeeting_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class enterMeeting_args implements org.apache.thrift.TBase<enterMeeting_args, enterMeeting_args._Fields>, java.io.Serializable, Cloneable, Comparable<enterMeeting_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("enterMeeting_args");

    private static final org.apache.thrift.protocol.TField MEETING_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("meetingId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField USERID_FIELD_DESC = new org.apache.thrift.protocol.TField("userid", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new enterMeeting_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new enterMeeting_argsTupleSchemeFactory());
    }

    public String meetingId; // required
    public String userid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MEETING_ID((short)1, "meetingId"),
      USERID((short)2, "userid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MEETING_ID
            return MEETING_ID;
          case 2: // USERID
            return USERID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MEETING_ID, new org.apache.thrift.meta_data.FieldMetaData("meetingId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USERID, new org.apache.thrift.meta_data.FieldMetaData("userid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(enterMeeting_args.class, metaDataMap);
    }

    public enterMeeting_args() {
    }

    public enterMeeting_args(
      String meetingId,
      String userid)
    {
      this();
      this.meetingId = meetingId;
      this.userid = userid;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public enterMeeting_args(enterMeeting_args other) {
      if (other.isSetMeetingId()) {
        this.meetingId = other.meetingId;
      }
      if (other.isSetUserid()) {
        this.userid = other.userid;
      }
    }

    public enterMeeting_args deepCopy() {
      return new enterMeeting_args(this);
    }

    @Override
    public void clear() {
      this.meetingId = null;
      this.userid = null;
    }

    public String getMeetingId() {
      return this.meetingId;
    }

    public enterMeeting_args setMeetingId(String meetingId) {
      this.meetingId = meetingId;
      return this;
    }

    public void unsetMeetingId() {
      this.meetingId = null;
    }

    /** Returns true if field meetingId is set (has been assigned a value) and false otherwise */
    public boolean isSetMeetingId() {
      return this.meetingId != null;
    }

    public void setMeetingIdIsSet(boolean value) {
      if (!value) {
        this.meetingId = null;
      }
    }

    public String getUserid() {
      return this.userid;
    }

    public enterMeeting_args setUserid(String userid) {
      this.userid = userid;
      return this;
    }

    public void unsetUserid() {
      this.userid = null;
    }

    /** Returns true if field userid is set (has been assigned a value) and false otherwise */
    public boolean isSetUserid() {
      return this.userid != null;
    }

    public void setUseridIsSet(boolean value) {
      if (!value) {
        this.userid = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MEETING_ID:
        if (value == null) {
          unsetMeetingId();
        } else {
          setMeetingId((String)value);
        }
        break;

      case USERID:
        if (value == null) {
          unsetUserid();
        } else {
          setUserid((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MEETING_ID:
        return getMeetingId();

      case USERID:
        return getUserid();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MEETING_ID:
        return isSetMeetingId();
      case USERID:
        return isSetUserid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof enterMeeting_args)
        return this.equals((enterMeeting_args)that);
      return false;
    }

    public boolean equals(enterMeeting_args that) {
      if (that == null)
        return false;

      boolean this_present_meetingId = true && this.isSetMeetingId();
      boolean that_present_meetingId = true && that.isSetMeetingId();
      if (this_present_meetingId || that_present_meetingId) {
        if (!(this_present_meetingId && that_present_meetingId))
          return false;
        if (!this.meetingId.equals(that.meetingId))
          return false;
      }

      boolean this_present_userid = true && this.isSetUserid();
      boolean that_present_userid = true && that.isSetUserid();
      if (this_present_userid || that_present_userid) {
        if (!(this_present_userid && that_present_userid))
          return false;
        if (!this.userid.equals(that.userid))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_meetingId = true && (isSetMeetingId());
      list.add(present_meetingId);
      if (present_meetingId)
        list.add(meetingId);

      boolean present_userid = true && (isSetUserid());
      list.add(present_userid);
      if (present_userid)
        list.add(userid);

      return list.hashCode();
    }

    @Override
    public int compareTo(enterMeeting_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetMeetingId()).compareTo(other.isSetMeetingId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMeetingId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.meetingId, other.meetingId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserid()).compareTo(other.isSetUserid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userid, other.userid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("enterMeeting_args(");
      boolean first = true;

      sb.append("meetingId:");
      if (this.meetingId == null) {
        sb.append("null");
      } else {
        sb.append(this.meetingId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userid:");
      if (this.userid == null) {
        sb.append("null");
      } else {
        sb.append(this.userid);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class enterMeeting_argsStandardSchemeFactory implements SchemeFactory {
      public enterMeeting_argsStandardScheme getScheme() {
        return new enterMeeting_argsStandardScheme();
      }
    }

    private static class enterMeeting_argsStandardScheme extends StandardScheme<enterMeeting_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, enterMeeting_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MEETING_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.meetingId = iprot.readString();
                struct.setMeetingIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USERID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userid = iprot.readString();
                struct.setUseridIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, enterMeeting_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.meetingId != null) {
          oprot.writeFieldBegin(MEETING_ID_FIELD_DESC);
          oprot.writeString(struct.meetingId);
          oprot.writeFieldEnd();
        }
        if (struct.userid != null) {
          oprot.writeFieldBegin(USERID_FIELD_DESC);
          oprot.writeString(struct.userid);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class enterMeeting_argsTupleSchemeFactory implements SchemeFactory {
      public enterMeeting_argsTupleScheme getScheme() {
        return new enterMeeting_argsTupleScheme();
      }
    }

    private static class enterMeeting_argsTupleScheme extends TupleScheme<enterMeeting_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, enterMeeting_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMeetingId()) {
          optionals.set(0);
        }
        if (struct.isSetUserid()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetMeetingId()) {
          oprot.writeString(struct.meetingId);
        }
        if (struct.isSetUserid()) {
          oprot.writeString(struct.userid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, enterMeeting_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.meetingId = iprot.readString();
          struct.setMeetingIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.userid = iprot.readString();
          struct.setUseridIsSet(true);
        }
      }
    }

  }

  public static class enterMeeting_result implements org.apache.thrift.TBase<enterMeeting_result, enterMeeting_result._Fields>, java.io.Serializable, Cloneable, Comparable<enterMeeting_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("enterMeeting_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new enterMeeting_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new enterMeeting_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(enterMeeting_result.class, metaDataMap);
    }

    public enterMeeting_result() {
    }

    public enterMeeting_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public enterMeeting_result(enterMeeting_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public enterMeeting_result deepCopy() {
      return new enterMeeting_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public enterMeeting_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof enterMeeting_result)
        return this.equals((enterMeeting_result)that);
      return false;
    }

    public boolean equals(enterMeeting_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(enterMeeting_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("enterMeeting_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class enterMeeting_resultStandardSchemeFactory implements SchemeFactory {
      public enterMeeting_resultStandardScheme getScheme() {
        return new enterMeeting_resultStandardScheme();
      }
    }

    private static class enterMeeting_resultStandardScheme extends StandardScheme<enterMeeting_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, enterMeeting_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, enterMeeting_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class enterMeeting_resultTupleSchemeFactory implements SchemeFactory {
      public enterMeeting_resultTupleScheme getScheme() {
        return new enterMeeting_resultTupleScheme();
      }
    }

    private static class enterMeeting_resultTupleScheme extends TupleScheme<enterMeeting_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, enterMeeting_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, enterMeeting_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class quitMeeting_args implements org.apache.thrift.TBase<quitMeeting_args, quitMeeting_args._Fields>, java.io.Serializable, Cloneable, Comparable<quitMeeting_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("quitMeeting_args");

    private static final org.apache.thrift.protocol.TField MEETING_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("meetingId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField USERID_FIELD_DESC = new org.apache.thrift.protocol.TField("userid", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new quitMeeting_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new quitMeeting_argsTupleSchemeFactory());
    }

    public String meetingId; // required
    public String userid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MEETING_ID((short)1, "meetingId"),
      USERID((short)2, "userid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MEETING_ID
            return MEETING_ID;
          case 2: // USERID
            return USERID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MEETING_ID, new org.apache.thrift.meta_data.FieldMetaData("meetingId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USERID, new org.apache.thrift.meta_data.FieldMetaData("userid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(quitMeeting_args.class, metaDataMap);
    }

    public quitMeeting_args() {
    }

    public quitMeeting_args(
      String meetingId,
      String userid)
    {
      this();
      this.meetingId = meetingId;
      this.userid = userid;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public quitMeeting_args(quitMeeting_args other) {
      if (other.isSetMeetingId()) {
        this.meetingId = other.meetingId;
      }
      if (other.isSetUserid()) {
        this.userid = other.userid;
      }
    }

    public quitMeeting_args deepCopy() {
      return new quitMeeting_args(this);
    }

    @Override
    public void clear() {
      this.meetingId = null;
      this.userid = null;
    }

    public String getMeetingId() {
      return this.meetingId;
    }

    public quitMeeting_args setMeetingId(String meetingId) {
      this.meetingId = meetingId;
      return this;
    }

    public void unsetMeetingId() {
      this.meetingId = null;
    }

    /** Returns true if field meetingId is set (has been assigned a value) and false otherwise */
    public boolean isSetMeetingId() {
      return this.meetingId != null;
    }

    public void setMeetingIdIsSet(boolean value) {
      if (!value) {
        this.meetingId = null;
      }
    }

    public String getUserid() {
      return this.userid;
    }

    public quitMeeting_args setUserid(String userid) {
      this.userid = userid;
      return this;
    }

    public void unsetUserid() {
      this.userid = null;
    }

    /** Returns true if field userid is set (has been assigned a value) and false otherwise */
    public boolean isSetUserid() {
      return this.userid != null;
    }

    public void setUseridIsSet(boolean value) {
      if (!value) {
        this.userid = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MEETING_ID:
        if (value == null) {
          unsetMeetingId();
        } else {
          setMeetingId((String)value);
        }
        break;

      case USERID:
        if (value == null) {
          unsetUserid();
        } else {
          setUserid((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MEETING_ID:
        return getMeetingId();

      case USERID:
        return getUserid();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MEETING_ID:
        return isSetMeetingId();
      case USERID:
        return isSetUserid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof quitMeeting_args)
        return this.equals((quitMeeting_args)that);
      return false;
    }

    public boolean equals(quitMeeting_args that) {
      if (that == null)
        return false;

      boolean this_present_meetingId = true && this.isSetMeetingId();
      boolean that_present_meetingId = true && that.isSetMeetingId();
      if (this_present_meetingId || that_present_meetingId) {
        if (!(this_present_meetingId && that_present_meetingId))
          return false;
        if (!this.meetingId.equals(that.meetingId))
          return false;
      }

      boolean this_present_userid = true && this.isSetUserid();
      boolean that_present_userid = true && that.isSetUserid();
      if (this_present_userid || that_present_userid) {
        if (!(this_present_userid && that_present_userid))
          return false;
        if (!this.userid.equals(that.userid))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_meetingId = true && (isSetMeetingId());
      list.add(present_meetingId);
      if (present_meetingId)
        list.add(meetingId);

      boolean present_userid = true && (isSetUserid());
      list.add(present_userid);
      if (present_userid)
        list.add(userid);

      return list.hashCode();
    }

    @Override
    public int compareTo(quitMeeting_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetMeetingId()).compareTo(other.isSetMeetingId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMeetingId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.meetingId, other.meetingId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserid()).compareTo(other.isSetUserid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userid, other.userid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("quitMeeting_args(");
      boolean first = true;

      sb.append("meetingId:");
      if (this.meetingId == null) {
        sb.append("null");
      } else {
        sb.append(this.meetingId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userid:");
      if (this.userid == null) {
        sb.append("null");
      } else {
        sb.append(this.userid);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class quitMeeting_argsStandardSchemeFactory implements SchemeFactory {
      public quitMeeting_argsStandardScheme getScheme() {
        return new quitMeeting_argsStandardScheme();
      }
    }

    private static class quitMeeting_argsStandardScheme extends StandardScheme<quitMeeting_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, quitMeeting_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MEETING_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.meetingId = iprot.readString();
                struct.setMeetingIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USERID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userid = iprot.readString();
                struct.setUseridIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, quitMeeting_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.meetingId != null) {
          oprot.writeFieldBegin(MEETING_ID_FIELD_DESC);
          oprot.writeString(struct.meetingId);
          oprot.writeFieldEnd();
        }
        if (struct.userid != null) {
          oprot.writeFieldBegin(USERID_FIELD_DESC);
          oprot.writeString(struct.userid);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class quitMeeting_argsTupleSchemeFactory implements SchemeFactory {
      public quitMeeting_argsTupleScheme getScheme() {
        return new quitMeeting_argsTupleScheme();
      }
    }

    private static class quitMeeting_argsTupleScheme extends TupleScheme<quitMeeting_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, quitMeeting_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMeetingId()) {
          optionals.set(0);
        }
        if (struct.isSetUserid()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetMeetingId()) {
          oprot.writeString(struct.meetingId);
        }
        if (struct.isSetUserid()) {
          oprot.writeString(struct.userid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, quitMeeting_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.meetingId = iprot.readString();
          struct.setMeetingIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.userid = iprot.readString();
          struct.setUseridIsSet(true);
        }
      }
    }

  }

  public static class quitMeeting_result implements org.apache.thrift.TBase<quitMeeting_result, quitMeeting_result._Fields>, java.io.Serializable, Cloneable, Comparable<quitMeeting_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("quitMeeting_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new quitMeeting_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new quitMeeting_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(quitMeeting_result.class, metaDataMap);
    }

    public quitMeeting_result() {
    }

    public quitMeeting_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public quitMeeting_result(quitMeeting_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public quitMeeting_result deepCopy() {
      return new quitMeeting_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public quitMeeting_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof quitMeeting_result)
        return this.equals((quitMeeting_result)that);
      return false;
    }

    public boolean equals(quitMeeting_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(quitMeeting_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("quitMeeting_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class quitMeeting_resultStandardSchemeFactory implements SchemeFactory {
      public quitMeeting_resultStandardScheme getScheme() {
        return new quitMeeting_resultStandardScheme();
      }
    }

    private static class quitMeeting_resultStandardScheme extends StandardScheme<quitMeeting_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, quitMeeting_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, quitMeeting_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class quitMeeting_resultTupleSchemeFactory implements SchemeFactory {
      public quitMeeting_resultTupleScheme getScheme() {
        return new quitMeeting_resultTupleScheme();
      }
    }

    private static class quitMeeting_resultTupleScheme extends TupleScheme<quitMeeting_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, quitMeeting_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, quitMeeting_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class inviteUser_args implements org.apache.thrift.TBase<inviteUser_args, inviteUser_args._Fields>, java.io.Serializable, Cloneable, Comparable<inviteUser_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("inviteUser_args");

    private static final org.apache.thrift.protocol.TField MEETING_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("meetingId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new inviteUser_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new inviteUser_argsTupleSchemeFactory());
    }

    public String meetingId; // required
    public String userId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MEETING_ID((short)1, "meetingId"),
      USER_ID((short)2, "userId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MEETING_ID
            return MEETING_ID;
          case 2: // USER_ID
            return USER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MEETING_ID, new org.apache.thrift.meta_data.FieldMetaData("meetingId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(inviteUser_args.class, metaDataMap);
    }

    public inviteUser_args() {
    }

    public inviteUser_args(
      String meetingId,
      String userId)
    {
      this();
      this.meetingId = meetingId;
      this.userId = userId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public inviteUser_args(inviteUser_args other) {
      if (other.isSetMeetingId()) {
        this.meetingId = other.meetingId;
      }
      if (other.isSetUserId()) {
        this.userId = other.userId;
      }
    }

    public inviteUser_args deepCopy() {
      return new inviteUser_args(this);
    }

    @Override
    public void clear() {
      this.meetingId = null;
      this.userId = null;
    }

    public String getMeetingId() {
      return this.meetingId;
    }

    public inviteUser_args setMeetingId(String meetingId) {
      this.meetingId = meetingId;
      return this;
    }

    public void unsetMeetingId() {
      this.meetingId = null;
    }

    /** Returns true if field meetingId is set (has been assigned a value) and false otherwise */
    public boolean isSetMeetingId() {
      return this.meetingId != null;
    }

    public void setMeetingIdIsSet(boolean value) {
      if (!value) {
        this.meetingId = null;
      }
    }

    public String getUserId() {
      return this.userId;
    }

    public inviteUser_args setUserId(String userId) {
      this.userId = userId;
      return this;
    }

    public void unsetUserId() {
      this.userId = null;
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId() {
      return this.userId != null;
    }

    public void setUserIdIsSet(boolean value) {
      if (!value) {
        this.userId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MEETING_ID:
        if (value == null) {
          unsetMeetingId();
        } else {
          setMeetingId((String)value);
        }
        break;

      case USER_ID:
        if (value == null) {
          unsetUserId();
        } else {
          setUserId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MEETING_ID:
        return getMeetingId();

      case USER_ID:
        return getUserId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MEETING_ID:
        return isSetMeetingId();
      case USER_ID:
        return isSetUserId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof inviteUser_args)
        return this.equals((inviteUser_args)that);
      return false;
    }

    public boolean equals(inviteUser_args that) {
      if (that == null)
        return false;

      boolean this_present_meetingId = true && this.isSetMeetingId();
      boolean that_present_meetingId = true && that.isSetMeetingId();
      if (this_present_meetingId || that_present_meetingId) {
        if (!(this_present_meetingId && that_present_meetingId))
          return false;
        if (!this.meetingId.equals(that.meetingId))
          return false;
      }

      boolean this_present_userId = true && this.isSetUserId();
      boolean that_present_userId = true && that.isSetUserId();
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (!this.userId.equals(that.userId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_meetingId = true && (isSetMeetingId());
      list.add(present_meetingId);
      if (present_meetingId)
        list.add(meetingId);

      boolean present_userId = true && (isSetUserId());
      list.add(present_userId);
      if (present_userId)
        list.add(userId);

      return list.hashCode();
    }

    @Override
    public int compareTo(inviteUser_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetMeetingId()).compareTo(other.isSetMeetingId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMeetingId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.meetingId, other.meetingId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("inviteUser_args(");
      boolean first = true;

      sb.append("meetingId:");
      if (this.meetingId == null) {
        sb.append("null");
      } else {
        sb.append(this.meetingId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userId:");
      if (this.userId == null) {
        sb.append("null");
      } else {
        sb.append(this.userId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class inviteUser_argsStandardSchemeFactory implements SchemeFactory {
      public inviteUser_argsStandardScheme getScheme() {
        return new inviteUser_argsStandardScheme();
      }
    }

    private static class inviteUser_argsStandardScheme extends StandardScheme<inviteUser_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, inviteUser_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MEETING_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.meetingId = iprot.readString();
                struct.setMeetingIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userId = iprot.readString();
                struct.setUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, inviteUser_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.meetingId != null) {
          oprot.writeFieldBegin(MEETING_ID_FIELD_DESC);
          oprot.writeString(struct.meetingId);
          oprot.writeFieldEnd();
        }
        if (struct.userId != null) {
          oprot.writeFieldBegin(USER_ID_FIELD_DESC);
          oprot.writeString(struct.userId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class inviteUser_argsTupleSchemeFactory implements SchemeFactory {
      public inviteUser_argsTupleScheme getScheme() {
        return new inviteUser_argsTupleScheme();
      }
    }

    private static class inviteUser_argsTupleScheme extends TupleScheme<inviteUser_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, inviteUser_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMeetingId()) {
          optionals.set(0);
        }
        if (struct.isSetUserId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetMeetingId()) {
          oprot.writeString(struct.meetingId);
        }
        if (struct.isSetUserId()) {
          oprot.writeString(struct.userId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, inviteUser_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.meetingId = iprot.readString();
          struct.setMeetingIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.userId = iprot.readString();
          struct.setUserIdIsSet(true);
        }
      }
    }

  }

  public static class inviteUser_result implements org.apache.thrift.TBase<inviteUser_result, inviteUser_result._Fields>, java.io.Serializable, Cloneable, Comparable<inviteUser_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("inviteUser_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new inviteUser_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new inviteUser_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(inviteUser_result.class, metaDataMap);
    }

    public inviteUser_result() {
    }

    public inviteUser_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public inviteUser_result(inviteUser_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public inviteUser_result deepCopy() {
      return new inviteUser_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public inviteUser_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof inviteUser_result)
        return this.equals((inviteUser_result)that);
      return false;
    }

    public boolean equals(inviteUser_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(inviteUser_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("inviteUser_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class inviteUser_resultStandardSchemeFactory implements SchemeFactory {
      public inviteUser_resultStandardScheme getScheme() {
        return new inviteUser_resultStandardScheme();
      }
    }

    private static class inviteUser_resultStandardScheme extends StandardScheme<inviteUser_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, inviteUser_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, inviteUser_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class inviteUser_resultTupleSchemeFactory implements SchemeFactory {
      public inviteUser_resultTupleScheme getScheme() {
        return new inviteUser_resultTupleScheme();
      }
    }

    private static class inviteUser_resultTupleScheme extends TupleScheme<inviteUser_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, inviteUser_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, inviteUser_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class setMeetingPassword_args implements org.apache.thrift.TBase<setMeetingPassword_args, setMeetingPassword_args._Fields>, java.io.Serializable, Cloneable, Comparable<setMeetingPassword_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setMeetingPassword_args");

    private static final org.apache.thrift.protocol.TField MEETING_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("meetingId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("password", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setMeetingPassword_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setMeetingPassword_argsTupleSchemeFactory());
    }

    public String meetingId; // required
    public String password; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MEETING_ID((short)1, "meetingId"),
      PASSWORD((short)2, "password");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MEETING_ID
            return MEETING_ID;
          case 2: // PASSWORD
            return PASSWORD;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MEETING_ID, new org.apache.thrift.meta_data.FieldMetaData("meetingId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("password", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setMeetingPassword_args.class, metaDataMap);
    }

    public setMeetingPassword_args() {
    }

    public setMeetingPassword_args(
      String meetingId,
      String password)
    {
      this();
      this.meetingId = meetingId;
      this.password = password;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setMeetingPassword_args(setMeetingPassword_args other) {
      if (other.isSetMeetingId()) {
        this.meetingId = other.meetingId;
      }
      if (other.isSetPassword()) {
        this.password = other.password;
      }
    }

    public setMeetingPassword_args deepCopy() {
      return new setMeetingPassword_args(this);
    }

    @Override
    public void clear() {
      this.meetingId = null;
      this.password = null;
    }

    public String getMeetingId() {
      return this.meetingId;
    }

    public setMeetingPassword_args setMeetingId(String meetingId) {
      this.meetingId = meetingId;
      return this;
    }

    public void unsetMeetingId() {
      this.meetingId = null;
    }

    /** Returns true if field meetingId is set (has been assigned a value) and false otherwise */
    public boolean isSetMeetingId() {
      return this.meetingId != null;
    }

    public void setMeetingIdIsSet(boolean value) {
      if (!value) {
        this.meetingId = null;
      }
    }

    public String getPassword() {
      return this.password;
    }

    public setMeetingPassword_args setPassword(String password) {
      this.password = password;
      return this;
    }

    public void unsetPassword() {
      this.password = null;
    }

    /** Returns true if field password is set (has been assigned a value) and false otherwise */
    public boolean isSetPassword() {
      return this.password != null;
    }

    public void setPasswordIsSet(boolean value) {
      if (!value) {
        this.password = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MEETING_ID:
        if (value == null) {
          unsetMeetingId();
        } else {
          setMeetingId((String)value);
        }
        break;

      case PASSWORD:
        if (value == null) {
          unsetPassword();
        } else {
          setPassword((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MEETING_ID:
        return getMeetingId();

      case PASSWORD:
        return getPassword();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MEETING_ID:
        return isSetMeetingId();
      case PASSWORD:
        return isSetPassword();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setMeetingPassword_args)
        return this.equals((setMeetingPassword_args)that);
      return false;
    }

    public boolean equals(setMeetingPassword_args that) {
      if (that == null)
        return false;

      boolean this_present_meetingId = true && this.isSetMeetingId();
      boolean that_present_meetingId = true && that.isSetMeetingId();
      if (this_present_meetingId || that_present_meetingId) {
        if (!(this_present_meetingId && that_present_meetingId))
          return false;
        if (!this.meetingId.equals(that.meetingId))
          return false;
      }

      boolean this_present_password = true && this.isSetPassword();
      boolean that_present_password = true && that.isSetPassword();
      if (this_present_password || that_present_password) {
        if (!(this_present_password && that_present_password))
          return false;
        if (!this.password.equals(that.password))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_meetingId = true && (isSetMeetingId());
      list.add(present_meetingId);
      if (present_meetingId)
        list.add(meetingId);

      boolean present_password = true && (isSetPassword());
      list.add(present_password);
      if (present_password)
        list.add(password);

      return list.hashCode();
    }

    @Override
    public int compareTo(setMeetingPassword_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetMeetingId()).compareTo(other.isSetMeetingId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMeetingId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.meetingId, other.meetingId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPassword()).compareTo(other.isSetPassword());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPassword()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.password, other.password);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setMeetingPassword_args(");
      boolean first = true;

      sb.append("meetingId:");
      if (this.meetingId == null) {
        sb.append("null");
      } else {
        sb.append(this.meetingId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("password:");
      if (this.password == null) {
        sb.append("null");
      } else {
        sb.append(this.password);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setMeetingPassword_argsStandardSchemeFactory implements SchemeFactory {
      public setMeetingPassword_argsStandardScheme getScheme() {
        return new setMeetingPassword_argsStandardScheme();
      }
    }

    private static class setMeetingPassword_argsStandardScheme extends StandardScheme<setMeetingPassword_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setMeetingPassword_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MEETING_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.meetingId = iprot.readString();
                struct.setMeetingIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PASSWORD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.password = iprot.readString();
                struct.setPasswordIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setMeetingPassword_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.meetingId != null) {
          oprot.writeFieldBegin(MEETING_ID_FIELD_DESC);
          oprot.writeString(struct.meetingId);
          oprot.writeFieldEnd();
        }
        if (struct.password != null) {
          oprot.writeFieldBegin(PASSWORD_FIELD_DESC);
          oprot.writeString(struct.password);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setMeetingPassword_argsTupleSchemeFactory implements SchemeFactory {
      public setMeetingPassword_argsTupleScheme getScheme() {
        return new setMeetingPassword_argsTupleScheme();
      }
    }

    private static class setMeetingPassword_argsTupleScheme extends TupleScheme<setMeetingPassword_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setMeetingPassword_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMeetingId()) {
          optionals.set(0);
        }
        if (struct.isSetPassword()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetMeetingId()) {
          oprot.writeString(struct.meetingId);
        }
        if (struct.isSetPassword()) {
          oprot.writeString(struct.password);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setMeetingPassword_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.meetingId = iprot.readString();
          struct.setMeetingIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.password = iprot.readString();
          struct.setPasswordIsSet(true);
        }
      }
    }

  }

  public static class setMeetingPassword_result implements org.apache.thrift.TBase<setMeetingPassword_result, setMeetingPassword_result._Fields>, java.io.Serializable, Cloneable, Comparable<setMeetingPassword_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setMeetingPassword_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setMeetingPassword_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setMeetingPassword_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setMeetingPassword_result.class, metaDataMap);
    }

    public setMeetingPassword_result() {
    }

    public setMeetingPassword_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setMeetingPassword_result(setMeetingPassword_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public setMeetingPassword_result deepCopy() {
      return new setMeetingPassword_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public setMeetingPassword_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setMeetingPassword_result)
        return this.equals((setMeetingPassword_result)that);
      return false;
    }

    public boolean equals(setMeetingPassword_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(setMeetingPassword_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setMeetingPassword_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setMeetingPassword_resultStandardSchemeFactory implements SchemeFactory {
      public setMeetingPassword_resultStandardScheme getScheme() {
        return new setMeetingPassword_resultStandardScheme();
      }
    }

    private static class setMeetingPassword_resultStandardScheme extends StandardScheme<setMeetingPassword_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setMeetingPassword_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setMeetingPassword_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setMeetingPassword_resultTupleSchemeFactory implements SchemeFactory {
      public setMeetingPassword_resultTupleScheme getScheme() {
        return new setMeetingPassword_resultTupleScheme();
      }
    }

    private static class setMeetingPassword_resultTupleScheme extends TupleScheme<setMeetingPassword_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setMeetingPassword_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setMeetingPassword_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class loadMeetingMessage_args implements org.apache.thrift.TBase<loadMeetingMessage_args, loadMeetingMessage_args._Fields>, java.io.Serializable, Cloneable, Comparable<loadMeetingMessage_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("loadMeetingMessage_args");

    private static final org.apache.thrift.protocol.TField MEETING_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("meetingId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PAGE_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("pageNum", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new loadMeetingMessage_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new loadMeetingMessage_argsTupleSchemeFactory());
    }

    public String meetingId; // required
    public int pageNum; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MEETING_ID((short)1, "meetingId"),
      PAGE_NUM((short)2, "pageNum");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MEETING_ID
            return MEETING_ID;
          case 2: // PAGE_NUM
            return PAGE_NUM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PAGENUM_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MEETING_ID, new org.apache.thrift.meta_data.FieldMetaData("meetingId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PAGE_NUM, new org.apache.thrift.meta_data.FieldMetaData("pageNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(loadMeetingMessage_args.class, metaDataMap);
    }

    public loadMeetingMessage_args() {
    }

    public loadMeetingMessage_args(
      String meetingId,
      int pageNum)
    {
      this();
      this.meetingId = meetingId;
      this.pageNum = pageNum;
      setPageNumIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public loadMeetingMessage_args(loadMeetingMessage_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetMeetingId()) {
        this.meetingId = other.meetingId;
      }
      this.pageNum = other.pageNum;
    }

    public loadMeetingMessage_args deepCopy() {
      return new loadMeetingMessage_args(this);
    }

    @Override
    public void clear() {
      this.meetingId = null;
      setPageNumIsSet(false);
      this.pageNum = 0;
    }

    public String getMeetingId() {
      return this.meetingId;
    }

    public loadMeetingMessage_args setMeetingId(String meetingId) {
      this.meetingId = meetingId;
      return this;
    }

    public void unsetMeetingId() {
      this.meetingId = null;
    }

    /** Returns true if field meetingId is set (has been assigned a value) and false otherwise */
    public boolean isSetMeetingId() {
      return this.meetingId != null;
    }

    public void setMeetingIdIsSet(boolean value) {
      if (!value) {
        this.meetingId = null;
      }
    }

    public int getPageNum() {
      return this.pageNum;
    }

    public loadMeetingMessage_args setPageNum(int pageNum) {
      this.pageNum = pageNum;
      setPageNumIsSet(true);
      return this;
    }

    public void unsetPageNum() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGENUM_ISSET_ID);
    }

    /** Returns true if field pageNum is set (has been assigned a value) and false otherwise */
    public boolean isSetPageNum() {
      return EncodingUtils.testBit(__isset_bitfield, __PAGENUM_ISSET_ID);
    }

    public void setPageNumIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGENUM_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MEETING_ID:
        if (value == null) {
          unsetMeetingId();
        } else {
          setMeetingId((String)value);
        }
        break;

      case PAGE_NUM:
        if (value == null) {
          unsetPageNum();
        } else {
          setPageNum((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MEETING_ID:
        return getMeetingId();

      case PAGE_NUM:
        return getPageNum();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MEETING_ID:
        return isSetMeetingId();
      case PAGE_NUM:
        return isSetPageNum();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof loadMeetingMessage_args)
        return this.equals((loadMeetingMessage_args)that);
      return false;
    }

    public boolean equals(loadMeetingMessage_args that) {
      if (that == null)
        return false;

      boolean this_present_meetingId = true && this.isSetMeetingId();
      boolean that_present_meetingId = true && that.isSetMeetingId();
      if (this_present_meetingId || that_present_meetingId) {
        if (!(this_present_meetingId && that_present_meetingId))
          return false;
        if (!this.meetingId.equals(that.meetingId))
          return false;
      }

      boolean this_present_pageNum = true;
      boolean that_present_pageNum = true;
      if (this_present_pageNum || that_present_pageNum) {
        if (!(this_present_pageNum && that_present_pageNum))
          return false;
        if (this.pageNum != that.pageNum)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_meetingId = true && (isSetMeetingId());
      list.add(present_meetingId);
      if (present_meetingId)
        list.add(meetingId);

      boolean present_pageNum = true;
      list.add(present_pageNum);
      if (present_pageNum)
        list.add(pageNum);

      return list.hashCode();
    }

    @Override
    public int compareTo(loadMeetingMessage_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetMeetingId()).compareTo(other.isSetMeetingId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMeetingId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.meetingId, other.meetingId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPageNum()).compareTo(other.isSetPageNum());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageNum()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageNum, other.pageNum);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("loadMeetingMessage_args(");
      boolean first = true;

      sb.append("meetingId:");
      if (this.meetingId == null) {
        sb.append("null");
      } else {
        sb.append(this.meetingId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageNum:");
      sb.append(this.pageNum);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class loadMeetingMessage_argsStandardSchemeFactory implements SchemeFactory {
      public loadMeetingMessage_argsStandardScheme getScheme() {
        return new loadMeetingMessage_argsStandardScheme();
      }
    }

    private static class loadMeetingMessage_argsStandardScheme extends StandardScheme<loadMeetingMessage_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, loadMeetingMessage_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MEETING_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.meetingId = iprot.readString();
                struct.setMeetingIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PAGE_NUM
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pageNum = iprot.readI32();
                struct.setPageNumIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, loadMeetingMessage_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.meetingId != null) {
          oprot.writeFieldBegin(MEETING_ID_FIELD_DESC);
          oprot.writeString(struct.meetingId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PAGE_NUM_FIELD_DESC);
        oprot.writeI32(struct.pageNum);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class loadMeetingMessage_argsTupleSchemeFactory implements SchemeFactory {
      public loadMeetingMessage_argsTupleScheme getScheme() {
        return new loadMeetingMessage_argsTupleScheme();
      }
    }

    private static class loadMeetingMessage_argsTupleScheme extends TupleScheme<loadMeetingMessage_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, loadMeetingMessage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMeetingId()) {
          optionals.set(0);
        }
        if (struct.isSetPageNum()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetMeetingId()) {
          oprot.writeString(struct.meetingId);
        }
        if (struct.isSetPageNum()) {
          oprot.writeI32(struct.pageNum);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, loadMeetingMessage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.meetingId = iprot.readString();
          struct.setMeetingIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.pageNum = iprot.readI32();
          struct.setPageNumIsSet(true);
        }
      }
    }

  }

  public static class loadMeetingMessage_result implements org.apache.thrift.TBase<loadMeetingMessage_result, loadMeetingMessage_result._Fields>, java.io.Serializable, Cloneable, Comparable<loadMeetingMessage_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("loadMeetingMessage_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new loadMeetingMessage_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new loadMeetingMessage_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(loadMeetingMessage_result.class, metaDataMap);
    }

    public loadMeetingMessage_result() {
    }

    public loadMeetingMessage_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public loadMeetingMessage_result(loadMeetingMessage_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public loadMeetingMessage_result deepCopy() {
      return new loadMeetingMessage_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public loadMeetingMessage_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof loadMeetingMessage_result)
        return this.equals((loadMeetingMessage_result)that);
      return false;
    }

    public boolean equals(loadMeetingMessage_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(loadMeetingMessage_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("loadMeetingMessage_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class loadMeetingMessage_resultStandardSchemeFactory implements SchemeFactory {
      public loadMeetingMessage_resultStandardScheme getScheme() {
        return new loadMeetingMessage_resultStandardScheme();
      }
    }

    private static class loadMeetingMessage_resultStandardScheme extends StandardScheme<loadMeetingMessage_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, loadMeetingMessage_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, loadMeetingMessage_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class loadMeetingMessage_resultTupleSchemeFactory implements SchemeFactory {
      public loadMeetingMessage_resultTupleScheme getScheme() {
        return new loadMeetingMessage_resultTupleScheme();
      }
    }

    private static class loadMeetingMessage_resultTupleScheme extends TupleScheme<loadMeetingMessage_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, loadMeetingMessage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, loadMeetingMessage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class postTextMessage_args implements org.apache.thrift.TBase<postTextMessage_args, postTextMessage_args._Fields>, java.io.Serializable, Cloneable, Comparable<postTextMessage_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("postTextMessage_args");

    private static final org.apache.thrift.protocol.TField MEETING_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("meetingId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PARENT_MESSAGEID_FIELD_DESC = new org.apache.thrift.protocol.TField("parentMessageid", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField POSTER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("posterId", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("content", org.apache.thrift.protocol.TType.STRING, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new postTextMessage_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new postTextMessage_argsTupleSchemeFactory());
    }

    public String meetingId; // required
    public String parentMessageid; // required
    public String posterId; // required
    public String content; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MEETING_ID((short)1, "meetingId"),
      PARENT_MESSAGEID((short)2, "parentMessageid"),
      POSTER_ID((short)3, "posterId"),
      CONTENT((short)4, "content");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MEETING_ID
            return MEETING_ID;
          case 2: // PARENT_MESSAGEID
            return PARENT_MESSAGEID;
          case 3: // POSTER_ID
            return POSTER_ID;
          case 4: // CONTENT
            return CONTENT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MEETING_ID, new org.apache.thrift.meta_data.FieldMetaData("meetingId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PARENT_MESSAGEID, new org.apache.thrift.meta_data.FieldMetaData("parentMessageid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.POSTER_ID, new org.apache.thrift.meta_data.FieldMetaData("posterId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CONTENT, new org.apache.thrift.meta_data.FieldMetaData("content", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(postTextMessage_args.class, metaDataMap);
    }

    public postTextMessage_args() {
    }

    public postTextMessage_args(
      String meetingId,
      String parentMessageid,
      String posterId,
      String content)
    {
      this();
      this.meetingId = meetingId;
      this.parentMessageid = parentMessageid;
      this.posterId = posterId;
      this.content = content;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public postTextMessage_args(postTextMessage_args other) {
      if (other.isSetMeetingId()) {
        this.meetingId = other.meetingId;
      }
      if (other.isSetParentMessageid()) {
        this.parentMessageid = other.parentMessageid;
      }
      if (other.isSetPosterId()) {
        this.posterId = other.posterId;
      }
      if (other.isSetContent()) {
        this.content = other.content;
      }
    }

    public postTextMessage_args deepCopy() {
      return new postTextMessage_args(this);
    }

    @Override
    public void clear() {
      this.meetingId = null;
      this.parentMessageid = null;
      this.posterId = null;
      this.content = null;
    }

    public String getMeetingId() {
      return this.meetingId;
    }

    public postTextMessage_args setMeetingId(String meetingId) {
      this.meetingId = meetingId;
      return this;
    }

    public void unsetMeetingId() {
      this.meetingId = null;
    }

    /** Returns true if field meetingId is set (has been assigned a value) and false otherwise */
    public boolean isSetMeetingId() {
      return this.meetingId != null;
    }

    public void setMeetingIdIsSet(boolean value) {
      if (!value) {
        this.meetingId = null;
      }
    }

    public String getParentMessageid() {
      return this.parentMessageid;
    }

    public postTextMessage_args setParentMessageid(String parentMessageid) {
      this.parentMessageid = parentMessageid;
      return this;
    }

    public void unsetParentMessageid() {
      this.parentMessageid = null;
    }

    /** Returns true if field parentMessageid is set (has been assigned a value) and false otherwise */
    public boolean isSetParentMessageid() {
      return this.parentMessageid != null;
    }

    public void setParentMessageidIsSet(boolean value) {
      if (!value) {
        this.parentMessageid = null;
      }
    }

    public String getPosterId() {
      return this.posterId;
    }

    public postTextMessage_args setPosterId(String posterId) {
      this.posterId = posterId;
      return this;
    }

    public void unsetPosterId() {
      this.posterId = null;
    }

    /** Returns true if field posterId is set (has been assigned a value) and false otherwise */
    public boolean isSetPosterId() {
      return this.posterId != null;
    }

    public void setPosterIdIsSet(boolean value) {
      if (!value) {
        this.posterId = null;
      }
    }

    public String getContent() {
      return this.content;
    }

    public postTextMessage_args setContent(String content) {
      this.content = content;
      return this;
    }

    public void unsetContent() {
      this.content = null;
    }

    /** Returns true if field content is set (has been assigned a value) and false otherwise */
    public boolean isSetContent() {
      return this.content != null;
    }

    public void setContentIsSet(boolean value) {
      if (!value) {
        this.content = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MEETING_ID:
        if (value == null) {
          unsetMeetingId();
        } else {
          setMeetingId((String)value);
        }
        break;

      case PARENT_MESSAGEID:
        if (value == null) {
          unsetParentMessageid();
        } else {
          setParentMessageid((String)value);
        }
        break;

      case POSTER_ID:
        if (value == null) {
          unsetPosterId();
        } else {
          setPosterId((String)value);
        }
        break;

      case CONTENT:
        if (value == null) {
          unsetContent();
        } else {
          setContent((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MEETING_ID:
        return getMeetingId();

      case PARENT_MESSAGEID:
        return getParentMessageid();

      case POSTER_ID:
        return getPosterId();

      case CONTENT:
        return getContent();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MEETING_ID:
        return isSetMeetingId();
      case PARENT_MESSAGEID:
        return isSetParentMessageid();
      case POSTER_ID:
        return isSetPosterId();
      case CONTENT:
        return isSetContent();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof postTextMessage_args)
        return this.equals((postTextMessage_args)that);
      return false;
    }

    public boolean equals(postTextMessage_args that) {
      if (that == null)
        return false;

      boolean this_present_meetingId = true && this.isSetMeetingId();
      boolean that_present_meetingId = true && that.isSetMeetingId();
      if (this_present_meetingId || that_present_meetingId) {
        if (!(this_present_meetingId && that_present_meetingId))
          return false;
        if (!this.meetingId.equals(that.meetingId))
          return false;
      }

      boolean this_present_parentMessageid = true && this.isSetParentMessageid();
      boolean that_present_parentMessageid = true && that.isSetParentMessageid();
      if (this_present_parentMessageid || that_present_parentMessageid) {
        if (!(this_present_parentMessageid && that_present_parentMessageid))
          return false;
        if (!this.parentMessageid.equals(that.parentMessageid))
          return false;
      }

      boolean this_present_posterId = true && this.isSetPosterId();
      boolean that_present_posterId = true && that.isSetPosterId();
      if (this_present_posterId || that_present_posterId) {
        if (!(this_present_posterId && that_present_posterId))
          return false;
        if (!this.posterId.equals(that.posterId))
          return false;
      }

      boolean this_present_content = true && this.isSetContent();
      boolean that_present_content = true && that.isSetContent();
      if (this_present_content || that_present_content) {
        if (!(this_present_content && that_present_content))
          return false;
        if (!this.content.equals(that.content))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_meetingId = true && (isSetMeetingId());
      list.add(present_meetingId);
      if (present_meetingId)
        list.add(meetingId);

      boolean present_parentMessageid = true && (isSetParentMessageid());
      list.add(present_parentMessageid);
      if (present_parentMessageid)
        list.add(parentMessageid);

      boolean present_posterId = true && (isSetPosterId());
      list.add(present_posterId);
      if (present_posterId)
        list.add(posterId);

      boolean present_content = true && (isSetContent());
      list.add(present_content);
      if (present_content)
        list.add(content);

      return list.hashCode();
    }

    @Override
    public int compareTo(postTextMessage_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetMeetingId()).compareTo(other.isSetMeetingId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMeetingId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.meetingId, other.meetingId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetParentMessageid()).compareTo(other.isSetParentMessageid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParentMessageid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parentMessageid, other.parentMessageid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPosterId()).compareTo(other.isSetPosterId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPosterId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.posterId, other.posterId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetContent()).compareTo(other.isSetContent());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetContent()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.content, other.content);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("postTextMessage_args(");
      boolean first = true;

      sb.append("meetingId:");
      if (this.meetingId == null) {
        sb.append("null");
      } else {
        sb.append(this.meetingId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("parentMessageid:");
      if (this.parentMessageid == null) {
        sb.append("null");
      } else {
        sb.append(this.parentMessageid);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("posterId:");
      if (this.posterId == null) {
        sb.append("null");
      } else {
        sb.append(this.posterId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("content:");
      if (this.content == null) {
        sb.append("null");
      } else {
        sb.append(this.content);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class postTextMessage_argsStandardSchemeFactory implements SchemeFactory {
      public postTextMessage_argsStandardScheme getScheme() {
        return new postTextMessage_argsStandardScheme();
      }
    }

    private static class postTextMessage_argsStandardScheme extends StandardScheme<postTextMessage_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, postTextMessage_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MEETING_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.meetingId = iprot.readString();
                struct.setMeetingIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PARENT_MESSAGEID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.parentMessageid = iprot.readString();
                struct.setParentMessageidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // POSTER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.posterId = iprot.readString();
                struct.setPosterIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // CONTENT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.content = iprot.readString();
                struct.setContentIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, postTextMessage_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.meetingId != null) {
          oprot.writeFieldBegin(MEETING_ID_FIELD_DESC);
          oprot.writeString(struct.meetingId);
          oprot.writeFieldEnd();
        }
        if (struct.parentMessageid != null) {
          oprot.writeFieldBegin(PARENT_MESSAGEID_FIELD_DESC);
          oprot.writeString(struct.parentMessageid);
          oprot.writeFieldEnd();
        }
        if (struct.posterId != null) {
          oprot.writeFieldBegin(POSTER_ID_FIELD_DESC);
          oprot.writeString(struct.posterId);
          oprot.writeFieldEnd();
        }
        if (struct.content != null) {
          oprot.writeFieldBegin(CONTENT_FIELD_DESC);
          oprot.writeString(struct.content);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class postTextMessage_argsTupleSchemeFactory implements SchemeFactory {
      public postTextMessage_argsTupleScheme getScheme() {
        return new postTextMessage_argsTupleScheme();
      }
    }

    private static class postTextMessage_argsTupleScheme extends TupleScheme<postTextMessage_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, postTextMessage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMeetingId()) {
          optionals.set(0);
        }
        if (struct.isSetParentMessageid()) {
          optionals.set(1);
        }
        if (struct.isSetPosterId()) {
          optionals.set(2);
        }
        if (struct.isSetContent()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetMeetingId()) {
          oprot.writeString(struct.meetingId);
        }
        if (struct.isSetParentMessageid()) {
          oprot.writeString(struct.parentMessageid);
        }
        if (struct.isSetPosterId()) {
          oprot.writeString(struct.posterId);
        }
        if (struct.isSetContent()) {
          oprot.writeString(struct.content);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, postTextMessage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.meetingId = iprot.readString();
          struct.setMeetingIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.parentMessageid = iprot.readString();
          struct.setParentMessageidIsSet(true);
        }
        if (incoming.get(2)) {
          struct.posterId = iprot.readString();
          struct.setPosterIdIsSet(true);
        }
        if (incoming.get(3)) {
          struct.content = iprot.readString();
          struct.setContentIsSet(true);
        }
      }
    }

  }

  public static class postTextMessage_result implements org.apache.thrift.TBase<postTextMessage_result, postTextMessage_result._Fields>, java.io.Serializable, Cloneable, Comparable<postTextMessage_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("postTextMessage_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new postTextMessage_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new postTextMessage_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(postTextMessage_result.class, metaDataMap);
    }

    public postTextMessage_result() {
    }

    public postTextMessage_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public postTextMessage_result(postTextMessage_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public postTextMessage_result deepCopy() {
      return new postTextMessage_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public postTextMessage_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof postTextMessage_result)
        return this.equals((postTextMessage_result)that);
      return false;
    }

    public boolean equals(postTextMessage_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(postTextMessage_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("postTextMessage_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class postTextMessage_resultStandardSchemeFactory implements SchemeFactory {
      public postTextMessage_resultStandardScheme getScheme() {
        return new postTextMessage_resultStandardScheme();
      }
    }

    private static class postTextMessage_resultStandardScheme extends StandardScheme<postTextMessage_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, postTextMessage_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, postTextMessage_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class postTextMessage_resultTupleSchemeFactory implements SchemeFactory {
      public postTextMessage_resultTupleScheme getScheme() {
        return new postTextMessage_resultTupleScheme();
      }
    }

    private static class postTextMessage_resultTupleScheme extends TupleScheme<postTextMessage_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, postTextMessage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, postTextMessage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class postVoiceMessage_args implements org.apache.thrift.TBase<postVoiceMessage_args, postVoiceMessage_args._Fields>, java.io.Serializable, Cloneable, Comparable<postVoiceMessage_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("postVoiceMessage_args");

    private static final org.apache.thrift.protocol.TField MEETINGID_FIELD_DESC = new org.apache.thrift.protocol.TField("meetingid", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PARENT_MESSAGEID_FIELD_DESC = new org.apache.thrift.protocol.TField("parentMessageid", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField POSTER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("posterId", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new postVoiceMessage_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new postVoiceMessage_argsTupleSchemeFactory());
    }

    public String meetingid; // required
    public String parentMessageid; // required
    public String posterId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MEETINGID((short)1, "meetingid"),
      PARENT_MESSAGEID((short)2, "parentMessageid"),
      POSTER_ID((short)3, "posterId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MEETINGID
            return MEETINGID;
          case 2: // PARENT_MESSAGEID
            return PARENT_MESSAGEID;
          case 3: // POSTER_ID
            return POSTER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MEETINGID, new org.apache.thrift.meta_data.FieldMetaData("meetingid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PARENT_MESSAGEID, new org.apache.thrift.meta_data.FieldMetaData("parentMessageid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.POSTER_ID, new org.apache.thrift.meta_data.FieldMetaData("posterId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(postVoiceMessage_args.class, metaDataMap);
    }

    public postVoiceMessage_args() {
    }

    public postVoiceMessage_args(
      String meetingid,
      String parentMessageid,
      String posterId)
    {
      this();
      this.meetingid = meetingid;
      this.parentMessageid = parentMessageid;
      this.posterId = posterId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public postVoiceMessage_args(postVoiceMessage_args other) {
      if (other.isSetMeetingid()) {
        this.meetingid = other.meetingid;
      }
      if (other.isSetParentMessageid()) {
        this.parentMessageid = other.parentMessageid;
      }
      if (other.isSetPosterId()) {
        this.posterId = other.posterId;
      }
    }

    public postVoiceMessage_args deepCopy() {
      return new postVoiceMessage_args(this);
    }

    @Override
    public void clear() {
      this.meetingid = null;
      this.parentMessageid = null;
      this.posterId = null;
    }

    public String getMeetingid() {
      return this.meetingid;
    }

    public postVoiceMessage_args setMeetingid(String meetingid) {
      this.meetingid = meetingid;
      return this;
    }

    public void unsetMeetingid() {
      this.meetingid = null;
    }

    /** Returns true if field meetingid is set (has been assigned a value) and false otherwise */
    public boolean isSetMeetingid() {
      return this.meetingid != null;
    }

    public void setMeetingidIsSet(boolean value) {
      if (!value) {
        this.meetingid = null;
      }
    }

    public String getParentMessageid() {
      return this.parentMessageid;
    }

    public postVoiceMessage_args setParentMessageid(String parentMessageid) {
      this.parentMessageid = parentMessageid;
      return this;
    }

    public void unsetParentMessageid() {
      this.parentMessageid = null;
    }

    /** Returns true if field parentMessageid is set (has been assigned a value) and false otherwise */
    public boolean isSetParentMessageid() {
      return this.parentMessageid != null;
    }

    public void setParentMessageidIsSet(boolean value) {
      if (!value) {
        this.parentMessageid = null;
      }
    }

    public String getPosterId() {
      return this.posterId;
    }

    public postVoiceMessage_args setPosterId(String posterId) {
      this.posterId = posterId;
      return this;
    }

    public void unsetPosterId() {
      this.posterId = null;
    }

    /** Returns true if field posterId is set (has been assigned a value) and false otherwise */
    public boolean isSetPosterId() {
      return this.posterId != null;
    }

    public void setPosterIdIsSet(boolean value) {
      if (!value) {
        this.posterId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MEETINGID:
        if (value == null) {
          unsetMeetingid();
        } else {
          setMeetingid((String)value);
        }
        break;

      case PARENT_MESSAGEID:
        if (value == null) {
          unsetParentMessageid();
        } else {
          setParentMessageid((String)value);
        }
        break;

      case POSTER_ID:
        if (value == null) {
          unsetPosterId();
        } else {
          setPosterId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MEETINGID:
        return getMeetingid();

      case PARENT_MESSAGEID:
        return getParentMessageid();

      case POSTER_ID:
        return getPosterId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MEETINGID:
        return isSetMeetingid();
      case PARENT_MESSAGEID:
        return isSetParentMessageid();
      case POSTER_ID:
        return isSetPosterId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof postVoiceMessage_args)
        return this.equals((postVoiceMessage_args)that);
      return false;
    }

    public boolean equals(postVoiceMessage_args that) {
      if (that == null)
        return false;

      boolean this_present_meetingid = true && this.isSetMeetingid();
      boolean that_present_meetingid = true && that.isSetMeetingid();
      if (this_present_meetingid || that_present_meetingid) {
        if (!(this_present_meetingid && that_present_meetingid))
          return false;
        if (!this.meetingid.equals(that.meetingid))
          return false;
      }

      boolean this_present_parentMessageid = true && this.isSetParentMessageid();
      boolean that_present_parentMessageid = true && that.isSetParentMessageid();
      if (this_present_parentMessageid || that_present_parentMessageid) {
        if (!(this_present_parentMessageid && that_present_parentMessageid))
          return false;
        if (!this.parentMessageid.equals(that.parentMessageid))
          return false;
      }

      boolean this_present_posterId = true && this.isSetPosterId();
      boolean that_present_posterId = true && that.isSetPosterId();
      if (this_present_posterId || that_present_posterId) {
        if (!(this_present_posterId && that_present_posterId))
          return false;
        if (!this.posterId.equals(that.posterId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_meetingid = true && (isSetMeetingid());
      list.add(present_meetingid);
      if (present_meetingid)
        list.add(meetingid);

      boolean present_parentMessageid = true && (isSetParentMessageid());
      list.add(present_parentMessageid);
      if (present_parentMessageid)
        list.add(parentMessageid);

      boolean present_posterId = true && (isSetPosterId());
      list.add(present_posterId);
      if (present_posterId)
        list.add(posterId);

      return list.hashCode();
    }

    @Override
    public int compareTo(postVoiceMessage_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetMeetingid()).compareTo(other.isSetMeetingid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMeetingid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.meetingid, other.meetingid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetParentMessageid()).compareTo(other.isSetParentMessageid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParentMessageid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parentMessageid, other.parentMessageid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPosterId()).compareTo(other.isSetPosterId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPosterId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.posterId, other.posterId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("postVoiceMessage_args(");
      boolean first = true;

      sb.append("meetingid:");
      if (this.meetingid == null) {
        sb.append("null");
      } else {
        sb.append(this.meetingid);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("parentMessageid:");
      if (this.parentMessageid == null) {
        sb.append("null");
      } else {
        sb.append(this.parentMessageid);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("posterId:");
      if (this.posterId == null) {
        sb.append("null");
      } else {
        sb.append(this.posterId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class postVoiceMessage_argsStandardSchemeFactory implements SchemeFactory {
      public postVoiceMessage_argsStandardScheme getScheme() {
        return new postVoiceMessage_argsStandardScheme();
      }
    }

    private static class postVoiceMessage_argsStandardScheme extends StandardScheme<postVoiceMessage_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, postVoiceMessage_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MEETINGID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.meetingid = iprot.readString();
                struct.setMeetingidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PARENT_MESSAGEID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.parentMessageid = iprot.readString();
                struct.setParentMessageidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // POSTER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.posterId = iprot.readString();
                struct.setPosterIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, postVoiceMessage_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.meetingid != null) {
          oprot.writeFieldBegin(MEETINGID_FIELD_DESC);
          oprot.writeString(struct.meetingid);
          oprot.writeFieldEnd();
        }
        if (struct.parentMessageid != null) {
          oprot.writeFieldBegin(PARENT_MESSAGEID_FIELD_DESC);
          oprot.writeString(struct.parentMessageid);
          oprot.writeFieldEnd();
        }
        if (struct.posterId != null) {
          oprot.writeFieldBegin(POSTER_ID_FIELD_DESC);
          oprot.writeString(struct.posterId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class postVoiceMessage_argsTupleSchemeFactory implements SchemeFactory {
      public postVoiceMessage_argsTupleScheme getScheme() {
        return new postVoiceMessage_argsTupleScheme();
      }
    }

    private static class postVoiceMessage_argsTupleScheme extends TupleScheme<postVoiceMessage_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, postVoiceMessage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMeetingid()) {
          optionals.set(0);
        }
        if (struct.isSetParentMessageid()) {
          optionals.set(1);
        }
        if (struct.isSetPosterId()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetMeetingid()) {
          oprot.writeString(struct.meetingid);
        }
        if (struct.isSetParentMessageid()) {
          oprot.writeString(struct.parentMessageid);
        }
        if (struct.isSetPosterId()) {
          oprot.writeString(struct.posterId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, postVoiceMessage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.meetingid = iprot.readString();
          struct.setMeetingidIsSet(true);
        }
        if (incoming.get(1)) {
          struct.parentMessageid = iprot.readString();
          struct.setParentMessageidIsSet(true);
        }
        if (incoming.get(2)) {
          struct.posterId = iprot.readString();
          struct.setPosterIdIsSet(true);
        }
      }
    }

  }

  public static class postVoiceMessage_result implements org.apache.thrift.TBase<postVoiceMessage_result, postVoiceMessage_result._Fields>, java.io.Serializable, Cloneable, Comparable<postVoiceMessage_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("postVoiceMessage_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new postVoiceMessage_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new postVoiceMessage_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(postVoiceMessage_result.class, metaDataMap);
    }

    public postVoiceMessage_result() {
    }

    public postVoiceMessage_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public postVoiceMessage_result(postVoiceMessage_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public postVoiceMessage_result deepCopy() {
      return new postVoiceMessage_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public postVoiceMessage_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof postVoiceMessage_result)
        return this.equals((postVoiceMessage_result)that);
      return false;
    }

    public boolean equals(postVoiceMessage_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(postVoiceMessage_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("postVoiceMessage_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class postVoiceMessage_resultStandardSchemeFactory implements SchemeFactory {
      public postVoiceMessage_resultStandardScheme getScheme() {
        return new postVoiceMessage_resultStandardScheme();
      }
    }

    private static class postVoiceMessage_resultStandardScheme extends StandardScheme<postVoiceMessage_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, postVoiceMessage_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, postVoiceMessage_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class postVoiceMessage_resultTupleSchemeFactory implements SchemeFactory {
      public postVoiceMessage_resultTupleScheme getScheme() {
        return new postVoiceMessage_resultTupleScheme();
      }
    }

    private static class postVoiceMessage_resultTupleScheme extends TupleScheme<postVoiceMessage_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, postVoiceMessage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, postVoiceMessage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class supportMessage_args implements org.apache.thrift.TBase<supportMessage_args, supportMessage_args._Fields>, java.io.Serializable, Cloneable, Comparable<supportMessage_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("supportMessage_args");

    private static final org.apache.thrift.protocol.TField MESSAGEID_FIELD_DESC = new org.apache.thrift.protocol.TField("messageid", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new supportMessage_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new supportMessage_argsTupleSchemeFactory());
    }

    public String messageid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MESSAGEID((short)1, "messageid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MESSAGEID
            return MESSAGEID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MESSAGEID, new org.apache.thrift.meta_data.FieldMetaData("messageid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(supportMessage_args.class, metaDataMap);
    }

    public supportMessage_args() {
    }

    public supportMessage_args(
      String messageid)
    {
      this();
      this.messageid = messageid;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public supportMessage_args(supportMessage_args other) {
      if (other.isSetMessageid()) {
        this.messageid = other.messageid;
      }
    }

    public supportMessage_args deepCopy() {
      return new supportMessage_args(this);
    }

    @Override
    public void clear() {
      this.messageid = null;
    }

    public String getMessageid() {
      return this.messageid;
    }

    public supportMessage_args setMessageid(String messageid) {
      this.messageid = messageid;
      return this;
    }

    public void unsetMessageid() {
      this.messageid = null;
    }

    /** Returns true if field messageid is set (has been assigned a value) and false otherwise */
    public boolean isSetMessageid() {
      return this.messageid != null;
    }

    public void setMessageidIsSet(boolean value) {
      if (!value) {
        this.messageid = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MESSAGEID:
        if (value == null) {
          unsetMessageid();
        } else {
          setMessageid((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MESSAGEID:
        return getMessageid();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MESSAGEID:
        return isSetMessageid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof supportMessage_args)
        return this.equals((supportMessage_args)that);
      return false;
    }

    public boolean equals(supportMessage_args that) {
      if (that == null)
        return false;

      boolean this_present_messageid = true && this.isSetMessageid();
      boolean that_present_messageid = true && that.isSetMessageid();
      if (this_present_messageid || that_present_messageid) {
        if (!(this_present_messageid && that_present_messageid))
          return false;
        if (!this.messageid.equals(that.messageid))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_messageid = true && (isSetMessageid());
      list.add(present_messageid);
      if (present_messageid)
        list.add(messageid);

      return list.hashCode();
    }

    @Override
    public int compareTo(supportMessage_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetMessageid()).compareTo(other.isSetMessageid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMessageid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.messageid, other.messageid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("supportMessage_args(");
      boolean first = true;

      sb.append("messageid:");
      if (this.messageid == null) {
        sb.append("null");
      } else {
        sb.append(this.messageid);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class supportMessage_argsStandardSchemeFactory implements SchemeFactory {
      public supportMessage_argsStandardScheme getScheme() {
        return new supportMessage_argsStandardScheme();
      }
    }

    private static class supportMessage_argsStandardScheme extends StandardScheme<supportMessage_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, supportMessage_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MESSAGEID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.messageid = iprot.readString();
                struct.setMessageidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, supportMessage_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.messageid != null) {
          oprot.writeFieldBegin(MESSAGEID_FIELD_DESC);
          oprot.writeString(struct.messageid);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class supportMessage_argsTupleSchemeFactory implements SchemeFactory {
      public supportMessage_argsTupleScheme getScheme() {
        return new supportMessage_argsTupleScheme();
      }
    }

    private static class supportMessage_argsTupleScheme extends TupleScheme<supportMessage_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, supportMessage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMessageid()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetMessageid()) {
          oprot.writeString(struct.messageid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, supportMessage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.messageid = iprot.readString();
          struct.setMessageidIsSet(true);
        }
      }
    }

  }

  public static class supportMessage_result implements org.apache.thrift.TBase<supportMessage_result, supportMessage_result._Fields>, java.io.Serializable, Cloneable, Comparable<supportMessage_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("supportMessage_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new supportMessage_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new supportMessage_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(supportMessage_result.class, metaDataMap);
    }

    public supportMessage_result() {
    }

    public supportMessage_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public supportMessage_result(supportMessage_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public supportMessage_result deepCopy() {
      return new supportMessage_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public supportMessage_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof supportMessage_result)
        return this.equals((supportMessage_result)that);
      return false;
    }

    public boolean equals(supportMessage_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(supportMessage_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("supportMessage_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class supportMessage_resultStandardSchemeFactory implements SchemeFactory {
      public supportMessage_resultStandardScheme getScheme() {
        return new supportMessage_resultStandardScheme();
      }
    }

    private static class supportMessage_resultStandardScheme extends StandardScheme<supportMessage_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, supportMessage_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, supportMessage_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class supportMessage_resultTupleSchemeFactory implements SchemeFactory {
      public supportMessage_resultTupleScheme getScheme() {
        return new supportMessage_resultTupleScheme();
      }
    }

    private static class supportMessage_resultTupleScheme extends TupleScheme<supportMessage_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, supportMessage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, supportMessage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
