/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cnd.greencube.server.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-03-25")
public class RegistService {

  /**
   * 注册服务
   * @author 胡晓光
   */
  public interface Iface {

    /**
     * 手机注册
     * @param ownerId -- mobile
     * @param pageNum -- verifyCode
     * @param imei -- 手机串号
     * @param password -- 密码
     * 
     * @param mobile
     * @param verifyCode
     * @param imei
     * @param password
     */
    public String appRegist(String mobile, String verifyCode, String imei, String password) throws org.apache.thrift.TException;

    /**
     * 显示一个分类下面的视频
     * @param usernmae -- 业务分类
     * @param password -- 页数
     * @param nickname -- 昵称
     * @param mobile -- 手机号码
     * 
     * @param usernmae
     * @param password
     * @param nickname
     * @param mobile
     */
    public String webRegist(String usernmae, String password, String nickname, String mobile) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void appRegist(String mobile, String verifyCode, String imei, String password, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void webRegist(String usernmae, String password, String nickname, String mobile, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public String appRegist(String mobile, String verifyCode, String imei, String password) throws org.apache.thrift.TException
    {
      send_appRegist(mobile, verifyCode, imei, password);
      return recv_appRegist();
    }

    public void send_appRegist(String mobile, String verifyCode, String imei, String password) throws org.apache.thrift.TException
    {
      appRegist_args args = new appRegist_args();
      args.setMobile(mobile);
      args.setVerifyCode(verifyCode);
      args.setImei(imei);
      args.setPassword(password);
      sendBase("appRegist", args);
    }

    public String recv_appRegist() throws org.apache.thrift.TException
    {
      appRegist_result result = new appRegist_result();
      receiveBase(result, "appRegist");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "appRegist failed: unknown result");
    }

    public String webRegist(String usernmae, String password, String nickname, String mobile) throws org.apache.thrift.TException
    {
      send_webRegist(usernmae, password, nickname, mobile);
      return recv_webRegist();
    }

    public void send_webRegist(String usernmae, String password, String nickname, String mobile) throws org.apache.thrift.TException
    {
      webRegist_args args = new webRegist_args();
      args.setUsernmae(usernmae);
      args.setPassword(password);
      args.setNickname(nickname);
      args.setMobile(mobile);
      sendBase("webRegist", args);
    }

    public String recv_webRegist() throws org.apache.thrift.TException
    {
      webRegist_result result = new webRegist_result();
      receiveBase(result, "webRegist");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "webRegist failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void appRegist(String mobile, String verifyCode, String imei, String password, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      appRegist_call method_call = new appRegist_call(mobile, verifyCode, imei, password, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class appRegist_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String mobile;
      private String verifyCode;
      private String imei;
      private String password;
      public appRegist_call(String mobile, String verifyCode, String imei, String password, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.mobile = mobile;
        this.verifyCode = verifyCode;
        this.imei = imei;
        this.password = password;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("appRegist", org.apache.thrift.protocol.TMessageType.CALL, 0));
        appRegist_args args = new appRegist_args();
        args.setMobile(mobile);
        args.setVerifyCode(verifyCode);
        args.setImei(imei);
        args.setPassword(password);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_appRegist();
      }
    }

    public void webRegist(String usernmae, String password, String nickname, String mobile, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      webRegist_call method_call = new webRegist_call(usernmae, password, nickname, mobile, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class webRegist_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String usernmae;
      private String password;
      private String nickname;
      private String mobile;
      public webRegist_call(String usernmae, String password, String nickname, String mobile, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.usernmae = usernmae;
        this.password = password;
        this.nickname = nickname;
        this.mobile = mobile;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("webRegist", org.apache.thrift.protocol.TMessageType.CALL, 0));
        webRegist_args args = new webRegist_args();
        args.setUsernmae(usernmae);
        args.setPassword(password);
        args.setNickname(nickname);
        args.setMobile(mobile);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_webRegist();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("appRegist", new appRegist());
      processMap.put("webRegist", new webRegist());
      return processMap;
    }

    public static class appRegist<I extends Iface> extends org.apache.thrift.ProcessFunction<I, appRegist_args> {
      public appRegist() {
        super("appRegist");
      }

      public appRegist_args getEmptyArgsInstance() {
        return new appRegist_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public appRegist_result getResult(I iface, appRegist_args args) throws org.apache.thrift.TException {
        appRegist_result result = new appRegist_result();
        result.success = iface.appRegist(args.mobile, args.verifyCode, args.imei, args.password);
        return result;
      }
    }

    public static class webRegist<I extends Iface> extends org.apache.thrift.ProcessFunction<I, webRegist_args> {
      public webRegist() {
        super("webRegist");
      }

      public webRegist_args getEmptyArgsInstance() {
        return new webRegist_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public webRegist_result getResult(I iface, webRegist_args args) throws org.apache.thrift.TException {
        webRegist_result result = new webRegist_result();
        result.success = iface.webRegist(args.usernmae, args.password, args.nickname, args.mobile);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("appRegist", new appRegist());
      processMap.put("webRegist", new webRegist());
      return processMap;
    }

    public static class appRegist<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, appRegist_args, String> {
      public appRegist() {
        super("appRegist");
      }

      public appRegist_args getEmptyArgsInstance() {
        return new appRegist_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            appRegist_result result = new appRegist_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            appRegist_result result = new appRegist_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, appRegist_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.appRegist(args.mobile, args.verifyCode, args.imei, args.password,resultHandler);
      }
    }

    public static class webRegist<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, webRegist_args, String> {
      public webRegist() {
        super("webRegist");
      }

      public webRegist_args getEmptyArgsInstance() {
        return new webRegist_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            webRegist_result result = new webRegist_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            webRegist_result result = new webRegist_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, webRegist_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.webRegist(args.usernmae, args.password, args.nickname, args.mobile,resultHandler);
      }
    }

  }

  public static class appRegist_args implements org.apache.thrift.TBase<appRegist_args, appRegist_args._Fields>, java.io.Serializable, Cloneable, Comparable<appRegist_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("appRegist_args");

    private static final org.apache.thrift.protocol.TField MOBILE_FIELD_DESC = new org.apache.thrift.protocol.TField("mobile", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField VERIFY_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("verifyCode", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField IMEI_FIELD_DESC = new org.apache.thrift.protocol.TField("imei", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("password", org.apache.thrift.protocol.TType.STRING, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new appRegist_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new appRegist_argsTupleSchemeFactory());
    }

    public String mobile; // required
    public String verifyCode; // required
    public String imei; // required
    public String password; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MOBILE((short)1, "mobile"),
      VERIFY_CODE((short)2, "verifyCode"),
      IMEI((short)3, "imei"),
      PASSWORD((short)4, "password");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MOBILE
            return MOBILE;
          case 2: // VERIFY_CODE
            return VERIFY_CODE;
          case 3: // IMEI
            return IMEI;
          case 4: // PASSWORD
            return PASSWORD;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MOBILE, new org.apache.thrift.meta_data.FieldMetaData("mobile", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.VERIFY_CODE, new org.apache.thrift.meta_data.FieldMetaData("verifyCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.IMEI, new org.apache.thrift.meta_data.FieldMetaData("imei", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("password", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(appRegist_args.class, metaDataMap);
    }

    public appRegist_args() {
    }

    public appRegist_args(
      String mobile,
      String verifyCode,
      String imei,
      String password)
    {
      this();
      this.mobile = mobile;
      this.verifyCode = verifyCode;
      this.imei = imei;
      this.password = password;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public appRegist_args(appRegist_args other) {
      if (other.isSetMobile()) {
        this.mobile = other.mobile;
      }
      if (other.isSetVerifyCode()) {
        this.verifyCode = other.verifyCode;
      }
      if (other.isSetImei()) {
        this.imei = other.imei;
      }
      if (other.isSetPassword()) {
        this.password = other.password;
      }
    }

    public appRegist_args deepCopy() {
      return new appRegist_args(this);
    }

    @Override
    public void clear() {
      this.mobile = null;
      this.verifyCode = null;
      this.imei = null;
      this.password = null;
    }

    public String getMobile() {
      return this.mobile;
    }

    public appRegist_args setMobile(String mobile) {
      this.mobile = mobile;
      return this;
    }

    public void unsetMobile() {
      this.mobile = null;
    }

    /** Returns true if field mobile is set (has been assigned a value) and false otherwise */
    public boolean isSetMobile() {
      return this.mobile != null;
    }

    public void setMobileIsSet(boolean value) {
      if (!value) {
        this.mobile = null;
      }
    }

    public String getVerifyCode() {
      return this.verifyCode;
    }

    public appRegist_args setVerifyCode(String verifyCode) {
      this.verifyCode = verifyCode;
      return this;
    }

    public void unsetVerifyCode() {
      this.verifyCode = null;
    }

    /** Returns true if field verifyCode is set (has been assigned a value) and false otherwise */
    public boolean isSetVerifyCode() {
      return this.verifyCode != null;
    }

    public void setVerifyCodeIsSet(boolean value) {
      if (!value) {
        this.verifyCode = null;
      }
    }

    public String getImei() {
      return this.imei;
    }

    public appRegist_args setImei(String imei) {
      this.imei = imei;
      return this;
    }

    public void unsetImei() {
      this.imei = null;
    }

    /** Returns true if field imei is set (has been assigned a value) and false otherwise */
    public boolean isSetImei() {
      return this.imei != null;
    }

    public void setImeiIsSet(boolean value) {
      if (!value) {
        this.imei = null;
      }
    }

    public String getPassword() {
      return this.password;
    }

    public appRegist_args setPassword(String password) {
      this.password = password;
      return this;
    }

    public void unsetPassword() {
      this.password = null;
    }

    /** Returns true if field password is set (has been assigned a value) and false otherwise */
    public boolean isSetPassword() {
      return this.password != null;
    }

    public void setPasswordIsSet(boolean value) {
      if (!value) {
        this.password = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MOBILE:
        if (value == null) {
          unsetMobile();
        } else {
          setMobile((String)value);
        }
        break;

      case VERIFY_CODE:
        if (value == null) {
          unsetVerifyCode();
        } else {
          setVerifyCode((String)value);
        }
        break;

      case IMEI:
        if (value == null) {
          unsetImei();
        } else {
          setImei((String)value);
        }
        break;

      case PASSWORD:
        if (value == null) {
          unsetPassword();
        } else {
          setPassword((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MOBILE:
        return getMobile();

      case VERIFY_CODE:
        return getVerifyCode();

      case IMEI:
        return getImei();

      case PASSWORD:
        return getPassword();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MOBILE:
        return isSetMobile();
      case VERIFY_CODE:
        return isSetVerifyCode();
      case IMEI:
        return isSetImei();
      case PASSWORD:
        return isSetPassword();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof appRegist_args)
        return this.equals((appRegist_args)that);
      return false;
    }

    public boolean equals(appRegist_args that) {
      if (that == null)
        return false;

      boolean this_present_mobile = true && this.isSetMobile();
      boolean that_present_mobile = true && that.isSetMobile();
      if (this_present_mobile || that_present_mobile) {
        if (!(this_present_mobile && that_present_mobile))
          return false;
        if (!this.mobile.equals(that.mobile))
          return false;
      }

      boolean this_present_verifyCode = true && this.isSetVerifyCode();
      boolean that_present_verifyCode = true && that.isSetVerifyCode();
      if (this_present_verifyCode || that_present_verifyCode) {
        if (!(this_present_verifyCode && that_present_verifyCode))
          return false;
        if (!this.verifyCode.equals(that.verifyCode))
          return false;
      }

      boolean this_present_imei = true && this.isSetImei();
      boolean that_present_imei = true && that.isSetImei();
      if (this_present_imei || that_present_imei) {
        if (!(this_present_imei && that_present_imei))
          return false;
        if (!this.imei.equals(that.imei))
          return false;
      }

      boolean this_present_password = true && this.isSetPassword();
      boolean that_present_password = true && that.isSetPassword();
      if (this_present_password || that_present_password) {
        if (!(this_present_password && that_present_password))
          return false;
        if (!this.password.equals(that.password))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_mobile = true && (isSetMobile());
      list.add(present_mobile);
      if (present_mobile)
        list.add(mobile);

      boolean present_verifyCode = true && (isSetVerifyCode());
      list.add(present_verifyCode);
      if (present_verifyCode)
        list.add(verifyCode);

      boolean present_imei = true && (isSetImei());
      list.add(present_imei);
      if (present_imei)
        list.add(imei);

      boolean present_password = true && (isSetPassword());
      list.add(present_password);
      if (present_password)
        list.add(password);

      return list.hashCode();
    }

    @Override
    public int compareTo(appRegist_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetMobile()).compareTo(other.isSetMobile());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMobile()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mobile, other.mobile);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetVerifyCode()).compareTo(other.isSetVerifyCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVerifyCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.verifyCode, other.verifyCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetImei()).compareTo(other.isSetImei());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetImei()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.imei, other.imei);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPassword()).compareTo(other.isSetPassword());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPassword()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.password, other.password);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("appRegist_args(");
      boolean first = true;

      sb.append("mobile:");
      if (this.mobile == null) {
        sb.append("null");
      } else {
        sb.append(this.mobile);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("verifyCode:");
      if (this.verifyCode == null) {
        sb.append("null");
      } else {
        sb.append(this.verifyCode);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("imei:");
      if (this.imei == null) {
        sb.append("null");
      } else {
        sb.append(this.imei);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("password:");
      if (this.password == null) {
        sb.append("null");
      } else {
        sb.append(this.password);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class appRegist_argsStandardSchemeFactory implements SchemeFactory {
      public appRegist_argsStandardScheme getScheme() {
        return new appRegist_argsStandardScheme();
      }
    }

    private static class appRegist_argsStandardScheme extends StandardScheme<appRegist_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, appRegist_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MOBILE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.mobile = iprot.readString();
                struct.setMobileIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // VERIFY_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.verifyCode = iprot.readString();
                struct.setVerifyCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // IMEI
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.imei = iprot.readString();
                struct.setImeiIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // PASSWORD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.password = iprot.readString();
                struct.setPasswordIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, appRegist_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.mobile != null) {
          oprot.writeFieldBegin(MOBILE_FIELD_DESC);
          oprot.writeString(struct.mobile);
          oprot.writeFieldEnd();
        }
        if (struct.verifyCode != null) {
          oprot.writeFieldBegin(VERIFY_CODE_FIELD_DESC);
          oprot.writeString(struct.verifyCode);
          oprot.writeFieldEnd();
        }
        if (struct.imei != null) {
          oprot.writeFieldBegin(IMEI_FIELD_DESC);
          oprot.writeString(struct.imei);
          oprot.writeFieldEnd();
        }
        if (struct.password != null) {
          oprot.writeFieldBegin(PASSWORD_FIELD_DESC);
          oprot.writeString(struct.password);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class appRegist_argsTupleSchemeFactory implements SchemeFactory {
      public appRegist_argsTupleScheme getScheme() {
        return new appRegist_argsTupleScheme();
      }
    }

    private static class appRegist_argsTupleScheme extends TupleScheme<appRegist_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, appRegist_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMobile()) {
          optionals.set(0);
        }
        if (struct.isSetVerifyCode()) {
          optionals.set(1);
        }
        if (struct.isSetImei()) {
          optionals.set(2);
        }
        if (struct.isSetPassword()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetMobile()) {
          oprot.writeString(struct.mobile);
        }
        if (struct.isSetVerifyCode()) {
          oprot.writeString(struct.verifyCode);
        }
        if (struct.isSetImei()) {
          oprot.writeString(struct.imei);
        }
        if (struct.isSetPassword()) {
          oprot.writeString(struct.password);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, appRegist_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.mobile = iprot.readString();
          struct.setMobileIsSet(true);
        }
        if (incoming.get(1)) {
          struct.verifyCode = iprot.readString();
          struct.setVerifyCodeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.imei = iprot.readString();
          struct.setImeiIsSet(true);
        }
        if (incoming.get(3)) {
          struct.password = iprot.readString();
          struct.setPasswordIsSet(true);
        }
      }
    }

  }

  public static class appRegist_result implements org.apache.thrift.TBase<appRegist_result, appRegist_result._Fields>, java.io.Serializable, Cloneable, Comparable<appRegist_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("appRegist_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new appRegist_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new appRegist_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(appRegist_result.class, metaDataMap);
    }

    public appRegist_result() {
    }

    public appRegist_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public appRegist_result(appRegist_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public appRegist_result deepCopy() {
      return new appRegist_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public appRegist_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof appRegist_result)
        return this.equals((appRegist_result)that);
      return false;
    }

    public boolean equals(appRegist_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(appRegist_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("appRegist_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class appRegist_resultStandardSchemeFactory implements SchemeFactory {
      public appRegist_resultStandardScheme getScheme() {
        return new appRegist_resultStandardScheme();
      }
    }

    private static class appRegist_resultStandardScheme extends StandardScheme<appRegist_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, appRegist_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, appRegist_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class appRegist_resultTupleSchemeFactory implements SchemeFactory {
      public appRegist_resultTupleScheme getScheme() {
        return new appRegist_resultTupleScheme();
      }
    }

    private static class appRegist_resultTupleScheme extends TupleScheme<appRegist_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, appRegist_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, appRegist_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class webRegist_args implements org.apache.thrift.TBase<webRegist_args, webRegist_args._Fields>, java.io.Serializable, Cloneable, Comparable<webRegist_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("webRegist_args");

    private static final org.apache.thrift.protocol.TField USERNMAE_FIELD_DESC = new org.apache.thrift.protocol.TField("usernmae", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("password", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField NICKNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("nickname", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField MOBILE_FIELD_DESC = new org.apache.thrift.protocol.TField("mobile", org.apache.thrift.protocol.TType.STRING, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new webRegist_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new webRegist_argsTupleSchemeFactory());
    }

    public String usernmae; // required
    public String password; // required
    public String nickname; // required
    public String mobile; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USERNMAE((short)1, "usernmae"),
      PASSWORD((short)2, "password"),
      NICKNAME((short)3, "nickname"),
      MOBILE((short)4, "mobile");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USERNMAE
            return USERNMAE;
          case 2: // PASSWORD
            return PASSWORD;
          case 3: // NICKNAME
            return NICKNAME;
          case 4: // MOBILE
            return MOBILE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USERNMAE, new org.apache.thrift.meta_data.FieldMetaData("usernmae", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("password", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.NICKNAME, new org.apache.thrift.meta_data.FieldMetaData("nickname", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MOBILE, new org.apache.thrift.meta_data.FieldMetaData("mobile", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(webRegist_args.class, metaDataMap);
    }

    public webRegist_args() {
    }

    public webRegist_args(
      String usernmae,
      String password,
      String nickname,
      String mobile)
    {
      this();
      this.usernmae = usernmae;
      this.password = password;
      this.nickname = nickname;
      this.mobile = mobile;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public webRegist_args(webRegist_args other) {
      if (other.isSetUsernmae()) {
        this.usernmae = other.usernmae;
      }
      if (other.isSetPassword()) {
        this.password = other.password;
      }
      if (other.isSetNickname()) {
        this.nickname = other.nickname;
      }
      if (other.isSetMobile()) {
        this.mobile = other.mobile;
      }
    }

    public webRegist_args deepCopy() {
      return new webRegist_args(this);
    }

    @Override
    public void clear() {
      this.usernmae = null;
      this.password = null;
      this.nickname = null;
      this.mobile = null;
    }

    public String getUsernmae() {
      return this.usernmae;
    }

    public webRegist_args setUsernmae(String usernmae) {
      this.usernmae = usernmae;
      return this;
    }

    public void unsetUsernmae() {
      this.usernmae = null;
    }

    /** Returns true if field usernmae is set (has been assigned a value) and false otherwise */
    public boolean isSetUsernmae() {
      return this.usernmae != null;
    }

    public void setUsernmaeIsSet(boolean value) {
      if (!value) {
        this.usernmae = null;
      }
    }

    public String getPassword() {
      return this.password;
    }

    public webRegist_args setPassword(String password) {
      this.password = password;
      return this;
    }

    public void unsetPassword() {
      this.password = null;
    }

    /** Returns true if field password is set (has been assigned a value) and false otherwise */
    public boolean isSetPassword() {
      return this.password != null;
    }

    public void setPasswordIsSet(boolean value) {
      if (!value) {
        this.password = null;
      }
    }

    public String getNickname() {
      return this.nickname;
    }

    public webRegist_args setNickname(String nickname) {
      this.nickname = nickname;
      return this;
    }

    public void unsetNickname() {
      this.nickname = null;
    }

    /** Returns true if field nickname is set (has been assigned a value) and false otherwise */
    public boolean isSetNickname() {
      return this.nickname != null;
    }

    public void setNicknameIsSet(boolean value) {
      if (!value) {
        this.nickname = null;
      }
    }

    public String getMobile() {
      return this.mobile;
    }

    public webRegist_args setMobile(String mobile) {
      this.mobile = mobile;
      return this;
    }

    public void unsetMobile() {
      this.mobile = null;
    }

    /** Returns true if field mobile is set (has been assigned a value) and false otherwise */
    public boolean isSetMobile() {
      return this.mobile != null;
    }

    public void setMobileIsSet(boolean value) {
      if (!value) {
        this.mobile = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USERNMAE:
        if (value == null) {
          unsetUsernmae();
        } else {
          setUsernmae((String)value);
        }
        break;

      case PASSWORD:
        if (value == null) {
          unsetPassword();
        } else {
          setPassword((String)value);
        }
        break;

      case NICKNAME:
        if (value == null) {
          unsetNickname();
        } else {
          setNickname((String)value);
        }
        break;

      case MOBILE:
        if (value == null) {
          unsetMobile();
        } else {
          setMobile((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USERNMAE:
        return getUsernmae();

      case PASSWORD:
        return getPassword();

      case NICKNAME:
        return getNickname();

      case MOBILE:
        return getMobile();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USERNMAE:
        return isSetUsernmae();
      case PASSWORD:
        return isSetPassword();
      case NICKNAME:
        return isSetNickname();
      case MOBILE:
        return isSetMobile();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof webRegist_args)
        return this.equals((webRegist_args)that);
      return false;
    }

    public boolean equals(webRegist_args that) {
      if (that == null)
        return false;

      boolean this_present_usernmae = true && this.isSetUsernmae();
      boolean that_present_usernmae = true && that.isSetUsernmae();
      if (this_present_usernmae || that_present_usernmae) {
        if (!(this_present_usernmae && that_present_usernmae))
          return false;
        if (!this.usernmae.equals(that.usernmae))
          return false;
      }

      boolean this_present_password = true && this.isSetPassword();
      boolean that_present_password = true && that.isSetPassword();
      if (this_present_password || that_present_password) {
        if (!(this_present_password && that_present_password))
          return false;
        if (!this.password.equals(that.password))
          return false;
      }

      boolean this_present_nickname = true && this.isSetNickname();
      boolean that_present_nickname = true && that.isSetNickname();
      if (this_present_nickname || that_present_nickname) {
        if (!(this_present_nickname && that_present_nickname))
          return false;
        if (!this.nickname.equals(that.nickname))
          return false;
      }

      boolean this_present_mobile = true && this.isSetMobile();
      boolean that_present_mobile = true && that.isSetMobile();
      if (this_present_mobile || that_present_mobile) {
        if (!(this_present_mobile && that_present_mobile))
          return false;
        if (!this.mobile.equals(that.mobile))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_usernmae = true && (isSetUsernmae());
      list.add(present_usernmae);
      if (present_usernmae)
        list.add(usernmae);

      boolean present_password = true && (isSetPassword());
      list.add(present_password);
      if (present_password)
        list.add(password);

      boolean present_nickname = true && (isSetNickname());
      list.add(present_nickname);
      if (present_nickname)
        list.add(nickname);

      boolean present_mobile = true && (isSetMobile());
      list.add(present_mobile);
      if (present_mobile)
        list.add(mobile);

      return list.hashCode();
    }

    @Override
    public int compareTo(webRegist_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUsernmae()).compareTo(other.isSetUsernmae());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUsernmae()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.usernmae, other.usernmae);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPassword()).compareTo(other.isSetPassword());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPassword()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.password, other.password);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNickname()).compareTo(other.isSetNickname());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNickname()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nickname, other.nickname);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMobile()).compareTo(other.isSetMobile());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMobile()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mobile, other.mobile);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("webRegist_args(");
      boolean first = true;

      sb.append("usernmae:");
      if (this.usernmae == null) {
        sb.append("null");
      } else {
        sb.append(this.usernmae);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("password:");
      if (this.password == null) {
        sb.append("null");
      } else {
        sb.append(this.password);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("nickname:");
      if (this.nickname == null) {
        sb.append("null");
      } else {
        sb.append(this.nickname);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("mobile:");
      if (this.mobile == null) {
        sb.append("null");
      } else {
        sb.append(this.mobile);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class webRegist_argsStandardSchemeFactory implements SchemeFactory {
      public webRegist_argsStandardScheme getScheme() {
        return new webRegist_argsStandardScheme();
      }
    }

    private static class webRegist_argsStandardScheme extends StandardScheme<webRegist_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, webRegist_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USERNMAE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.usernmae = iprot.readString();
                struct.setUsernmaeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PASSWORD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.password = iprot.readString();
                struct.setPasswordIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // NICKNAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.nickname = iprot.readString();
                struct.setNicknameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // MOBILE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.mobile = iprot.readString();
                struct.setMobileIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, webRegist_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.usernmae != null) {
          oprot.writeFieldBegin(USERNMAE_FIELD_DESC);
          oprot.writeString(struct.usernmae);
          oprot.writeFieldEnd();
        }
        if (struct.password != null) {
          oprot.writeFieldBegin(PASSWORD_FIELD_DESC);
          oprot.writeString(struct.password);
          oprot.writeFieldEnd();
        }
        if (struct.nickname != null) {
          oprot.writeFieldBegin(NICKNAME_FIELD_DESC);
          oprot.writeString(struct.nickname);
          oprot.writeFieldEnd();
        }
        if (struct.mobile != null) {
          oprot.writeFieldBegin(MOBILE_FIELD_DESC);
          oprot.writeString(struct.mobile);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class webRegist_argsTupleSchemeFactory implements SchemeFactory {
      public webRegist_argsTupleScheme getScheme() {
        return new webRegist_argsTupleScheme();
      }
    }

    private static class webRegist_argsTupleScheme extends TupleScheme<webRegist_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, webRegist_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUsernmae()) {
          optionals.set(0);
        }
        if (struct.isSetPassword()) {
          optionals.set(1);
        }
        if (struct.isSetNickname()) {
          optionals.set(2);
        }
        if (struct.isSetMobile()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetUsernmae()) {
          oprot.writeString(struct.usernmae);
        }
        if (struct.isSetPassword()) {
          oprot.writeString(struct.password);
        }
        if (struct.isSetNickname()) {
          oprot.writeString(struct.nickname);
        }
        if (struct.isSetMobile()) {
          oprot.writeString(struct.mobile);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, webRegist_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.usernmae = iprot.readString();
          struct.setUsernmaeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.password = iprot.readString();
          struct.setPasswordIsSet(true);
        }
        if (incoming.get(2)) {
          struct.nickname = iprot.readString();
          struct.setNicknameIsSet(true);
        }
        if (incoming.get(3)) {
          struct.mobile = iprot.readString();
          struct.setMobileIsSet(true);
        }
      }
    }

  }

  public static class webRegist_result implements org.apache.thrift.TBase<webRegist_result, webRegist_result._Fields>, java.io.Serializable, Cloneable, Comparable<webRegist_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("webRegist_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new webRegist_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new webRegist_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(webRegist_result.class, metaDataMap);
    }

    public webRegist_result() {
    }

    public webRegist_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public webRegist_result(webRegist_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public webRegist_result deepCopy() {
      return new webRegist_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public webRegist_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof webRegist_result)
        return this.equals((webRegist_result)that);
      return false;
    }

    public boolean equals(webRegist_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(webRegist_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("webRegist_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class webRegist_resultStandardSchemeFactory implements SchemeFactory {
      public webRegist_resultStandardScheme getScheme() {
        return new webRegist_resultStandardScheme();
      }
    }

    private static class webRegist_resultStandardScheme extends StandardScheme<webRegist_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, webRegist_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, webRegist_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class webRegist_resultTupleSchemeFactory implements SchemeFactory {
      public webRegist_resultTupleScheme getScheme() {
        return new webRegist_resultTupleScheme();
      }
    }

    private static class webRegist_resultTupleScheme extends TupleScheme<webRegist_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, webRegist_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, webRegist_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
