/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cnd.greencube.server.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-03-25")
public class FeedbackService {

  /**
   * 用户反馈服务
   * @author
   */
  public interface Iface {

    /**
     * 根据id获取反馈信息
     * @param feedbackId -- 反馈id
     * @return 返回一个feedback json对象
     * 
     * @param feedbackId
     */
    public String getFeedbackById(String feedbackId) throws org.apache.thrift.TException;

    /**
     * 更新反馈信息
     * @param feedbackJon -- 反馈json对象
     * @return 成功与否标志
     * 
     * @param pageNum
     */
    public String loadFeedbacksForPagelit(int pageNum) throws org.apache.thrift.TException;

    /**
     * 提交反馈意见
     * @param userid -- 提交者id
     * @param title -- 反馈标题
     * @param content -- 反馈内容
     * @param phone -- 反馈者电话
     * @param qq -- 反馈者qq号码
     * @return -- 返回成功标志
     * 
     * @param userid
     * @param title
     * @param content
     * @param phone
     * @param qq
     */
    public String submitFeedback(String userid, String title, String content, String phone, String qq) throws org.apache.thrift.TException;

    /**
     * 删除用户反馈
     * @param feedbackId
     * @return 成功与否标志
     * 
     * @param feedbackId
     */
    public String deleteFeedback(String feedbackId) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void getFeedbackById(String feedbackId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void loadFeedbacksForPagelit(int pageNum, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void submitFeedback(String userid, String title, String content, String phone, String qq, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void deleteFeedback(String feedbackId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public String getFeedbackById(String feedbackId) throws org.apache.thrift.TException
    {
      send_getFeedbackById(feedbackId);
      return recv_getFeedbackById();
    }

    public void send_getFeedbackById(String feedbackId) throws org.apache.thrift.TException
    {
      getFeedbackById_args args = new getFeedbackById_args();
      args.setFeedbackId(feedbackId);
      sendBase("getFeedbackById", args);
    }

    public String recv_getFeedbackById() throws org.apache.thrift.TException
    {
      getFeedbackById_result result = new getFeedbackById_result();
      receiveBase(result, "getFeedbackById");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getFeedbackById failed: unknown result");
    }

    public String loadFeedbacksForPagelit(int pageNum) throws org.apache.thrift.TException
    {
      send_loadFeedbacksForPagelit(pageNum);
      return recv_loadFeedbacksForPagelit();
    }

    public void send_loadFeedbacksForPagelit(int pageNum) throws org.apache.thrift.TException
    {
      loadFeedbacksForPagelit_args args = new loadFeedbacksForPagelit_args();
      args.setPageNum(pageNum);
      sendBase("loadFeedbacksForPagelit", args);
    }

    public String recv_loadFeedbacksForPagelit() throws org.apache.thrift.TException
    {
      loadFeedbacksForPagelit_result result = new loadFeedbacksForPagelit_result();
      receiveBase(result, "loadFeedbacksForPagelit");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "loadFeedbacksForPagelit failed: unknown result");
    }

    public String submitFeedback(String userid, String title, String content, String phone, String qq) throws org.apache.thrift.TException
    {
      send_submitFeedback(userid, title, content, phone, qq);
      return recv_submitFeedback();
    }

    public void send_submitFeedback(String userid, String title, String content, String phone, String qq) throws org.apache.thrift.TException
    {
      submitFeedback_args args = new submitFeedback_args();
      args.setUserid(userid);
      args.setTitle(title);
      args.setContent(content);
      args.setPhone(phone);
      args.setQq(qq);
      sendBase("submitFeedback", args);
    }

    public String recv_submitFeedback() throws org.apache.thrift.TException
    {
      submitFeedback_result result = new submitFeedback_result();
      receiveBase(result, "submitFeedback");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "submitFeedback failed: unknown result");
    }

    public String deleteFeedback(String feedbackId) throws org.apache.thrift.TException
    {
      send_deleteFeedback(feedbackId);
      return recv_deleteFeedback();
    }

    public void send_deleteFeedback(String feedbackId) throws org.apache.thrift.TException
    {
      deleteFeedback_args args = new deleteFeedback_args();
      args.setFeedbackId(feedbackId);
      sendBase("deleteFeedback", args);
    }

    public String recv_deleteFeedback() throws org.apache.thrift.TException
    {
      deleteFeedback_result result = new deleteFeedback_result();
      receiveBase(result, "deleteFeedback");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deleteFeedback failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getFeedbackById(String feedbackId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getFeedbackById_call method_call = new getFeedbackById_call(feedbackId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getFeedbackById_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String feedbackId;
      public getFeedbackById_call(String feedbackId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.feedbackId = feedbackId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getFeedbackById", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getFeedbackById_args args = new getFeedbackById_args();
        args.setFeedbackId(feedbackId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getFeedbackById();
      }
    }

    public void loadFeedbacksForPagelit(int pageNum, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      loadFeedbacksForPagelit_call method_call = new loadFeedbacksForPagelit_call(pageNum, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class loadFeedbacksForPagelit_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int pageNum;
      public loadFeedbacksForPagelit_call(int pageNum, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pageNum = pageNum;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("loadFeedbacksForPagelit", org.apache.thrift.protocol.TMessageType.CALL, 0));
        loadFeedbacksForPagelit_args args = new loadFeedbacksForPagelit_args();
        args.setPageNum(pageNum);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_loadFeedbacksForPagelit();
      }
    }

    public void submitFeedback(String userid, String title, String content, String phone, String qq, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      submitFeedback_call method_call = new submitFeedback_call(userid, title, content, phone, qq, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class submitFeedback_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String userid;
      private String title;
      private String content;
      private String phone;
      private String qq;
      public submitFeedback_call(String userid, String title, String content, String phone, String qq, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userid = userid;
        this.title = title;
        this.content = content;
        this.phone = phone;
        this.qq = qq;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("submitFeedback", org.apache.thrift.protocol.TMessageType.CALL, 0));
        submitFeedback_args args = new submitFeedback_args();
        args.setUserid(userid);
        args.setTitle(title);
        args.setContent(content);
        args.setPhone(phone);
        args.setQq(qq);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_submitFeedback();
      }
    }

    public void deleteFeedback(String feedbackId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteFeedback_call method_call = new deleteFeedback_call(feedbackId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteFeedback_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String feedbackId;
      public deleteFeedback_call(String feedbackId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.feedbackId = feedbackId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteFeedback", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteFeedback_args args = new deleteFeedback_args();
        args.setFeedbackId(feedbackId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_deleteFeedback();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getFeedbackById", new getFeedbackById());
      processMap.put("loadFeedbacksForPagelit", new loadFeedbacksForPagelit());
      processMap.put("submitFeedback", new submitFeedback());
      processMap.put("deleteFeedback", new deleteFeedback());
      return processMap;
    }

    public static class getFeedbackById<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getFeedbackById_args> {
      public getFeedbackById() {
        super("getFeedbackById");
      }

      public getFeedbackById_args getEmptyArgsInstance() {
        return new getFeedbackById_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getFeedbackById_result getResult(I iface, getFeedbackById_args args) throws org.apache.thrift.TException {
        getFeedbackById_result result = new getFeedbackById_result();
        result.success = iface.getFeedbackById(args.feedbackId);
        return result;
      }
    }

    public static class loadFeedbacksForPagelit<I extends Iface> extends org.apache.thrift.ProcessFunction<I, loadFeedbacksForPagelit_args> {
      public loadFeedbacksForPagelit() {
        super("loadFeedbacksForPagelit");
      }

      public loadFeedbacksForPagelit_args getEmptyArgsInstance() {
        return new loadFeedbacksForPagelit_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public loadFeedbacksForPagelit_result getResult(I iface, loadFeedbacksForPagelit_args args) throws org.apache.thrift.TException {
        loadFeedbacksForPagelit_result result = new loadFeedbacksForPagelit_result();
        result.success = iface.loadFeedbacksForPagelit(args.pageNum);
        return result;
      }
    }

    public static class submitFeedback<I extends Iface> extends org.apache.thrift.ProcessFunction<I, submitFeedback_args> {
      public submitFeedback() {
        super("submitFeedback");
      }

      public submitFeedback_args getEmptyArgsInstance() {
        return new submitFeedback_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public submitFeedback_result getResult(I iface, submitFeedback_args args) throws org.apache.thrift.TException {
        submitFeedback_result result = new submitFeedback_result();
        result.success = iface.submitFeedback(args.userid, args.title, args.content, args.phone, args.qq);
        return result;
      }
    }

    public static class deleteFeedback<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteFeedback_args> {
      public deleteFeedback() {
        super("deleteFeedback");
      }

      public deleteFeedback_args getEmptyArgsInstance() {
        return new deleteFeedback_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteFeedback_result getResult(I iface, deleteFeedback_args args) throws org.apache.thrift.TException {
        deleteFeedback_result result = new deleteFeedback_result();
        result.success = iface.deleteFeedback(args.feedbackId);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("getFeedbackById", new getFeedbackById());
      processMap.put("loadFeedbacksForPagelit", new loadFeedbacksForPagelit());
      processMap.put("submitFeedback", new submitFeedback());
      processMap.put("deleteFeedback", new deleteFeedback());
      return processMap;
    }

    public static class getFeedbackById<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getFeedbackById_args, String> {
      public getFeedbackById() {
        super("getFeedbackById");
      }

      public getFeedbackById_args getEmptyArgsInstance() {
        return new getFeedbackById_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            getFeedbackById_result result = new getFeedbackById_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getFeedbackById_result result = new getFeedbackById_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getFeedbackById_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.getFeedbackById(args.feedbackId,resultHandler);
      }
    }

    public static class loadFeedbacksForPagelit<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, loadFeedbacksForPagelit_args, String> {
      public loadFeedbacksForPagelit() {
        super("loadFeedbacksForPagelit");
      }

      public loadFeedbacksForPagelit_args getEmptyArgsInstance() {
        return new loadFeedbacksForPagelit_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            loadFeedbacksForPagelit_result result = new loadFeedbacksForPagelit_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            loadFeedbacksForPagelit_result result = new loadFeedbacksForPagelit_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, loadFeedbacksForPagelit_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.loadFeedbacksForPagelit(args.pageNum,resultHandler);
      }
    }

    public static class submitFeedback<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, submitFeedback_args, String> {
      public submitFeedback() {
        super("submitFeedback");
      }

      public submitFeedback_args getEmptyArgsInstance() {
        return new submitFeedback_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            submitFeedback_result result = new submitFeedback_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            submitFeedback_result result = new submitFeedback_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, submitFeedback_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.submitFeedback(args.userid, args.title, args.content, args.phone, args.qq,resultHandler);
      }
    }

    public static class deleteFeedback<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteFeedback_args, String> {
      public deleteFeedback() {
        super("deleteFeedback");
      }

      public deleteFeedback_args getEmptyArgsInstance() {
        return new deleteFeedback_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            deleteFeedback_result result = new deleteFeedback_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            deleteFeedback_result result = new deleteFeedback_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteFeedback_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.deleteFeedback(args.feedbackId,resultHandler);
      }
    }

  }

  public static class getFeedbackById_args implements org.apache.thrift.TBase<getFeedbackById_args, getFeedbackById_args._Fields>, java.io.Serializable, Cloneable, Comparable<getFeedbackById_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getFeedbackById_args");

    private static final org.apache.thrift.protocol.TField FEEDBACK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("feedbackId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getFeedbackById_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getFeedbackById_argsTupleSchemeFactory());
    }

    public String feedbackId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FEEDBACK_ID((short)1, "feedbackId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FEEDBACK_ID
            return FEEDBACK_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FEEDBACK_ID, new org.apache.thrift.meta_data.FieldMetaData("feedbackId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFeedbackById_args.class, metaDataMap);
    }

    public getFeedbackById_args() {
    }

    public getFeedbackById_args(
      String feedbackId)
    {
      this();
      this.feedbackId = feedbackId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFeedbackById_args(getFeedbackById_args other) {
      if (other.isSetFeedbackId()) {
        this.feedbackId = other.feedbackId;
      }
    }

    public getFeedbackById_args deepCopy() {
      return new getFeedbackById_args(this);
    }

    @Override
    public void clear() {
      this.feedbackId = null;
    }

    public String getFeedbackId() {
      return this.feedbackId;
    }

    public getFeedbackById_args setFeedbackId(String feedbackId) {
      this.feedbackId = feedbackId;
      return this;
    }

    public void unsetFeedbackId() {
      this.feedbackId = null;
    }

    /** Returns true if field feedbackId is set (has been assigned a value) and false otherwise */
    public boolean isSetFeedbackId() {
      return this.feedbackId != null;
    }

    public void setFeedbackIdIsSet(boolean value) {
      if (!value) {
        this.feedbackId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FEEDBACK_ID:
        if (value == null) {
          unsetFeedbackId();
        } else {
          setFeedbackId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FEEDBACK_ID:
        return getFeedbackId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FEEDBACK_ID:
        return isSetFeedbackId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getFeedbackById_args)
        return this.equals((getFeedbackById_args)that);
      return false;
    }

    public boolean equals(getFeedbackById_args that) {
      if (that == null)
        return false;

      boolean this_present_feedbackId = true && this.isSetFeedbackId();
      boolean that_present_feedbackId = true && that.isSetFeedbackId();
      if (this_present_feedbackId || that_present_feedbackId) {
        if (!(this_present_feedbackId && that_present_feedbackId))
          return false;
        if (!this.feedbackId.equals(that.feedbackId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_feedbackId = true && (isSetFeedbackId());
      list.add(present_feedbackId);
      if (present_feedbackId)
        list.add(feedbackId);

      return list.hashCode();
    }

    @Override
    public int compareTo(getFeedbackById_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetFeedbackId()).compareTo(other.isSetFeedbackId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFeedbackId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.feedbackId, other.feedbackId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getFeedbackById_args(");
      boolean first = true;

      sb.append("feedbackId:");
      if (this.feedbackId == null) {
        sb.append("null");
      } else {
        sb.append(this.feedbackId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getFeedbackById_argsStandardSchemeFactory implements SchemeFactory {
      public getFeedbackById_argsStandardScheme getScheme() {
        return new getFeedbackById_argsStandardScheme();
      }
    }

    private static class getFeedbackById_argsStandardScheme extends StandardScheme<getFeedbackById_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getFeedbackById_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FEEDBACK_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.feedbackId = iprot.readString();
                struct.setFeedbackIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getFeedbackById_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.feedbackId != null) {
          oprot.writeFieldBegin(FEEDBACK_ID_FIELD_DESC);
          oprot.writeString(struct.feedbackId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getFeedbackById_argsTupleSchemeFactory implements SchemeFactory {
      public getFeedbackById_argsTupleScheme getScheme() {
        return new getFeedbackById_argsTupleScheme();
      }
    }

    private static class getFeedbackById_argsTupleScheme extends TupleScheme<getFeedbackById_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getFeedbackById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetFeedbackId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetFeedbackId()) {
          oprot.writeString(struct.feedbackId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getFeedbackById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.feedbackId = iprot.readString();
          struct.setFeedbackIdIsSet(true);
        }
      }
    }

  }

  public static class getFeedbackById_result implements org.apache.thrift.TBase<getFeedbackById_result, getFeedbackById_result._Fields>, java.io.Serializable, Cloneable, Comparable<getFeedbackById_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getFeedbackById_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getFeedbackById_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getFeedbackById_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFeedbackById_result.class, metaDataMap);
    }

    public getFeedbackById_result() {
    }

    public getFeedbackById_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFeedbackById_result(getFeedbackById_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public getFeedbackById_result deepCopy() {
      return new getFeedbackById_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public getFeedbackById_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getFeedbackById_result)
        return this.equals((getFeedbackById_result)that);
      return false;
    }

    public boolean equals(getFeedbackById_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getFeedbackById_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getFeedbackById_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getFeedbackById_resultStandardSchemeFactory implements SchemeFactory {
      public getFeedbackById_resultStandardScheme getScheme() {
        return new getFeedbackById_resultStandardScheme();
      }
    }

    private static class getFeedbackById_resultStandardScheme extends StandardScheme<getFeedbackById_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getFeedbackById_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getFeedbackById_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getFeedbackById_resultTupleSchemeFactory implements SchemeFactory {
      public getFeedbackById_resultTupleScheme getScheme() {
        return new getFeedbackById_resultTupleScheme();
      }
    }

    private static class getFeedbackById_resultTupleScheme extends TupleScheme<getFeedbackById_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getFeedbackById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getFeedbackById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class loadFeedbacksForPagelit_args implements org.apache.thrift.TBase<loadFeedbacksForPagelit_args, loadFeedbacksForPagelit_args._Fields>, java.io.Serializable, Cloneable, Comparable<loadFeedbacksForPagelit_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("loadFeedbacksForPagelit_args");

    private static final org.apache.thrift.protocol.TField PAGE_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("pageNum", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new loadFeedbacksForPagelit_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new loadFeedbacksForPagelit_argsTupleSchemeFactory());
    }

    public int pageNum; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PAGE_NUM((short)1, "pageNum");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PAGE_NUM
            return PAGE_NUM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PAGENUM_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PAGE_NUM, new org.apache.thrift.meta_data.FieldMetaData("pageNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(loadFeedbacksForPagelit_args.class, metaDataMap);
    }

    public loadFeedbacksForPagelit_args() {
    }

    public loadFeedbacksForPagelit_args(
      int pageNum)
    {
      this();
      this.pageNum = pageNum;
      setPageNumIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public loadFeedbacksForPagelit_args(loadFeedbacksForPagelit_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.pageNum = other.pageNum;
    }

    public loadFeedbacksForPagelit_args deepCopy() {
      return new loadFeedbacksForPagelit_args(this);
    }

    @Override
    public void clear() {
      setPageNumIsSet(false);
      this.pageNum = 0;
    }

    public int getPageNum() {
      return this.pageNum;
    }

    public loadFeedbacksForPagelit_args setPageNum(int pageNum) {
      this.pageNum = pageNum;
      setPageNumIsSet(true);
      return this;
    }

    public void unsetPageNum() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGENUM_ISSET_ID);
    }

    /** Returns true if field pageNum is set (has been assigned a value) and false otherwise */
    public boolean isSetPageNum() {
      return EncodingUtils.testBit(__isset_bitfield, __PAGENUM_ISSET_ID);
    }

    public void setPageNumIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGENUM_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PAGE_NUM:
        if (value == null) {
          unsetPageNum();
        } else {
          setPageNum((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PAGE_NUM:
        return getPageNum();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PAGE_NUM:
        return isSetPageNum();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof loadFeedbacksForPagelit_args)
        return this.equals((loadFeedbacksForPagelit_args)that);
      return false;
    }

    public boolean equals(loadFeedbacksForPagelit_args that) {
      if (that == null)
        return false;

      boolean this_present_pageNum = true;
      boolean that_present_pageNum = true;
      if (this_present_pageNum || that_present_pageNum) {
        if (!(this_present_pageNum && that_present_pageNum))
          return false;
        if (this.pageNum != that.pageNum)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_pageNum = true;
      list.add(present_pageNum);
      if (present_pageNum)
        list.add(pageNum);

      return list.hashCode();
    }

    @Override
    public int compareTo(loadFeedbacksForPagelit_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPageNum()).compareTo(other.isSetPageNum());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageNum()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageNum, other.pageNum);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("loadFeedbacksForPagelit_args(");
      boolean first = true;

      sb.append("pageNum:");
      sb.append(this.pageNum);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class loadFeedbacksForPagelit_argsStandardSchemeFactory implements SchemeFactory {
      public loadFeedbacksForPagelit_argsStandardScheme getScheme() {
        return new loadFeedbacksForPagelit_argsStandardScheme();
      }
    }

    private static class loadFeedbacksForPagelit_argsStandardScheme extends StandardScheme<loadFeedbacksForPagelit_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, loadFeedbacksForPagelit_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PAGE_NUM
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pageNum = iprot.readI32();
                struct.setPageNumIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, loadFeedbacksForPagelit_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(PAGE_NUM_FIELD_DESC);
        oprot.writeI32(struct.pageNum);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class loadFeedbacksForPagelit_argsTupleSchemeFactory implements SchemeFactory {
      public loadFeedbacksForPagelit_argsTupleScheme getScheme() {
        return new loadFeedbacksForPagelit_argsTupleScheme();
      }
    }

    private static class loadFeedbacksForPagelit_argsTupleScheme extends TupleScheme<loadFeedbacksForPagelit_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, loadFeedbacksForPagelit_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPageNum()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetPageNum()) {
          oprot.writeI32(struct.pageNum);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, loadFeedbacksForPagelit_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.pageNum = iprot.readI32();
          struct.setPageNumIsSet(true);
        }
      }
    }

  }

  public static class loadFeedbacksForPagelit_result implements org.apache.thrift.TBase<loadFeedbacksForPagelit_result, loadFeedbacksForPagelit_result._Fields>, java.io.Serializable, Cloneable, Comparable<loadFeedbacksForPagelit_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("loadFeedbacksForPagelit_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new loadFeedbacksForPagelit_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new loadFeedbacksForPagelit_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(loadFeedbacksForPagelit_result.class, metaDataMap);
    }

    public loadFeedbacksForPagelit_result() {
    }

    public loadFeedbacksForPagelit_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public loadFeedbacksForPagelit_result(loadFeedbacksForPagelit_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public loadFeedbacksForPagelit_result deepCopy() {
      return new loadFeedbacksForPagelit_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public loadFeedbacksForPagelit_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof loadFeedbacksForPagelit_result)
        return this.equals((loadFeedbacksForPagelit_result)that);
      return false;
    }

    public boolean equals(loadFeedbacksForPagelit_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(loadFeedbacksForPagelit_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("loadFeedbacksForPagelit_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class loadFeedbacksForPagelit_resultStandardSchemeFactory implements SchemeFactory {
      public loadFeedbacksForPagelit_resultStandardScheme getScheme() {
        return new loadFeedbacksForPagelit_resultStandardScheme();
      }
    }

    private static class loadFeedbacksForPagelit_resultStandardScheme extends StandardScheme<loadFeedbacksForPagelit_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, loadFeedbacksForPagelit_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, loadFeedbacksForPagelit_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class loadFeedbacksForPagelit_resultTupleSchemeFactory implements SchemeFactory {
      public loadFeedbacksForPagelit_resultTupleScheme getScheme() {
        return new loadFeedbacksForPagelit_resultTupleScheme();
      }
    }

    private static class loadFeedbacksForPagelit_resultTupleScheme extends TupleScheme<loadFeedbacksForPagelit_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, loadFeedbacksForPagelit_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, loadFeedbacksForPagelit_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class submitFeedback_args implements org.apache.thrift.TBase<submitFeedback_args, submitFeedback_args._Fields>, java.io.Serializable, Cloneable, Comparable<submitFeedback_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("submitFeedback_args");

    private static final org.apache.thrift.protocol.TField USERID_FIELD_DESC = new org.apache.thrift.protocol.TField("userid", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("title", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("content", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField PHONE_FIELD_DESC = new org.apache.thrift.protocol.TField("phone", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField QQ_FIELD_DESC = new org.apache.thrift.protocol.TField("qq", org.apache.thrift.protocol.TType.STRING, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new submitFeedback_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new submitFeedback_argsTupleSchemeFactory());
    }

    public String userid; // required
    public String title; // required
    public String content; // required
    public String phone; // required
    public String qq; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USERID((short)1, "userid"),
      TITLE((short)2, "title"),
      CONTENT((short)3, "content"),
      PHONE((short)4, "phone"),
      QQ((short)5, "qq");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USERID
            return USERID;
          case 2: // TITLE
            return TITLE;
          case 3: // CONTENT
            return CONTENT;
          case 4: // PHONE
            return PHONE;
          case 5: // QQ
            return QQ;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USERID, new org.apache.thrift.meta_data.FieldMetaData("userid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TITLE, new org.apache.thrift.meta_data.FieldMetaData("title", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CONTENT, new org.apache.thrift.meta_data.FieldMetaData("content", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PHONE, new org.apache.thrift.meta_data.FieldMetaData("phone", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.QQ, new org.apache.thrift.meta_data.FieldMetaData("qq", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(submitFeedback_args.class, metaDataMap);
    }

    public submitFeedback_args() {
    }

    public submitFeedback_args(
      String userid,
      String title,
      String content,
      String phone,
      String qq)
    {
      this();
      this.userid = userid;
      this.title = title;
      this.content = content;
      this.phone = phone;
      this.qq = qq;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public submitFeedback_args(submitFeedback_args other) {
      if (other.isSetUserid()) {
        this.userid = other.userid;
      }
      if (other.isSetTitle()) {
        this.title = other.title;
      }
      if (other.isSetContent()) {
        this.content = other.content;
      }
      if (other.isSetPhone()) {
        this.phone = other.phone;
      }
      if (other.isSetQq()) {
        this.qq = other.qq;
      }
    }

    public submitFeedback_args deepCopy() {
      return new submitFeedback_args(this);
    }

    @Override
    public void clear() {
      this.userid = null;
      this.title = null;
      this.content = null;
      this.phone = null;
      this.qq = null;
    }

    public String getUserid() {
      return this.userid;
    }

    public submitFeedback_args setUserid(String userid) {
      this.userid = userid;
      return this;
    }

    public void unsetUserid() {
      this.userid = null;
    }

    /** Returns true if field userid is set (has been assigned a value) and false otherwise */
    public boolean isSetUserid() {
      return this.userid != null;
    }

    public void setUseridIsSet(boolean value) {
      if (!value) {
        this.userid = null;
      }
    }

    public String getTitle() {
      return this.title;
    }

    public submitFeedback_args setTitle(String title) {
      this.title = title;
      return this;
    }

    public void unsetTitle() {
      this.title = null;
    }

    /** Returns true if field title is set (has been assigned a value) and false otherwise */
    public boolean isSetTitle() {
      return this.title != null;
    }

    public void setTitleIsSet(boolean value) {
      if (!value) {
        this.title = null;
      }
    }

    public String getContent() {
      return this.content;
    }

    public submitFeedback_args setContent(String content) {
      this.content = content;
      return this;
    }

    public void unsetContent() {
      this.content = null;
    }

    /** Returns true if field content is set (has been assigned a value) and false otherwise */
    public boolean isSetContent() {
      return this.content != null;
    }

    public void setContentIsSet(boolean value) {
      if (!value) {
        this.content = null;
      }
    }

    public String getPhone() {
      return this.phone;
    }

    public submitFeedback_args setPhone(String phone) {
      this.phone = phone;
      return this;
    }

    public void unsetPhone() {
      this.phone = null;
    }

    /** Returns true if field phone is set (has been assigned a value) and false otherwise */
    public boolean isSetPhone() {
      return this.phone != null;
    }

    public void setPhoneIsSet(boolean value) {
      if (!value) {
        this.phone = null;
      }
    }

    public String getQq() {
      return this.qq;
    }

    public submitFeedback_args setQq(String qq) {
      this.qq = qq;
      return this;
    }

    public void unsetQq() {
      this.qq = null;
    }

    /** Returns true if field qq is set (has been assigned a value) and false otherwise */
    public boolean isSetQq() {
      return this.qq != null;
    }

    public void setQqIsSet(boolean value) {
      if (!value) {
        this.qq = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USERID:
        if (value == null) {
          unsetUserid();
        } else {
          setUserid((String)value);
        }
        break;

      case TITLE:
        if (value == null) {
          unsetTitle();
        } else {
          setTitle((String)value);
        }
        break;

      case CONTENT:
        if (value == null) {
          unsetContent();
        } else {
          setContent((String)value);
        }
        break;

      case PHONE:
        if (value == null) {
          unsetPhone();
        } else {
          setPhone((String)value);
        }
        break;

      case QQ:
        if (value == null) {
          unsetQq();
        } else {
          setQq((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USERID:
        return getUserid();

      case TITLE:
        return getTitle();

      case CONTENT:
        return getContent();

      case PHONE:
        return getPhone();

      case QQ:
        return getQq();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USERID:
        return isSetUserid();
      case TITLE:
        return isSetTitle();
      case CONTENT:
        return isSetContent();
      case PHONE:
        return isSetPhone();
      case QQ:
        return isSetQq();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof submitFeedback_args)
        return this.equals((submitFeedback_args)that);
      return false;
    }

    public boolean equals(submitFeedback_args that) {
      if (that == null)
        return false;

      boolean this_present_userid = true && this.isSetUserid();
      boolean that_present_userid = true && that.isSetUserid();
      if (this_present_userid || that_present_userid) {
        if (!(this_present_userid && that_present_userid))
          return false;
        if (!this.userid.equals(that.userid))
          return false;
      }

      boolean this_present_title = true && this.isSetTitle();
      boolean that_present_title = true && that.isSetTitle();
      if (this_present_title || that_present_title) {
        if (!(this_present_title && that_present_title))
          return false;
        if (!this.title.equals(that.title))
          return false;
      }

      boolean this_present_content = true && this.isSetContent();
      boolean that_present_content = true && that.isSetContent();
      if (this_present_content || that_present_content) {
        if (!(this_present_content && that_present_content))
          return false;
        if (!this.content.equals(that.content))
          return false;
      }

      boolean this_present_phone = true && this.isSetPhone();
      boolean that_present_phone = true && that.isSetPhone();
      if (this_present_phone || that_present_phone) {
        if (!(this_present_phone && that_present_phone))
          return false;
        if (!this.phone.equals(that.phone))
          return false;
      }

      boolean this_present_qq = true && this.isSetQq();
      boolean that_present_qq = true && that.isSetQq();
      if (this_present_qq || that_present_qq) {
        if (!(this_present_qq && that_present_qq))
          return false;
        if (!this.qq.equals(that.qq))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_userid = true && (isSetUserid());
      list.add(present_userid);
      if (present_userid)
        list.add(userid);

      boolean present_title = true && (isSetTitle());
      list.add(present_title);
      if (present_title)
        list.add(title);

      boolean present_content = true && (isSetContent());
      list.add(present_content);
      if (present_content)
        list.add(content);

      boolean present_phone = true && (isSetPhone());
      list.add(present_phone);
      if (present_phone)
        list.add(phone);

      boolean present_qq = true && (isSetQq());
      list.add(present_qq);
      if (present_qq)
        list.add(qq);

      return list.hashCode();
    }

    @Override
    public int compareTo(submitFeedback_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUserid()).compareTo(other.isSetUserid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userid, other.userid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTitle()).compareTo(other.isSetTitle());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTitle()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.title, other.title);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetContent()).compareTo(other.isSetContent());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetContent()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.content, other.content);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPhone()).compareTo(other.isSetPhone());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPhone()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.phone, other.phone);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetQq()).compareTo(other.isSetQq());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQq()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qq, other.qq);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("submitFeedback_args(");
      boolean first = true;

      sb.append("userid:");
      if (this.userid == null) {
        sb.append("null");
      } else {
        sb.append(this.userid);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("title:");
      if (this.title == null) {
        sb.append("null");
      } else {
        sb.append(this.title);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("content:");
      if (this.content == null) {
        sb.append("null");
      } else {
        sb.append(this.content);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("phone:");
      if (this.phone == null) {
        sb.append("null");
      } else {
        sb.append(this.phone);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("qq:");
      if (this.qq == null) {
        sb.append("null");
      } else {
        sb.append(this.qq);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class submitFeedback_argsStandardSchemeFactory implements SchemeFactory {
      public submitFeedback_argsStandardScheme getScheme() {
        return new submitFeedback_argsStandardScheme();
      }
    }

    private static class submitFeedback_argsStandardScheme extends StandardScheme<submitFeedback_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, submitFeedback_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USERID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userid = iprot.readString();
                struct.setUseridIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TITLE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.title = iprot.readString();
                struct.setTitleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // CONTENT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.content = iprot.readString();
                struct.setContentIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // PHONE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.phone = iprot.readString();
                struct.setPhoneIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // QQ
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.qq = iprot.readString();
                struct.setQqIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, submitFeedback_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.userid != null) {
          oprot.writeFieldBegin(USERID_FIELD_DESC);
          oprot.writeString(struct.userid);
          oprot.writeFieldEnd();
        }
        if (struct.title != null) {
          oprot.writeFieldBegin(TITLE_FIELD_DESC);
          oprot.writeString(struct.title);
          oprot.writeFieldEnd();
        }
        if (struct.content != null) {
          oprot.writeFieldBegin(CONTENT_FIELD_DESC);
          oprot.writeString(struct.content);
          oprot.writeFieldEnd();
        }
        if (struct.phone != null) {
          oprot.writeFieldBegin(PHONE_FIELD_DESC);
          oprot.writeString(struct.phone);
          oprot.writeFieldEnd();
        }
        if (struct.qq != null) {
          oprot.writeFieldBegin(QQ_FIELD_DESC);
          oprot.writeString(struct.qq);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class submitFeedback_argsTupleSchemeFactory implements SchemeFactory {
      public submitFeedback_argsTupleScheme getScheme() {
        return new submitFeedback_argsTupleScheme();
      }
    }

    private static class submitFeedback_argsTupleScheme extends TupleScheme<submitFeedback_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, submitFeedback_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUserid()) {
          optionals.set(0);
        }
        if (struct.isSetTitle()) {
          optionals.set(1);
        }
        if (struct.isSetContent()) {
          optionals.set(2);
        }
        if (struct.isSetPhone()) {
          optionals.set(3);
        }
        if (struct.isSetQq()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetUserid()) {
          oprot.writeString(struct.userid);
        }
        if (struct.isSetTitle()) {
          oprot.writeString(struct.title);
        }
        if (struct.isSetContent()) {
          oprot.writeString(struct.content);
        }
        if (struct.isSetPhone()) {
          oprot.writeString(struct.phone);
        }
        if (struct.isSetQq()) {
          oprot.writeString(struct.qq);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, submitFeedback_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.userid = iprot.readString();
          struct.setUseridIsSet(true);
        }
        if (incoming.get(1)) {
          struct.title = iprot.readString();
          struct.setTitleIsSet(true);
        }
        if (incoming.get(2)) {
          struct.content = iprot.readString();
          struct.setContentIsSet(true);
        }
        if (incoming.get(3)) {
          struct.phone = iprot.readString();
          struct.setPhoneIsSet(true);
        }
        if (incoming.get(4)) {
          struct.qq = iprot.readString();
          struct.setQqIsSet(true);
        }
      }
    }

  }

  public static class submitFeedback_result implements org.apache.thrift.TBase<submitFeedback_result, submitFeedback_result._Fields>, java.io.Serializable, Cloneable, Comparable<submitFeedback_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("submitFeedback_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new submitFeedback_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new submitFeedback_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(submitFeedback_result.class, metaDataMap);
    }

    public submitFeedback_result() {
    }

    public submitFeedback_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public submitFeedback_result(submitFeedback_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public submitFeedback_result deepCopy() {
      return new submitFeedback_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public submitFeedback_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof submitFeedback_result)
        return this.equals((submitFeedback_result)that);
      return false;
    }

    public boolean equals(submitFeedback_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(submitFeedback_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("submitFeedback_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class submitFeedback_resultStandardSchemeFactory implements SchemeFactory {
      public submitFeedback_resultStandardScheme getScheme() {
        return new submitFeedback_resultStandardScheme();
      }
    }

    private static class submitFeedback_resultStandardScheme extends StandardScheme<submitFeedback_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, submitFeedback_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, submitFeedback_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class submitFeedback_resultTupleSchemeFactory implements SchemeFactory {
      public submitFeedback_resultTupleScheme getScheme() {
        return new submitFeedback_resultTupleScheme();
      }
    }

    private static class submitFeedback_resultTupleScheme extends TupleScheme<submitFeedback_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, submitFeedback_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, submitFeedback_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class deleteFeedback_args implements org.apache.thrift.TBase<deleteFeedback_args, deleteFeedback_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteFeedback_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteFeedback_args");

    private static final org.apache.thrift.protocol.TField FEEDBACK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("feedbackId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteFeedback_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteFeedback_argsTupleSchemeFactory());
    }

    public String feedbackId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FEEDBACK_ID((short)1, "feedbackId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FEEDBACK_ID
            return FEEDBACK_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FEEDBACK_ID, new org.apache.thrift.meta_data.FieldMetaData("feedbackId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteFeedback_args.class, metaDataMap);
    }

    public deleteFeedback_args() {
    }

    public deleteFeedback_args(
      String feedbackId)
    {
      this();
      this.feedbackId = feedbackId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteFeedback_args(deleteFeedback_args other) {
      if (other.isSetFeedbackId()) {
        this.feedbackId = other.feedbackId;
      }
    }

    public deleteFeedback_args deepCopy() {
      return new deleteFeedback_args(this);
    }

    @Override
    public void clear() {
      this.feedbackId = null;
    }

    public String getFeedbackId() {
      return this.feedbackId;
    }

    public deleteFeedback_args setFeedbackId(String feedbackId) {
      this.feedbackId = feedbackId;
      return this;
    }

    public void unsetFeedbackId() {
      this.feedbackId = null;
    }

    /** Returns true if field feedbackId is set (has been assigned a value) and false otherwise */
    public boolean isSetFeedbackId() {
      return this.feedbackId != null;
    }

    public void setFeedbackIdIsSet(boolean value) {
      if (!value) {
        this.feedbackId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FEEDBACK_ID:
        if (value == null) {
          unsetFeedbackId();
        } else {
          setFeedbackId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FEEDBACK_ID:
        return getFeedbackId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FEEDBACK_ID:
        return isSetFeedbackId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteFeedback_args)
        return this.equals((deleteFeedback_args)that);
      return false;
    }

    public boolean equals(deleteFeedback_args that) {
      if (that == null)
        return false;

      boolean this_present_feedbackId = true && this.isSetFeedbackId();
      boolean that_present_feedbackId = true && that.isSetFeedbackId();
      if (this_present_feedbackId || that_present_feedbackId) {
        if (!(this_present_feedbackId && that_present_feedbackId))
          return false;
        if (!this.feedbackId.equals(that.feedbackId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_feedbackId = true && (isSetFeedbackId());
      list.add(present_feedbackId);
      if (present_feedbackId)
        list.add(feedbackId);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteFeedback_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetFeedbackId()).compareTo(other.isSetFeedbackId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFeedbackId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.feedbackId, other.feedbackId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteFeedback_args(");
      boolean first = true;

      sb.append("feedbackId:");
      if (this.feedbackId == null) {
        sb.append("null");
      } else {
        sb.append(this.feedbackId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteFeedback_argsStandardSchemeFactory implements SchemeFactory {
      public deleteFeedback_argsStandardScheme getScheme() {
        return new deleteFeedback_argsStandardScheme();
      }
    }

    private static class deleteFeedback_argsStandardScheme extends StandardScheme<deleteFeedback_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteFeedback_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FEEDBACK_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.feedbackId = iprot.readString();
                struct.setFeedbackIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteFeedback_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.feedbackId != null) {
          oprot.writeFieldBegin(FEEDBACK_ID_FIELD_DESC);
          oprot.writeString(struct.feedbackId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteFeedback_argsTupleSchemeFactory implements SchemeFactory {
      public deleteFeedback_argsTupleScheme getScheme() {
        return new deleteFeedback_argsTupleScheme();
      }
    }

    private static class deleteFeedback_argsTupleScheme extends TupleScheme<deleteFeedback_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteFeedback_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetFeedbackId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetFeedbackId()) {
          oprot.writeString(struct.feedbackId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteFeedback_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.feedbackId = iprot.readString();
          struct.setFeedbackIdIsSet(true);
        }
      }
    }

  }

  public static class deleteFeedback_result implements org.apache.thrift.TBase<deleteFeedback_result, deleteFeedback_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteFeedback_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteFeedback_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteFeedback_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteFeedback_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteFeedback_result.class, metaDataMap);
    }

    public deleteFeedback_result() {
    }

    public deleteFeedback_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteFeedback_result(deleteFeedback_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public deleteFeedback_result deepCopy() {
      return new deleteFeedback_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public deleteFeedback_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteFeedback_result)
        return this.equals((deleteFeedback_result)that);
      return false;
    }

    public boolean equals(deleteFeedback_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteFeedback_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteFeedback_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteFeedback_resultStandardSchemeFactory implements SchemeFactory {
      public deleteFeedback_resultStandardScheme getScheme() {
        return new deleteFeedback_resultStandardScheme();
      }
    }

    private static class deleteFeedback_resultStandardScheme extends StandardScheme<deleteFeedback_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteFeedback_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteFeedback_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteFeedback_resultTupleSchemeFactory implements SchemeFactory {
      public deleteFeedback_resultTupleScheme getScheme() {
        return new deleteFeedback_resultTupleScheme();
      }
    }

    private static class deleteFeedback_resultTupleScheme extends TupleScheme<deleteFeedback_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteFeedback_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteFeedback_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
