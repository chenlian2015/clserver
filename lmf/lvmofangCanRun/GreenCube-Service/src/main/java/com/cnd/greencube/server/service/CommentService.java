/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cnd.greencube.server.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-03-25")
public class CommentService {

  /**
   * 评论服务
   * @author 胡晓光
   */
  public interface Iface {

    /**
     * 取得TopN评论数据
     * @param topN
     * @return
     * 
     * @param foreignId
     * @param topN
     */
    public String loadCommentsByForeignIdTopN(String foreignId, int topN) throws org.apache.thrift.TException;

    /**
     * 分页取得评论数据
     * @param pageInfo
     * @return
     * 
     * @param foreignId
     * @param pageNum
     */
    public String loadCommentsByForeignId(String foreignId, int pageNum) throws org.apache.thrift.TException;

    /**
     * 对某个对象进行评论
     * @param userid -- 评论人id
     * @param content -- 评论的内容
     * @param commentObjId -- 被评论的对象的id
     * @param commentObjName -- 被评论的对象的名称，可以是对象的类全名
     * @param score -- 评价的打分
     * @return 成功与否标志
     * 
     * @param userid
     * @param content
     * @param commentObjId
     * @param commentObjName
     * @param score
     */
    public String submitComment(String userid, String content, String commentObjId, String commentObjName, int score) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void loadCommentsByForeignIdTopN(String foreignId, int topN, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void loadCommentsByForeignId(String foreignId, int pageNum, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void submitComment(String userid, String content, String commentObjId, String commentObjName, int score, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public String loadCommentsByForeignIdTopN(String foreignId, int topN) throws org.apache.thrift.TException
    {
      send_loadCommentsByForeignIdTopN(foreignId, topN);
      return recv_loadCommentsByForeignIdTopN();
    }

    public void send_loadCommentsByForeignIdTopN(String foreignId, int topN) throws org.apache.thrift.TException
    {
      loadCommentsByForeignIdTopN_args args = new loadCommentsByForeignIdTopN_args();
      args.setForeignId(foreignId);
      args.setTopN(topN);
      sendBase("loadCommentsByForeignIdTopN", args);
    }

    public String recv_loadCommentsByForeignIdTopN() throws org.apache.thrift.TException
    {
      loadCommentsByForeignIdTopN_result result = new loadCommentsByForeignIdTopN_result();
      receiveBase(result, "loadCommentsByForeignIdTopN");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "loadCommentsByForeignIdTopN failed: unknown result");
    }

    public String loadCommentsByForeignId(String foreignId, int pageNum) throws org.apache.thrift.TException
    {
      send_loadCommentsByForeignId(foreignId, pageNum);
      return recv_loadCommentsByForeignId();
    }

    public void send_loadCommentsByForeignId(String foreignId, int pageNum) throws org.apache.thrift.TException
    {
      loadCommentsByForeignId_args args = new loadCommentsByForeignId_args();
      args.setForeignId(foreignId);
      args.setPageNum(pageNum);
      sendBase("loadCommentsByForeignId", args);
    }

    public String recv_loadCommentsByForeignId() throws org.apache.thrift.TException
    {
      loadCommentsByForeignId_result result = new loadCommentsByForeignId_result();
      receiveBase(result, "loadCommentsByForeignId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "loadCommentsByForeignId failed: unknown result");
    }

    public String submitComment(String userid, String content, String commentObjId, String commentObjName, int score) throws org.apache.thrift.TException
    {
      send_submitComment(userid, content, commentObjId, commentObjName, score);
      return recv_submitComment();
    }

    public void send_submitComment(String userid, String content, String commentObjId, String commentObjName, int score) throws org.apache.thrift.TException
    {
      submitComment_args args = new submitComment_args();
      args.setUserid(userid);
      args.setContent(content);
      args.setCommentObjId(commentObjId);
      args.setCommentObjName(commentObjName);
      args.setScore(score);
      sendBase("submitComment", args);
    }

    public String recv_submitComment() throws org.apache.thrift.TException
    {
      submitComment_result result = new submitComment_result();
      receiveBase(result, "submitComment");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "submitComment failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void loadCommentsByForeignIdTopN(String foreignId, int topN, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      loadCommentsByForeignIdTopN_call method_call = new loadCommentsByForeignIdTopN_call(foreignId, topN, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class loadCommentsByForeignIdTopN_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String foreignId;
      private int topN;
      public loadCommentsByForeignIdTopN_call(String foreignId, int topN, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.foreignId = foreignId;
        this.topN = topN;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("loadCommentsByForeignIdTopN", org.apache.thrift.protocol.TMessageType.CALL, 0));
        loadCommentsByForeignIdTopN_args args = new loadCommentsByForeignIdTopN_args();
        args.setForeignId(foreignId);
        args.setTopN(topN);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_loadCommentsByForeignIdTopN();
      }
    }

    public void loadCommentsByForeignId(String foreignId, int pageNum, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      loadCommentsByForeignId_call method_call = new loadCommentsByForeignId_call(foreignId, pageNum, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class loadCommentsByForeignId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String foreignId;
      private int pageNum;
      public loadCommentsByForeignId_call(String foreignId, int pageNum, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.foreignId = foreignId;
        this.pageNum = pageNum;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("loadCommentsByForeignId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        loadCommentsByForeignId_args args = new loadCommentsByForeignId_args();
        args.setForeignId(foreignId);
        args.setPageNum(pageNum);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_loadCommentsByForeignId();
      }
    }

    public void submitComment(String userid, String content, String commentObjId, String commentObjName, int score, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      submitComment_call method_call = new submitComment_call(userid, content, commentObjId, commentObjName, score, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class submitComment_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String userid;
      private String content;
      private String commentObjId;
      private String commentObjName;
      private int score;
      public submitComment_call(String userid, String content, String commentObjId, String commentObjName, int score, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userid = userid;
        this.content = content;
        this.commentObjId = commentObjId;
        this.commentObjName = commentObjName;
        this.score = score;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("submitComment", org.apache.thrift.protocol.TMessageType.CALL, 0));
        submitComment_args args = new submitComment_args();
        args.setUserid(userid);
        args.setContent(content);
        args.setCommentObjId(commentObjId);
        args.setCommentObjName(commentObjName);
        args.setScore(score);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_submitComment();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("loadCommentsByForeignIdTopN", new loadCommentsByForeignIdTopN());
      processMap.put("loadCommentsByForeignId", new loadCommentsByForeignId());
      processMap.put("submitComment", new submitComment());
      return processMap;
    }

    public static class loadCommentsByForeignIdTopN<I extends Iface> extends org.apache.thrift.ProcessFunction<I, loadCommentsByForeignIdTopN_args> {
      public loadCommentsByForeignIdTopN() {
        super("loadCommentsByForeignIdTopN");
      }

      public loadCommentsByForeignIdTopN_args getEmptyArgsInstance() {
        return new loadCommentsByForeignIdTopN_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public loadCommentsByForeignIdTopN_result getResult(I iface, loadCommentsByForeignIdTopN_args args) throws org.apache.thrift.TException {
        loadCommentsByForeignIdTopN_result result = new loadCommentsByForeignIdTopN_result();
        result.success = iface.loadCommentsByForeignIdTopN(args.foreignId, args.topN);
        return result;
      }
    }

    public static class loadCommentsByForeignId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, loadCommentsByForeignId_args> {
      public loadCommentsByForeignId() {
        super("loadCommentsByForeignId");
      }

      public loadCommentsByForeignId_args getEmptyArgsInstance() {
        return new loadCommentsByForeignId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public loadCommentsByForeignId_result getResult(I iface, loadCommentsByForeignId_args args) throws org.apache.thrift.TException {
        loadCommentsByForeignId_result result = new loadCommentsByForeignId_result();
        result.success = iface.loadCommentsByForeignId(args.foreignId, args.pageNum);
        return result;
      }
    }

    public static class submitComment<I extends Iface> extends org.apache.thrift.ProcessFunction<I, submitComment_args> {
      public submitComment() {
        super("submitComment");
      }

      public submitComment_args getEmptyArgsInstance() {
        return new submitComment_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public submitComment_result getResult(I iface, submitComment_args args) throws org.apache.thrift.TException {
        submitComment_result result = new submitComment_result();
        result.success = iface.submitComment(args.userid, args.content, args.commentObjId, args.commentObjName, args.score);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("loadCommentsByForeignIdTopN", new loadCommentsByForeignIdTopN());
      processMap.put("loadCommentsByForeignId", new loadCommentsByForeignId());
      processMap.put("submitComment", new submitComment());
      return processMap;
    }

    public static class loadCommentsByForeignIdTopN<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, loadCommentsByForeignIdTopN_args, String> {
      public loadCommentsByForeignIdTopN() {
        super("loadCommentsByForeignIdTopN");
      }

      public loadCommentsByForeignIdTopN_args getEmptyArgsInstance() {
        return new loadCommentsByForeignIdTopN_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            loadCommentsByForeignIdTopN_result result = new loadCommentsByForeignIdTopN_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            loadCommentsByForeignIdTopN_result result = new loadCommentsByForeignIdTopN_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, loadCommentsByForeignIdTopN_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.loadCommentsByForeignIdTopN(args.foreignId, args.topN,resultHandler);
      }
    }

    public static class loadCommentsByForeignId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, loadCommentsByForeignId_args, String> {
      public loadCommentsByForeignId() {
        super("loadCommentsByForeignId");
      }

      public loadCommentsByForeignId_args getEmptyArgsInstance() {
        return new loadCommentsByForeignId_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            loadCommentsByForeignId_result result = new loadCommentsByForeignId_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            loadCommentsByForeignId_result result = new loadCommentsByForeignId_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, loadCommentsByForeignId_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.loadCommentsByForeignId(args.foreignId, args.pageNum,resultHandler);
      }
    }

    public static class submitComment<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, submitComment_args, String> {
      public submitComment() {
        super("submitComment");
      }

      public submitComment_args getEmptyArgsInstance() {
        return new submitComment_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            submitComment_result result = new submitComment_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            submitComment_result result = new submitComment_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, submitComment_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.submitComment(args.userid, args.content, args.commentObjId, args.commentObjName, args.score,resultHandler);
      }
    }

  }

  public static class loadCommentsByForeignIdTopN_args implements org.apache.thrift.TBase<loadCommentsByForeignIdTopN_args, loadCommentsByForeignIdTopN_args._Fields>, java.io.Serializable, Cloneable, Comparable<loadCommentsByForeignIdTopN_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("loadCommentsByForeignIdTopN_args");

    private static final org.apache.thrift.protocol.TField FOREIGN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("foreignId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField TOP_N_FIELD_DESC = new org.apache.thrift.protocol.TField("topN", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new loadCommentsByForeignIdTopN_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new loadCommentsByForeignIdTopN_argsTupleSchemeFactory());
    }

    public String foreignId; // required
    public int topN; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FOREIGN_ID((short)1, "foreignId"),
      TOP_N((short)2, "topN");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FOREIGN_ID
            return FOREIGN_ID;
          case 2: // TOP_N
            return TOP_N;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TOPN_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FOREIGN_ID, new org.apache.thrift.meta_data.FieldMetaData("foreignId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TOP_N, new org.apache.thrift.meta_data.FieldMetaData("topN", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(loadCommentsByForeignIdTopN_args.class, metaDataMap);
    }

    public loadCommentsByForeignIdTopN_args() {
    }

    public loadCommentsByForeignIdTopN_args(
      String foreignId,
      int topN)
    {
      this();
      this.foreignId = foreignId;
      this.topN = topN;
      setTopNIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public loadCommentsByForeignIdTopN_args(loadCommentsByForeignIdTopN_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetForeignId()) {
        this.foreignId = other.foreignId;
      }
      this.topN = other.topN;
    }

    public loadCommentsByForeignIdTopN_args deepCopy() {
      return new loadCommentsByForeignIdTopN_args(this);
    }

    @Override
    public void clear() {
      this.foreignId = null;
      setTopNIsSet(false);
      this.topN = 0;
    }

    public String getForeignId() {
      return this.foreignId;
    }

    public loadCommentsByForeignIdTopN_args setForeignId(String foreignId) {
      this.foreignId = foreignId;
      return this;
    }

    public void unsetForeignId() {
      this.foreignId = null;
    }

    /** Returns true if field foreignId is set (has been assigned a value) and false otherwise */
    public boolean isSetForeignId() {
      return this.foreignId != null;
    }

    public void setForeignIdIsSet(boolean value) {
      if (!value) {
        this.foreignId = null;
      }
    }

    public int getTopN() {
      return this.topN;
    }

    public loadCommentsByForeignIdTopN_args setTopN(int topN) {
      this.topN = topN;
      setTopNIsSet(true);
      return this;
    }

    public void unsetTopN() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOPN_ISSET_ID);
    }

    /** Returns true if field topN is set (has been assigned a value) and false otherwise */
    public boolean isSetTopN() {
      return EncodingUtils.testBit(__isset_bitfield, __TOPN_ISSET_ID);
    }

    public void setTopNIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOPN_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FOREIGN_ID:
        if (value == null) {
          unsetForeignId();
        } else {
          setForeignId((String)value);
        }
        break;

      case TOP_N:
        if (value == null) {
          unsetTopN();
        } else {
          setTopN((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FOREIGN_ID:
        return getForeignId();

      case TOP_N:
        return getTopN();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FOREIGN_ID:
        return isSetForeignId();
      case TOP_N:
        return isSetTopN();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof loadCommentsByForeignIdTopN_args)
        return this.equals((loadCommentsByForeignIdTopN_args)that);
      return false;
    }

    public boolean equals(loadCommentsByForeignIdTopN_args that) {
      if (that == null)
        return false;

      boolean this_present_foreignId = true && this.isSetForeignId();
      boolean that_present_foreignId = true && that.isSetForeignId();
      if (this_present_foreignId || that_present_foreignId) {
        if (!(this_present_foreignId && that_present_foreignId))
          return false;
        if (!this.foreignId.equals(that.foreignId))
          return false;
      }

      boolean this_present_topN = true;
      boolean that_present_topN = true;
      if (this_present_topN || that_present_topN) {
        if (!(this_present_topN && that_present_topN))
          return false;
        if (this.topN != that.topN)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_foreignId = true && (isSetForeignId());
      list.add(present_foreignId);
      if (present_foreignId)
        list.add(foreignId);

      boolean present_topN = true;
      list.add(present_topN);
      if (present_topN)
        list.add(topN);

      return list.hashCode();
    }

    @Override
    public int compareTo(loadCommentsByForeignIdTopN_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetForeignId()).compareTo(other.isSetForeignId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetForeignId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.foreignId, other.foreignId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTopN()).compareTo(other.isSetTopN());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTopN()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.topN, other.topN);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("loadCommentsByForeignIdTopN_args(");
      boolean first = true;

      sb.append("foreignId:");
      if (this.foreignId == null) {
        sb.append("null");
      } else {
        sb.append(this.foreignId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("topN:");
      sb.append(this.topN);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class loadCommentsByForeignIdTopN_argsStandardSchemeFactory implements SchemeFactory {
      public loadCommentsByForeignIdTopN_argsStandardScheme getScheme() {
        return new loadCommentsByForeignIdTopN_argsStandardScheme();
      }
    }

    private static class loadCommentsByForeignIdTopN_argsStandardScheme extends StandardScheme<loadCommentsByForeignIdTopN_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, loadCommentsByForeignIdTopN_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FOREIGN_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.foreignId = iprot.readString();
                struct.setForeignIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TOP_N
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.topN = iprot.readI32();
                struct.setTopNIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, loadCommentsByForeignIdTopN_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.foreignId != null) {
          oprot.writeFieldBegin(FOREIGN_ID_FIELD_DESC);
          oprot.writeString(struct.foreignId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(TOP_N_FIELD_DESC);
        oprot.writeI32(struct.topN);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class loadCommentsByForeignIdTopN_argsTupleSchemeFactory implements SchemeFactory {
      public loadCommentsByForeignIdTopN_argsTupleScheme getScheme() {
        return new loadCommentsByForeignIdTopN_argsTupleScheme();
      }
    }

    private static class loadCommentsByForeignIdTopN_argsTupleScheme extends TupleScheme<loadCommentsByForeignIdTopN_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, loadCommentsByForeignIdTopN_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetForeignId()) {
          optionals.set(0);
        }
        if (struct.isSetTopN()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetForeignId()) {
          oprot.writeString(struct.foreignId);
        }
        if (struct.isSetTopN()) {
          oprot.writeI32(struct.topN);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, loadCommentsByForeignIdTopN_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.foreignId = iprot.readString();
          struct.setForeignIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.topN = iprot.readI32();
          struct.setTopNIsSet(true);
        }
      }
    }

  }

  public static class loadCommentsByForeignIdTopN_result implements org.apache.thrift.TBase<loadCommentsByForeignIdTopN_result, loadCommentsByForeignIdTopN_result._Fields>, java.io.Serializable, Cloneable, Comparable<loadCommentsByForeignIdTopN_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("loadCommentsByForeignIdTopN_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new loadCommentsByForeignIdTopN_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new loadCommentsByForeignIdTopN_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(loadCommentsByForeignIdTopN_result.class, metaDataMap);
    }

    public loadCommentsByForeignIdTopN_result() {
    }

    public loadCommentsByForeignIdTopN_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public loadCommentsByForeignIdTopN_result(loadCommentsByForeignIdTopN_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public loadCommentsByForeignIdTopN_result deepCopy() {
      return new loadCommentsByForeignIdTopN_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public loadCommentsByForeignIdTopN_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof loadCommentsByForeignIdTopN_result)
        return this.equals((loadCommentsByForeignIdTopN_result)that);
      return false;
    }

    public boolean equals(loadCommentsByForeignIdTopN_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(loadCommentsByForeignIdTopN_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("loadCommentsByForeignIdTopN_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class loadCommentsByForeignIdTopN_resultStandardSchemeFactory implements SchemeFactory {
      public loadCommentsByForeignIdTopN_resultStandardScheme getScheme() {
        return new loadCommentsByForeignIdTopN_resultStandardScheme();
      }
    }

    private static class loadCommentsByForeignIdTopN_resultStandardScheme extends StandardScheme<loadCommentsByForeignIdTopN_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, loadCommentsByForeignIdTopN_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, loadCommentsByForeignIdTopN_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class loadCommentsByForeignIdTopN_resultTupleSchemeFactory implements SchemeFactory {
      public loadCommentsByForeignIdTopN_resultTupleScheme getScheme() {
        return new loadCommentsByForeignIdTopN_resultTupleScheme();
      }
    }

    private static class loadCommentsByForeignIdTopN_resultTupleScheme extends TupleScheme<loadCommentsByForeignIdTopN_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, loadCommentsByForeignIdTopN_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, loadCommentsByForeignIdTopN_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class loadCommentsByForeignId_args implements org.apache.thrift.TBase<loadCommentsByForeignId_args, loadCommentsByForeignId_args._Fields>, java.io.Serializable, Cloneable, Comparable<loadCommentsByForeignId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("loadCommentsByForeignId_args");

    private static final org.apache.thrift.protocol.TField FOREIGN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("foreignId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PAGE_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("pageNum", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new loadCommentsByForeignId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new loadCommentsByForeignId_argsTupleSchemeFactory());
    }

    public String foreignId; // required
    public int pageNum; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FOREIGN_ID((short)1, "foreignId"),
      PAGE_NUM((short)2, "pageNum");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FOREIGN_ID
            return FOREIGN_ID;
          case 2: // PAGE_NUM
            return PAGE_NUM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PAGENUM_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FOREIGN_ID, new org.apache.thrift.meta_data.FieldMetaData("foreignId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PAGE_NUM, new org.apache.thrift.meta_data.FieldMetaData("pageNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(loadCommentsByForeignId_args.class, metaDataMap);
    }

    public loadCommentsByForeignId_args() {
    }

    public loadCommentsByForeignId_args(
      String foreignId,
      int pageNum)
    {
      this();
      this.foreignId = foreignId;
      this.pageNum = pageNum;
      setPageNumIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public loadCommentsByForeignId_args(loadCommentsByForeignId_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetForeignId()) {
        this.foreignId = other.foreignId;
      }
      this.pageNum = other.pageNum;
    }

    public loadCommentsByForeignId_args deepCopy() {
      return new loadCommentsByForeignId_args(this);
    }

    @Override
    public void clear() {
      this.foreignId = null;
      setPageNumIsSet(false);
      this.pageNum = 0;
    }

    public String getForeignId() {
      return this.foreignId;
    }

    public loadCommentsByForeignId_args setForeignId(String foreignId) {
      this.foreignId = foreignId;
      return this;
    }

    public void unsetForeignId() {
      this.foreignId = null;
    }

    /** Returns true if field foreignId is set (has been assigned a value) and false otherwise */
    public boolean isSetForeignId() {
      return this.foreignId != null;
    }

    public void setForeignIdIsSet(boolean value) {
      if (!value) {
        this.foreignId = null;
      }
    }

    public int getPageNum() {
      return this.pageNum;
    }

    public loadCommentsByForeignId_args setPageNum(int pageNum) {
      this.pageNum = pageNum;
      setPageNumIsSet(true);
      return this;
    }

    public void unsetPageNum() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGENUM_ISSET_ID);
    }

    /** Returns true if field pageNum is set (has been assigned a value) and false otherwise */
    public boolean isSetPageNum() {
      return EncodingUtils.testBit(__isset_bitfield, __PAGENUM_ISSET_ID);
    }

    public void setPageNumIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGENUM_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FOREIGN_ID:
        if (value == null) {
          unsetForeignId();
        } else {
          setForeignId((String)value);
        }
        break;

      case PAGE_NUM:
        if (value == null) {
          unsetPageNum();
        } else {
          setPageNum((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FOREIGN_ID:
        return getForeignId();

      case PAGE_NUM:
        return getPageNum();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FOREIGN_ID:
        return isSetForeignId();
      case PAGE_NUM:
        return isSetPageNum();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof loadCommentsByForeignId_args)
        return this.equals((loadCommentsByForeignId_args)that);
      return false;
    }

    public boolean equals(loadCommentsByForeignId_args that) {
      if (that == null)
        return false;

      boolean this_present_foreignId = true && this.isSetForeignId();
      boolean that_present_foreignId = true && that.isSetForeignId();
      if (this_present_foreignId || that_present_foreignId) {
        if (!(this_present_foreignId && that_present_foreignId))
          return false;
        if (!this.foreignId.equals(that.foreignId))
          return false;
      }

      boolean this_present_pageNum = true;
      boolean that_present_pageNum = true;
      if (this_present_pageNum || that_present_pageNum) {
        if (!(this_present_pageNum && that_present_pageNum))
          return false;
        if (this.pageNum != that.pageNum)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_foreignId = true && (isSetForeignId());
      list.add(present_foreignId);
      if (present_foreignId)
        list.add(foreignId);

      boolean present_pageNum = true;
      list.add(present_pageNum);
      if (present_pageNum)
        list.add(pageNum);

      return list.hashCode();
    }

    @Override
    public int compareTo(loadCommentsByForeignId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetForeignId()).compareTo(other.isSetForeignId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetForeignId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.foreignId, other.foreignId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPageNum()).compareTo(other.isSetPageNum());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageNum()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageNum, other.pageNum);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("loadCommentsByForeignId_args(");
      boolean first = true;

      sb.append("foreignId:");
      if (this.foreignId == null) {
        sb.append("null");
      } else {
        sb.append(this.foreignId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageNum:");
      sb.append(this.pageNum);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class loadCommentsByForeignId_argsStandardSchemeFactory implements SchemeFactory {
      public loadCommentsByForeignId_argsStandardScheme getScheme() {
        return new loadCommentsByForeignId_argsStandardScheme();
      }
    }

    private static class loadCommentsByForeignId_argsStandardScheme extends StandardScheme<loadCommentsByForeignId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, loadCommentsByForeignId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FOREIGN_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.foreignId = iprot.readString();
                struct.setForeignIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PAGE_NUM
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pageNum = iprot.readI32();
                struct.setPageNumIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, loadCommentsByForeignId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.foreignId != null) {
          oprot.writeFieldBegin(FOREIGN_ID_FIELD_DESC);
          oprot.writeString(struct.foreignId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PAGE_NUM_FIELD_DESC);
        oprot.writeI32(struct.pageNum);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class loadCommentsByForeignId_argsTupleSchemeFactory implements SchemeFactory {
      public loadCommentsByForeignId_argsTupleScheme getScheme() {
        return new loadCommentsByForeignId_argsTupleScheme();
      }
    }

    private static class loadCommentsByForeignId_argsTupleScheme extends TupleScheme<loadCommentsByForeignId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, loadCommentsByForeignId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetForeignId()) {
          optionals.set(0);
        }
        if (struct.isSetPageNum()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetForeignId()) {
          oprot.writeString(struct.foreignId);
        }
        if (struct.isSetPageNum()) {
          oprot.writeI32(struct.pageNum);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, loadCommentsByForeignId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.foreignId = iprot.readString();
          struct.setForeignIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.pageNum = iprot.readI32();
          struct.setPageNumIsSet(true);
        }
      }
    }

  }

  public static class loadCommentsByForeignId_result implements org.apache.thrift.TBase<loadCommentsByForeignId_result, loadCommentsByForeignId_result._Fields>, java.io.Serializable, Cloneable, Comparable<loadCommentsByForeignId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("loadCommentsByForeignId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new loadCommentsByForeignId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new loadCommentsByForeignId_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(loadCommentsByForeignId_result.class, metaDataMap);
    }

    public loadCommentsByForeignId_result() {
    }

    public loadCommentsByForeignId_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public loadCommentsByForeignId_result(loadCommentsByForeignId_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public loadCommentsByForeignId_result deepCopy() {
      return new loadCommentsByForeignId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public loadCommentsByForeignId_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof loadCommentsByForeignId_result)
        return this.equals((loadCommentsByForeignId_result)that);
      return false;
    }

    public boolean equals(loadCommentsByForeignId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(loadCommentsByForeignId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("loadCommentsByForeignId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class loadCommentsByForeignId_resultStandardSchemeFactory implements SchemeFactory {
      public loadCommentsByForeignId_resultStandardScheme getScheme() {
        return new loadCommentsByForeignId_resultStandardScheme();
      }
    }

    private static class loadCommentsByForeignId_resultStandardScheme extends StandardScheme<loadCommentsByForeignId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, loadCommentsByForeignId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, loadCommentsByForeignId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class loadCommentsByForeignId_resultTupleSchemeFactory implements SchemeFactory {
      public loadCommentsByForeignId_resultTupleScheme getScheme() {
        return new loadCommentsByForeignId_resultTupleScheme();
      }
    }

    private static class loadCommentsByForeignId_resultTupleScheme extends TupleScheme<loadCommentsByForeignId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, loadCommentsByForeignId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, loadCommentsByForeignId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class submitComment_args implements org.apache.thrift.TBase<submitComment_args, submitComment_args._Fields>, java.io.Serializable, Cloneable, Comparable<submitComment_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("submitComment_args");

    private static final org.apache.thrift.protocol.TField USERID_FIELD_DESC = new org.apache.thrift.protocol.TField("userid", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("content", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField COMMENT_OBJ_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("commentObjId", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField COMMENT_OBJ_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("commentObjName", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField SCORE_FIELD_DESC = new org.apache.thrift.protocol.TField("score", org.apache.thrift.protocol.TType.I32, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new submitComment_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new submitComment_argsTupleSchemeFactory());
    }

    public String userid; // required
    public String content; // required
    public String commentObjId; // required
    public String commentObjName; // required
    public int score; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USERID((short)1, "userid"),
      CONTENT((short)2, "content"),
      COMMENT_OBJ_ID((short)3, "commentObjId"),
      COMMENT_OBJ_NAME((short)4, "commentObjName"),
      SCORE((short)5, "score");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USERID
            return USERID;
          case 2: // CONTENT
            return CONTENT;
          case 3: // COMMENT_OBJ_ID
            return COMMENT_OBJ_ID;
          case 4: // COMMENT_OBJ_NAME
            return COMMENT_OBJ_NAME;
          case 5: // SCORE
            return SCORE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SCORE_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USERID, new org.apache.thrift.meta_data.FieldMetaData("userid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CONTENT, new org.apache.thrift.meta_data.FieldMetaData("content", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.COMMENT_OBJ_ID, new org.apache.thrift.meta_data.FieldMetaData("commentObjId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.COMMENT_OBJ_NAME, new org.apache.thrift.meta_data.FieldMetaData("commentObjName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SCORE, new org.apache.thrift.meta_data.FieldMetaData("score", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(submitComment_args.class, metaDataMap);
    }

    public submitComment_args() {
    }

    public submitComment_args(
      String userid,
      String content,
      String commentObjId,
      String commentObjName,
      int score)
    {
      this();
      this.userid = userid;
      this.content = content;
      this.commentObjId = commentObjId;
      this.commentObjName = commentObjName;
      this.score = score;
      setScoreIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public submitComment_args(submitComment_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetUserid()) {
        this.userid = other.userid;
      }
      if (other.isSetContent()) {
        this.content = other.content;
      }
      if (other.isSetCommentObjId()) {
        this.commentObjId = other.commentObjId;
      }
      if (other.isSetCommentObjName()) {
        this.commentObjName = other.commentObjName;
      }
      this.score = other.score;
    }

    public submitComment_args deepCopy() {
      return new submitComment_args(this);
    }

    @Override
    public void clear() {
      this.userid = null;
      this.content = null;
      this.commentObjId = null;
      this.commentObjName = null;
      setScoreIsSet(false);
      this.score = 0;
    }

    public String getUserid() {
      return this.userid;
    }

    public submitComment_args setUserid(String userid) {
      this.userid = userid;
      return this;
    }

    public void unsetUserid() {
      this.userid = null;
    }

    /** Returns true if field userid is set (has been assigned a value) and false otherwise */
    public boolean isSetUserid() {
      return this.userid != null;
    }

    public void setUseridIsSet(boolean value) {
      if (!value) {
        this.userid = null;
      }
    }

    public String getContent() {
      return this.content;
    }

    public submitComment_args setContent(String content) {
      this.content = content;
      return this;
    }

    public void unsetContent() {
      this.content = null;
    }

    /** Returns true if field content is set (has been assigned a value) and false otherwise */
    public boolean isSetContent() {
      return this.content != null;
    }

    public void setContentIsSet(boolean value) {
      if (!value) {
        this.content = null;
      }
    }

    public String getCommentObjId() {
      return this.commentObjId;
    }

    public submitComment_args setCommentObjId(String commentObjId) {
      this.commentObjId = commentObjId;
      return this;
    }

    public void unsetCommentObjId() {
      this.commentObjId = null;
    }

    /** Returns true if field commentObjId is set (has been assigned a value) and false otherwise */
    public boolean isSetCommentObjId() {
      return this.commentObjId != null;
    }

    public void setCommentObjIdIsSet(boolean value) {
      if (!value) {
        this.commentObjId = null;
      }
    }

    public String getCommentObjName() {
      return this.commentObjName;
    }

    public submitComment_args setCommentObjName(String commentObjName) {
      this.commentObjName = commentObjName;
      return this;
    }

    public void unsetCommentObjName() {
      this.commentObjName = null;
    }

    /** Returns true if field commentObjName is set (has been assigned a value) and false otherwise */
    public boolean isSetCommentObjName() {
      return this.commentObjName != null;
    }

    public void setCommentObjNameIsSet(boolean value) {
      if (!value) {
        this.commentObjName = null;
      }
    }

    public int getScore() {
      return this.score;
    }

    public submitComment_args setScore(int score) {
      this.score = score;
      setScoreIsSet(true);
      return this;
    }

    public void unsetScore() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SCORE_ISSET_ID);
    }

    /** Returns true if field score is set (has been assigned a value) and false otherwise */
    public boolean isSetScore() {
      return EncodingUtils.testBit(__isset_bitfield, __SCORE_ISSET_ID);
    }

    public void setScoreIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SCORE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USERID:
        if (value == null) {
          unsetUserid();
        } else {
          setUserid((String)value);
        }
        break;

      case CONTENT:
        if (value == null) {
          unsetContent();
        } else {
          setContent((String)value);
        }
        break;

      case COMMENT_OBJ_ID:
        if (value == null) {
          unsetCommentObjId();
        } else {
          setCommentObjId((String)value);
        }
        break;

      case COMMENT_OBJ_NAME:
        if (value == null) {
          unsetCommentObjName();
        } else {
          setCommentObjName((String)value);
        }
        break;

      case SCORE:
        if (value == null) {
          unsetScore();
        } else {
          setScore((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USERID:
        return getUserid();

      case CONTENT:
        return getContent();

      case COMMENT_OBJ_ID:
        return getCommentObjId();

      case COMMENT_OBJ_NAME:
        return getCommentObjName();

      case SCORE:
        return getScore();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USERID:
        return isSetUserid();
      case CONTENT:
        return isSetContent();
      case COMMENT_OBJ_ID:
        return isSetCommentObjId();
      case COMMENT_OBJ_NAME:
        return isSetCommentObjName();
      case SCORE:
        return isSetScore();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof submitComment_args)
        return this.equals((submitComment_args)that);
      return false;
    }

    public boolean equals(submitComment_args that) {
      if (that == null)
        return false;

      boolean this_present_userid = true && this.isSetUserid();
      boolean that_present_userid = true && that.isSetUserid();
      if (this_present_userid || that_present_userid) {
        if (!(this_present_userid && that_present_userid))
          return false;
        if (!this.userid.equals(that.userid))
          return false;
      }

      boolean this_present_content = true && this.isSetContent();
      boolean that_present_content = true && that.isSetContent();
      if (this_present_content || that_present_content) {
        if (!(this_present_content && that_present_content))
          return false;
        if (!this.content.equals(that.content))
          return false;
      }

      boolean this_present_commentObjId = true && this.isSetCommentObjId();
      boolean that_present_commentObjId = true && that.isSetCommentObjId();
      if (this_present_commentObjId || that_present_commentObjId) {
        if (!(this_present_commentObjId && that_present_commentObjId))
          return false;
        if (!this.commentObjId.equals(that.commentObjId))
          return false;
      }

      boolean this_present_commentObjName = true && this.isSetCommentObjName();
      boolean that_present_commentObjName = true && that.isSetCommentObjName();
      if (this_present_commentObjName || that_present_commentObjName) {
        if (!(this_present_commentObjName && that_present_commentObjName))
          return false;
        if (!this.commentObjName.equals(that.commentObjName))
          return false;
      }

      boolean this_present_score = true;
      boolean that_present_score = true;
      if (this_present_score || that_present_score) {
        if (!(this_present_score && that_present_score))
          return false;
        if (this.score != that.score)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_userid = true && (isSetUserid());
      list.add(present_userid);
      if (present_userid)
        list.add(userid);

      boolean present_content = true && (isSetContent());
      list.add(present_content);
      if (present_content)
        list.add(content);

      boolean present_commentObjId = true && (isSetCommentObjId());
      list.add(present_commentObjId);
      if (present_commentObjId)
        list.add(commentObjId);

      boolean present_commentObjName = true && (isSetCommentObjName());
      list.add(present_commentObjName);
      if (present_commentObjName)
        list.add(commentObjName);

      boolean present_score = true;
      list.add(present_score);
      if (present_score)
        list.add(score);

      return list.hashCode();
    }

    @Override
    public int compareTo(submitComment_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUserid()).compareTo(other.isSetUserid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userid, other.userid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetContent()).compareTo(other.isSetContent());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetContent()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.content, other.content);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCommentObjId()).compareTo(other.isSetCommentObjId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCommentObjId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commentObjId, other.commentObjId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCommentObjName()).compareTo(other.isSetCommentObjName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCommentObjName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commentObjName, other.commentObjName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetScore()).compareTo(other.isSetScore());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetScore()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.score, other.score);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("submitComment_args(");
      boolean first = true;

      sb.append("userid:");
      if (this.userid == null) {
        sb.append("null");
      } else {
        sb.append(this.userid);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("content:");
      if (this.content == null) {
        sb.append("null");
      } else {
        sb.append(this.content);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("commentObjId:");
      if (this.commentObjId == null) {
        sb.append("null");
      } else {
        sb.append(this.commentObjId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("commentObjName:");
      if (this.commentObjName == null) {
        sb.append("null");
      } else {
        sb.append(this.commentObjName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("score:");
      sb.append(this.score);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class submitComment_argsStandardSchemeFactory implements SchemeFactory {
      public submitComment_argsStandardScheme getScheme() {
        return new submitComment_argsStandardScheme();
      }
    }

    private static class submitComment_argsStandardScheme extends StandardScheme<submitComment_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, submitComment_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USERID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userid = iprot.readString();
                struct.setUseridIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CONTENT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.content = iprot.readString();
                struct.setContentIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // COMMENT_OBJ_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.commentObjId = iprot.readString();
                struct.setCommentObjIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // COMMENT_OBJ_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.commentObjName = iprot.readString();
                struct.setCommentObjNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // SCORE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.score = iprot.readI32();
                struct.setScoreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, submitComment_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.userid != null) {
          oprot.writeFieldBegin(USERID_FIELD_DESC);
          oprot.writeString(struct.userid);
          oprot.writeFieldEnd();
        }
        if (struct.content != null) {
          oprot.writeFieldBegin(CONTENT_FIELD_DESC);
          oprot.writeString(struct.content);
          oprot.writeFieldEnd();
        }
        if (struct.commentObjId != null) {
          oprot.writeFieldBegin(COMMENT_OBJ_ID_FIELD_DESC);
          oprot.writeString(struct.commentObjId);
          oprot.writeFieldEnd();
        }
        if (struct.commentObjName != null) {
          oprot.writeFieldBegin(COMMENT_OBJ_NAME_FIELD_DESC);
          oprot.writeString(struct.commentObjName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(SCORE_FIELD_DESC);
        oprot.writeI32(struct.score);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class submitComment_argsTupleSchemeFactory implements SchemeFactory {
      public submitComment_argsTupleScheme getScheme() {
        return new submitComment_argsTupleScheme();
      }
    }

    private static class submitComment_argsTupleScheme extends TupleScheme<submitComment_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, submitComment_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUserid()) {
          optionals.set(0);
        }
        if (struct.isSetContent()) {
          optionals.set(1);
        }
        if (struct.isSetCommentObjId()) {
          optionals.set(2);
        }
        if (struct.isSetCommentObjName()) {
          optionals.set(3);
        }
        if (struct.isSetScore()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetUserid()) {
          oprot.writeString(struct.userid);
        }
        if (struct.isSetContent()) {
          oprot.writeString(struct.content);
        }
        if (struct.isSetCommentObjId()) {
          oprot.writeString(struct.commentObjId);
        }
        if (struct.isSetCommentObjName()) {
          oprot.writeString(struct.commentObjName);
        }
        if (struct.isSetScore()) {
          oprot.writeI32(struct.score);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, submitComment_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.userid = iprot.readString();
          struct.setUseridIsSet(true);
        }
        if (incoming.get(1)) {
          struct.content = iprot.readString();
          struct.setContentIsSet(true);
        }
        if (incoming.get(2)) {
          struct.commentObjId = iprot.readString();
          struct.setCommentObjIdIsSet(true);
        }
        if (incoming.get(3)) {
          struct.commentObjName = iprot.readString();
          struct.setCommentObjNameIsSet(true);
        }
        if (incoming.get(4)) {
          struct.score = iprot.readI32();
          struct.setScoreIsSet(true);
        }
      }
    }

  }

  public static class submitComment_result implements org.apache.thrift.TBase<submitComment_result, submitComment_result._Fields>, java.io.Serializable, Cloneable, Comparable<submitComment_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("submitComment_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new submitComment_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new submitComment_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(submitComment_result.class, metaDataMap);
    }

    public submitComment_result() {
    }

    public submitComment_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public submitComment_result(submitComment_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public submitComment_result deepCopy() {
      return new submitComment_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public submitComment_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof submitComment_result)
        return this.equals((submitComment_result)that);
      return false;
    }

    public boolean equals(submitComment_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(submitComment_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("submitComment_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class submitComment_resultStandardSchemeFactory implements SchemeFactory {
      public submitComment_resultStandardScheme getScheme() {
        return new submitComment_resultStandardScheme();
      }
    }

    private static class submitComment_resultStandardScheme extends StandardScheme<submitComment_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, submitComment_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, submitComment_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class submitComment_resultTupleSchemeFactory implements SchemeFactory {
      public submitComment_resultTupleScheme getScheme() {
        return new submitComment_resultTupleScheme();
      }
    }

    private static class submitComment_resultTupleScheme extends TupleScheme<submitComment_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, submitComment_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, submitComment_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
